--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.8) ~  Much Love, Ferib 

]]--

local v0 = tonumber;
local v1 = string.byte;
local v2 = string.char;
local v3 = string.sub;
local v4 = string.gsub;
local v5 = string.rep;
local v6 = table.concat;
local v7 = table.insert;
local v8 = math.ldexp;
local v9 = getfenv or function()
	return _ENV;
end;
local v10 = setmetatable;
local v11 = pcall;
local v12 = select;
local v13 = unpack or table.unpack;
local v14 = tonumber;
local function v15(v16, v17, ...)
	local v18 = 1;
	local v19;
	v16 = v4(v3(v16, 5), "..", function(v30)
		if (v1(v30, 2) == 81) then
			v19 = v0(v3(v30, 1, 1));
			return "";
		else
			local v85 = 0;
			local v86;
			while true do
				if (v85 == 0) then
					v86 = v2(v0(v30, 16));
					if v19 then
						local v124 = v5(v86, v19);
						v19 = nil;
						return v124;
					else
						return v86;
					end
					break;
				end
			end
		end
	end);
	local function v20(v31, v32, v33)
		if v33 then
			local v87 = (v31 / (2 ^ (v32 - ((1 + 1) - 1)))) % ((5 - 3) ^ (((v33 - 1) - (v32 - (1 - 0))) + (2 - 1)));
			return v87 - (v87 % (620 - (555 + 64)));
		else
			local v88 = (933 - (857 + 74)) ^ (v32 - (569 - (367 + 32 + 169)));
			return (((v31 % (v88 + v88)) >= v88) and ((1805 - (282 + 595)) - (214 + 713))) or 0;
		end
	end
	local function v21()
		local v34 = v1(v16, v18, v18);
		v18 = v18 + 1;
		return v34;
	end
	local function v22()
		local v35, v36 = v1(v16, v18, v18 + (1639 - (1523 + 114)));
		v18 = v18 + 2 + 0;
		return (v36 * (364 - 108)) + v35;
	end
	local function v23()
		local v37, v38, v39, v40 = v1(v16, v18, v18 + ((1047 + 21) - (68 + 997)));
		v18 = v18 + (1274 - (226 + 1044));
		return (v40 * (73054774 - 56277558)) + (v39 * (65653 - (32 + 19 + 66))) + (v38 * 256) + v37;
	end
	local function v24()
		local v41 = v23();
		local v42 = v23();
		local v43 = 958 - (892 + 65);
		local v44 = (v20(v42, 2 - 1, (81 - 45) - 16) * ((3 - 1) ^ (382 - ((189 - 102) + 263)))) + v41;
		local v45 = v20(v42, 21, (37 + 174) - (67 + 113));
		local v46 = ((v20(v42, 24 + 8) == (2 - 1)) and -(1 + 0)) or ((4 - 1) - 2);
		if (v45 == (952 - (796 + 6 + 150))) then
			if (v44 == (0 - 0)) then
				return v46 * (0 - 0);
			else
				v45 = 1 + 0;
				v43 = 0;
			end
		elseif (v45 == (3044 - (915 + 82))) then
			return ((v44 == 0) and (v46 * (((793 - (368 + 423)) - 1) / (0 + 0)))) or (v46 * NaN);
		end
		return v8(v46, v45 - 1023) * (v43 + (v44 / ((2 - 0) ^ (1239 - (1069 + 118)))));
	end
	local function v25(v47)
		local v48;
		if not v47 then
			v47 = v23();
			if (v47 == (0 - 0)) then
				return "";
			end
		end
		v48 = v3(v16, v18, (v18 + v47) - (19 - (10 + 8)));
		v18 = v18 + v47;
		local v49 = {};
		for v66 = 3 - 2, #v48 do
			v49[v66] = v2(v1(v3(v48, v66, v66)));
		end
		return v6(v49);
	end
	local v26 = v23;
	local function v27(...)
		return {...}, v12("#", ...);
	end
	local function v28()
		local v50 = (function()
			return function(v89, v90, v91, v92, v93, v94, v95, v96)
				local v89 = (function()
					return 971 - (140 + 831);
				end)();
				local v90 = (function()
					return;
				end)();
				local v91 = (function()
					return;
				end)();
				while true do
					if (v89 ~= #"~") then
					else
						if (v90 == #"!") then
							v91 = (function()
								return v92() ~= (0 - 0);
							end)();
						elseif (v90 == (7 - 5)) then
							v91 = (function()
								return v93();
							end)();
						elseif (v90 == #"-19") then
							v91 = (function()
								return v94();
							end)();
						end
						v95[v96] = (function()
							return v91;
						end)();
						break;
					end
					if (v89 == (1850 - (1409 + 441))) then
						local v120 = (function()
							return 718 - (15 + 703);
						end)();
						local v121 = (function()
							return;
						end)();
						while true do
							if (v120 == 0) then
								v121 = (function()
									return 0;
								end)();
								while true do
									if (v121 == (0 + 0)) then
										v90 = (function()
											return v92();
										end)();
										v91 = (function()
											return nil;
										end)();
										v121 = (function()
											return 1 - 0;
										end)();
									end
									if (v121 == (439 - (262 + 176))) then
										v89 = (function()
											return #"}";
										end)();
										break;
									end
								end
								break;
							end
						end
					end
				end
				return v89, v90, v91, v92, v93, v94, v95, v96;
			end;
		end)();
		local v51 = (function()
			return function(v97, v98, v99, v100, v101, v102, v103, v104, v105)
				local v106 = (function()
					return 1721 - (345 + 1376);
				end)();
				local v97 = (function()
					return;
				end)();
				local v98 = (function()
					return;
				end)();
				while true do
					local v114 = (function()
						return 0 - 0;
					end)();
					while true do
						if (v114 == (688 - (198 + 490))) then
							if (v106 == (4 - 3)) then
								while true do
									if (v97 == (0 - 0)) then
										v98 = (function()
											return v99();
										end)();
										if (v100(v98, #"<", #":") == (1206 - (696 + 510))) then
											local v129 = (function()
												return 0;
											end)();
											local v130 = (function()
												return;
											end)();
											local v131 = (function()
												return;
											end)();
											local v132 = (function()
												return;
											end)();
											while true do
												if (v129 ~= (0 - 0)) then
												else
													local v133 = (function()
														return 0 - 0;
													end)();
													while true do
														if (v133 == (1990 - (582 + 1408))) then
															v130 = (function()
																return v100(v98, 6 - 4, #"91(");
															end)();
															v131 = (function()
																return v100(v98, #"?id=", 1268 - (1091 + 171));
															end)();
															v133 = (function()
																return 3 - 2;
															end)();
														end
														if (v133 == (1 + 0)) then
															v129 = (function()
																return 1 - 0;
															end)();
															break;
														end
													end
												end
												if (v129 ~= 1) then
												else
													local v134 = (function()
														return 241 - (187 + 54);
													end)();
													while true do
														if ((780 - (162 + 618)) ~= v134) then
														else
															v132 = (function()
																return {v101(),v101(),nil,nil};
															end)();
															if (v130 == (0 - 0)) then
																local v745 = (function()
																	return 0;
																end)();
																while true do
																	if (v745 == (0 + 0)) then
																		v132[#"xnx"] = (function()
																			return v101();
																		end)();
																		v132[#".com"] = (function()
																			return v101();
																		end)();
																		break;
																	end
																end
															elseif (v130 == #"!") then
																v132[#"gha"] = (function()
																	return v102();
																end)();
															elseif (v130 == (376 - (123 + 251))) then
																v132[#"asd"] = (function()
																	return v102() - ((2 - 0) ^ (79 - 63));
																end)();
															elseif (v130 == #"gha") then
																local v7088 = (function()
																	return 698 - (208 + 490);
																end)();
																while true do
																	if ((0 + 0) == v7088) then
																		v132[#"gha"] = (function()
																			return v102() - ((1638 - (1373 + 263)) ^ 16);
																		end)();
																		v132[#"http"] = (function()
																			return v101();
																		end)();
																		break;
																	end
																end
															end
															v134 = (function()
																return 1001 - (451 + 549);
															end)();
														end
														if (v134 ~= (1 + 0)) then
														else
															v129 = (function()
																return 838 - (660 + 176);
															end)();
															break;
														end
													end
												end
												if (v129 == (1 + 1)) then
													if (v100(v131, #"!", #"]") == #"[") then
														v132[204 - (14 + 188)] = (function()
															return v103[v132[677 - (534 + 141)]];
														end)();
													end
													if (v100(v131, 2 - 0, 2) ~= #">") then
													else
														v132[#"91("] = (function()
															return v103[v132[#"xxx"]];
														end)();
													end
													v129 = (function()
														return 3;
													end)();
												end
												if ((2 + 1) ~= v129) then
												else
													if (v100(v131, #"gha", #"gha") ~= #" ") then
													else
														v132[#".dev"] = (function()
															return v103[v132[#".dev"]];
														end)();
													end
													v104[v105] = (function()
														return v132;
													end)();
													break;
												end
											end
										end
										break;
									end
								end
								return v97, v98, v99, v100, v101, v102, v103, v104, v105;
							end
							if ((0 + 0) == v106) then
								local v125 = (function()
									return 0 + 0;
								end)();
								local v126 = (function()
									return;
								end)();
								while true do
									if ((0 + 0) == v125) then
										v126 = (function()
											return 0 - 0;
										end)();
										while true do
											if (v126 == (341 - (218 + 123))) then
												v97 = (function()
													return 1581 - (1535 + 46);
												end)();
												v98 = (function()
													return nil;
												end)();
												v126 = (function()
													return 1 + 0;
												end)();
											end
											if (v126 ~= (1 - 0)) then
											else
												v106 = (function()
													return 1 - 0;
												end)();
												break;
											end
										end
										break;
									end
								end
							end
							break;
						end
					end
				end
			end;
		end)();
		local v52 = (function()
			return function(v107, v108, v109)
				local v110 = (function()
					return 0;
				end)();
				local v111 = (function()
					return;
				end)();
				while true do
					if (v110 == (0 - 0)) then
						v111 = (function()
							return 0 + 0;
						end)();
						while true do
							if (v111 ~= (0 + 0)) then
							else
								local v127 = (function()
									return 396 - (115 + 281);
								end)();
								while true do
									if (v127 == (0 + 0)) then
										v107[v108 - #">"] = (function()
											return v109();
										end)();
										return v107, v108, v109;
									end
								end
							end
						end
						break;
					end
				end
			end;
		end)();
		local v53 = (function()
			return {};
		end)();
		local v54 = (function()
			return {};
		end)();
		local v55 = (function()
			return {};
		end)();
		local v56 = (function()
			return {v53,v54,nil,v55};
		end)();
		local v57 = (function()
			return v23();
		end)();
		local v58 = (function()
			return {};
		end)();
		for v68 = #">", v57 do
			FlatIdent_2BD95, Type, Cons, v21, v24, v25, v58, v68 = (function()
				return v50(FlatIdent_2BD95, Type, Cons, v21, v24, v25, v58, v68);
			end)();
		end
		v56[#"19("] = (function()
			return v21();
		end)();
		for v69 = #"\\", v23() do
			FlatIdent_60EA1, Descriptor, v21, v20, v22, v23, v58, v53, v69 = (function()
				return v51(FlatIdent_60EA1, Descriptor, v21, v20, v22, v23, v58, v53, v69);
			end)();
		end
		for v70 = #",", v23() do
			v54, v70, v28 = (function()
				return v52(v54, v70, v28);
			end)();
		end
		return v56;
	end
	local function v29(v60, v61, v62)
		local v63 = v60[1];
		local v64 = v60[1469 - (899 + 568)];
		local v65 = v60[2 + 1];
		return function(...)
			local v71 = v63;
			local v72 = v64;
			local v73 = v65;
			local v74 = v27;
			local v75 = 2 - 1;
			local v76 = -1;
			local v77 = {};
			local v78 = {...};
			local v79 = v12("#", ...) - 1;
			local v80 = {};
			local v81 = {};
			for v112 = 0, v79 do
				if ((1608 == 1608) and (v112 >= v73)) then
					v77[v112 - v73] = v78[v112 + (291 - (60 + 230))];
				else
					v81[v112] = v78[v112 + (573 - (426 + 146))];
				end
			end
			local v82 = (v79 - v73) + 1 + 0;
			local v83;
			local v84;
			while true do
				local v113 = 0;
				while true do
					if (v113 == 1) then
						if (v84 <= (1563 - (282 + 1174))) then
							if (v84 <= (864 - (569 + 242))) then
								if (v84 <= (74 - 48)) then
									if (v84 <= (1 + 11)) then
										if (v84 <= (5 + 0)) then
											if (v84 <= (1363 - (1247 + 114))) then
												if (v84 <= (1024 - (706 + 318))) then
													local v139 = 1251 - (721 + 530);
													local v140;
													local v141;
													local v142;
													while true do
														if (v139 == (1273 - (945 + 326))) then
															v81[v83[(12 - 8) - 2]] = v83[3 + 0];
															v75 = v75 + 1 + 0;
															v83 = v71[v75];
															v139 = 703 - (271 + (1079 - 650));
														end
														if (v139 == (6 + 0)) then
															v81[v83[1502 - ((4243 - 2835) + 92)]] = v81[v83[1089 - ((725 - 264) + 625)]][v81[v83[1292 - (993 + 295)]]];
															v75 = v75 + 1 + 0;
															v83 = v71[v75];
															v139 = 7;
														end
														if (v139 == (1171 - (418 + 753))) then
															v140 = nil;
															v141 = nil;
															v142 = nil;
															v139 = 1 + 0;
														end
														if (v139 == (1 + 3)) then
															v81[v83[1 + 1]] = {};
															v75 = v75 + 1 + 0;
															v83 = v71[v75];
															v139 = 534 - ((2345 - (291 + 1648)) + 123);
														end
														if ((1772 - (1749 + 20)) == v139) then
															v81[v83[1 + 1]] = v81[v83[1325 - (1249 + (204 - 131))]][v81[v83[2 + (4 - 2)]]];
															v75 = v75 + (1146 - (466 + 679));
															v83 = v71[v75];
															v139 = 9 - (5 + 0);
														end
														if ((5 == v139) or (4997 == 1801)) then
															v81[v83[5 - 3]] = v83[1903 - (106 + 1794)];
															v75 = v75 + 1;
															v83 = v71[v75];
															v139 = 20 - 14;
														end
														if (v139 == (1 + 0)) then
															v81[v83[1 + 0 + 1]] = {};
															v75 = v75 + (2 - 1);
															v83 = v71[v75];
															v139 = 2;
														end
														if (v139 == (21 - 13)) then
															for v4613 = 1, v140 do
																v141[v4613] = v81[v142 + v4613];
															end
															break;
														end
														if ((v139 == (121 - (4 + (1808 - (1584 + 114))))) or (4999 < 1725)) then
															v142 = v83[2];
															v141 = v81[v142];
															v140 = v83[587 - (57 + 527)];
															v139 = 1435 - (41 + 1386);
														end
													end
												elseif ((v84 == 1) or (523 >= 724)) then
													local v746;
													local v747;
													local v748;
													v81[v83[105 - (17 + 86)]] = {};
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[3 - 1]] = v81[v83[3]][v81[v83[11 - 7]]];
													v75 = v75 + (167 - ((391 - 269) + 44));
													v83 = v71[v75];
													v81[v83[2 - 0]] = {};
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v81[v83[2 + (1765 - (957 + 808))]] = v83[1 + 2];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3]][v81[v83[69 - (30 + 35)]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v748 = v83[1259 - (1043 + 214)];
													v747 = v81[v748];
													v746 = v83[11 - 8];
													for v3688 = 1213 - (323 + 889), v746 do
														v747[v3688] = v81[v748 + v3688];
													end
												else
													v81[v83[5 - 3]][v81[v83[583 - (361 + 219)]]] = v81[v83[324 - ((214 - 161) + 267)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[415 - ((62 - 47) + 398)]] = v83[985 - ((1089 - (435 + 636)) + 964)];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v81[v83[2 + 0]] = v81[v83[2 + 1]][v81[v83[854 - (20 + 830)]]];
													v75 = v75 + 1 + 0 + 0;
													v83 = v71[v75];
													v81[v83[128 - (116 + 10)]] = v83[1 + 2];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[740 - (542 + 196)]][v81[v83[6 - 3]]] = v81[v83[2 + 2]];
													v75 = v75 + (786 - (342 + 443));
													v83 = v71[v75];
													v81[v83[2 + 0]][v81[v83[(2 - 0) + 1]]] = v81[v83[2 + 2]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[4 - 2]] = v83[7 - (4 + 0)];
													v75 = v75 + (1552 - (1126 + 293 + 132));
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3]][v81[v83[409 - ((650 - (321 + 211)) + 287)]]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = {};
													v75 = v75 + ((11 - 8) - 2);
													v83 = v71[v75];
													v81[v83[1123 - (100 + 18 + 1003)]] = v83[8 - 5];
												end
											elseif (v84 <= (380 - (142 + 235))) then
												v81[v83[9 - 7]][v81[v83[1 + 2]]] = v81[v83[981 - (553 + 424)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[5 - 2];
												v75 = v75 + (3 - 2) + 0;
												v83 = v71[v75];
												v81[v83[2 + (1242 - (506 + 736))]] = v81[v83[2 + 1]][v81[v83[(1343 - (428 + 913)) + 2]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[6 - 3];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[4 - 2]][v81[v83[1 + 2]]] = v81[v83[19 - 15]];
												v75 = v75 + (754 - (239 + 514));
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[1332 - (797 + 532)]]] = v81[v83[3 + 1]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[6 - 3];
												v75 = v75 + (1203 - (373 + 829));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[734 - (476 + 255)]][v81[v83[1134 - (369 + 761)]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = {};
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[5 - 2];
											elseif ((v84 == (242 - (64 + 174))) or (722 == 445)) then
												local v781;
												v81[v83[1 + 1]] = v81[v83[3 - 0]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[338 - (144 + 192)]] = v83[219 - (42 + 174)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v781 = v83[2];
												v81[v781] = v81[v781](v13(v81, v781 + (1505 - (363 + 1141)), v83[3]));
												v75 = v75 + (1581 - (1183 + 397));
												v83 = v71[v75];
												v81[v83[5 - 3]][v81[v83[3 + 0]]] = v81[v83[3 + 1]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1977 - (1913 + 62)]] = v83[2 + 1];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1935 - (565 + 1368)]] = v81[v83[11 - 8]];
												v75 = v75 + (1662 - (1477 + 184));
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[3 + 0];
												v75 = v75 + (857 - (564 + 292));
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[8 - 5];
												v75 = v75 + (305 - (244 + 60));
												v83 = v71[v75];
												v781 = v83[2];
												v81[v781] = v81[v781](v13(v81, v781 + 1 + 0, v83[3]));
												v75 = v75 + (477 - (41 + 435));
												v83 = v71[v75];
												v81[v83[1003 - (938 + 63)]][v81[v83[3]]] = v81[v83[4]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + (1126 - (936 + 189));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[1616 - (1565 + 48)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[1141 - (782 + 356)];
												v75 = v75 + (268 - (176 + 91));
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[4 - 1];
												v75 = v75 + (1093 - (975 + 117));
												v83 = v71[v75];
												v781 = v83[2];
												v81[v781] = v81[v781](v13(v81, v781 + (1876 - (157 + 1718)), v83[3 + 0]));
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[6 - 4]][v81[v83[1021 - (697 + 321)]]] = v81[v83[10 - 6]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[2 + 1];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[7 - 4]];
												v75 = v75 + (1228 - (322 + 905));
												v83 = v71[v75];
												v81[v83[613 - (602 + 9)]] = v83[1192 - (449 + 740)];
												v75 = v75 + (873 - (826 + 46));
												v83 = v71[v75];
												v81[v83[2]] = v83[950 - (245 + 702)];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v781 = v83[1 + 1];
												v81[v781] = v81[v781](v13(v81, v781 + 1, v83[3]));
												v75 = v75 + (1899 - (260 + 1638));
												v83 = v71[v75];
												v81[v83[2]][v81[v83[443 - (382 + 58)]]] = v81[v83[12 - 8]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[5 - 2];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1207 - (902 + 303)]] = v81[v83[5 - 2]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[6 - 3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[1693 - (1121 + 569)];
												v75 = v75 + (215 - (22 + 192));
												v83 = v71[v75];
												v781 = v83[685 - (483 + 200)];
												v81[v781] = v81[v781](v13(v81, v781 + (1464 - (1404 + 59)), v83[8 - 5]));
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[767 - (468 + 297)]][v81[v83[565 - (334 + 228)]]] = v81[v83[13 - 9]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[1 + 2];
												v75 = v75 + (237 - (141 + 95));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[7 - 4]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v781 = v83[2 - 0];
												v81[v781] = v81[v781](v13(v81, v781 + 1 + 0, v83[166 - (92 + 71)]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 - 0]][v81[v83[3]]] = v81[v83[769 - (574 + 191)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[4 - 2]] = v81[v83[2 + 1]];
												v75 = v75 + (850 - (254 + 595));
												v83 = v71[v75];
												v81[v83[128 - (55 + 71)]] = v83[3 - 0];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1792 - (573 + 1217)]] = v83[8 - 5];
												v75 = v75 + 1;
												v83 = v71[v75];
												v781 = v83[1 + 1];
												v81[v781] = v81[v781](v13(v81, v781 + 1, v83[4 - 1]));
												v75 = v75 + (940 - (714 + 225));
												v83 = v71[v75];
												v81[v83[5 - 3]][v81[v83[3 - 0]]] = v81[v83[1 + 3]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[809 - (118 + 688)];
												v75 = v75 + (49 - (25 + 23));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[3]];
												v75 = v75 + (1887 - (927 + 959));
												v83 = v71[v75];
												v81[v83[6 - 4]] = v83[735 - (16 + 716)];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[99 - (11 + 86)]] = v83[6 - 3];
												v75 = v75 + (286 - (175 + 110));
												v83 = v71[v75];
												v781 = v83[4 - 2];
												v81[v781] = v81[v781](v13(v81, v781 + 1, v83[14 - 11]));
												v75 = v75 + (1797 - (503 + 1293));
												v83 = v71[v75];
												v81[v83[5 - 3]][v81[v83[3 + 0]]] = v81[v83[1065 - (810 + 251)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[535 - (43 + 490)]] = v81[v83[736 - (711 + 22)]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[861 - (240 + 619)]] = v83[1 + 2];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[1747 - (1344 + 400)];
												v75 = v75 + (406 - (255 + 150));
												v83 = v71[v75];
												v781 = v83[2 + 0];
												v81[v781] = v81[v781](v13(v81, v781 + 1, v83[2 + 1]));
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v81[v83[6 - 4]][v81[v83[3]]] = v81[v83[1743 - (404 + 1335)]];
												v75 = v75 + (407 - (183 + 223));
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[2 + 1];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[339 - (10 + 327)]] = v81[v83[3 + 0]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[340 - (118 + 220)]] = v83[1 + 2];
												v75 = v75 + (450 - (108 + 341));
												v83 = v71[v75];
												v81[v83[2]] = v83[2 + 1];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v781 = v83[1495 - (711 + 782)];
												v81[v781] = v81[v781](v13(v81, v781 + 1, v83[5 - 2]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[471 - (270 + 199)]][v81[v83[1 + 2]]] = v81[v83[4]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1821 - (580 + 1239)]] = v83[8 - 5];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[7 - 4];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v781 = v83[1169 - (645 + 522)];
												v81[v781] = v81[v781](v13(v81, v781 + (1791 - (1010 + 780)), v83[3 + 0]));
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v81[v83[2]][v81[v83[8 - 5]]] = v81[v83[4]];
												v75 = v75 + (1837 - (1045 + 791));
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[3];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[507 - (351 + 154)]] = v81[v83[1577 - (1281 + 293)]];
												v75 = v75 + (267 - (28 + 238));
												v83 = v71[v75];
												v81[v83[2]] = v83[6 - 3];
												v75 = v75 + (1560 - (1381 + 178));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v781 = v83[2];
												v81[v781] = v81[v781](v13(v81, v781 + 1 + 0, v83[10 - 7]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]][v81[v83[473 - (381 + 89)]]] = v81[v83[4 + 0]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[1159 - (1074 + 82)];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[1786 - (214 + 1570)]] = v81[v83[1458 - (990 + 465)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[11 - 8];
												v75 = v75 + 1;
												v83 = v71[v75];
												v781 = v83[1728 - (1668 + 58)];
												v81[v781] = v81[v781](v13(v81, v781 + (627 - (512 + 114)), v83[7 - 4]));
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[6 - 4]][v81[v83[2 + 1]]] = v81[v83[1 + 3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[6 - 4]] = v83[1997 - (109 + 1885)];
												v75 = v75 + (1470 - (1269 + 200));
												v83 = v71[v75];
												v81[v83[3 - 1]] = v81[v83[818 - (98 + 717)]];
												v75 = v75 + (827 - (802 + 24));
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[3 - 0];
											else
												local v870 = v83[1 + 1];
												do
													return v13(v81, v870, v870 + v83[3 + 0]);
												end
											end
										elseif ((v84 <= (2 + 6)) or (3054 < 1778)) then
											if ((4723 == 4723) and (v84 <= (2 + 4))) then
												local v158 = 0 - 0;
												local v159;
												local v160;
												local v161;
												while true do
													if (v158 == (3 - 2)) then
														v161 = v83[2 + 1];
														for v4616 = 1 + 0, v161 do
															v160[v4616] = v81[v159 + v4616];
														end
														break;
													end
													if ((1863 == 1863) and (v158 == (0 + 0))) then
														v159 = v83[2 + 0];
														v160 = v81[v159];
														v158 = 1 + 0;
													end
												end
											elseif ((801 <= 2334) and (v84 > 7)) then
												local v871 = 0;
												local v872;
												local v873;
												local v874;
												while true do
													if (6 == v871) then
														for v6991 = 1434 - (797 + 636), v872 do
															v873[v6991] = v81[v874 + v6991];
														end
														break;
													end
													if (v871 == (0 - 0)) then
														v872 = nil;
														v873 = nil;
														v874 = nil;
														v81[v83[2]] = {};
														v871 = 1620 - (1427 + 192);
													end
													if (v871 == (2 + 1)) then
														v81[v83[4 - 2]] = {};
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2]] = v83[2 + 1];
														v871 = 330 - (192 + 134);
													end
													if (v871 == (1281 - (316 + 960))) then
														v83 = v71[v75];
														v874 = v83[2];
														v873 = v81[v874];
														v872 = v83[3];
														v871 = 6;
													end
													if ((v871 == 1) or (2220 >= 2751)) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2]] = v83[3 + 0];
														v75 = v75 + 1 + 0;
														v871 = 7 - 5;
													end
													if ((910 >= 104) and (v871 == (553 - (83 + 468)))) then
														v83 = v71[v75];
														v81[v83[1808 - (1202 + 604)]] = v81[v83[13 - 10]][v81[v83[6 - 2]]];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v871 = 328 - (45 + 280);
													end
													if (4 == v871) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v81[v83[3]][v81[v83[2 + 2]]];
														v75 = v75 + 1 + 0;
														v871 = 5;
													end
												end
											else
												local v875 = 0 + 0;
												while true do
													if (6 == v875) then
														v81[v83[2]] = {};
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[1913 - (340 + 1571)]] = v83[2 + 1];
														break;
													end
													if (v875 == (1773 - (1733 + 39))) then
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[1037 - (125 + 909)]][v81[v83[1952 - (1096 + 852)]]];
														v75 = v75 + 1 + 0;
														v875 = 2 - 0;
													end
													if ((v875 == (5 + 0)) or (722 >= 3776)) then
														v83 = v71[v75];
														v81[v83[514 - (409 + 103)]] = v81[v83[3]][v81[v83[4]]];
														v75 = v75 + (237 - (46 + 190));
														v83 = v71[v75];
														v875 = 6;
													end
													if ((2 == v875) or (3095 > 4663)) then
														v83 = v71[v75];
														v81[v83[97 - (51 + 44)]] = v83[1 + 2];
														v75 = v75 + (1318 - (1114 + 203));
														v83 = v71[v75];
														v875 = 729 - (228 + 498);
													end
													if ((v875 == 4) or (3573 <= 2090)) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[666 - (174 + 489)];
														v75 = v75 + (2 - 1);
														v875 = 1910 - (830 + 1075);
													end
													if (((527 - (303 + 221)) == v875) or (2574 < 942)) then
														v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
														v75 = v75 + (1270 - (231 + 1038));
														v83 = v71[v75];
														v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[4]];
														v875 = 1166 - (171 + 991);
													end
													if ((v875 == (0 - 0)) or (4131 <= 3408)) then
														v81[v83[5 - 3]][v81[v83[7 - 4]]] = v81[v83[4 + 0]];
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v81[v83[5 - 3]] = v83[4 - 1];
														v875 = 1;
													end
												end
											end
										elseif ((3507 > 2108) and (v84 <= (30 - 20))) then
											if ((v84 > (1257 - (111 + 1137))) or (1707 < 948)) then
												local v876 = 158 - (91 + 67);
												local v877;
												local v878;
												local v879;
												local v880;
												while true do
													if ((4780 >= 1332) and ((38 - 25) == v876)) then
														v76 = (v879 + v880) - (1 + 0);
														v877 = 523 - (423 + 100);
														for v6994 = v880, v76 do
															v877 = v877 + 1 + 0;
															v81[v6994] = v878[v877];
														end
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v880 = v83[2 + 0];
														v81[v880](v13(v81, v880 + (772 - (326 + 445)), v76));
														break;
													end
													if (v876 == (8 - 6)) then
														v83 = v71[v75];
														v81[v83[4 - 2]] = v61[v83[3]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[4 - 2]] = v81[v83[3]];
														v75 = v75 + (712 - (530 + 181));
														v83 = v71[v75];
														v876 = 884 - (614 + 267);
													end
													if (v876 == 3) then
														v81[v83[2]] = v81[v83[35 - (19 + 13)]];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[4 - 2]] = v81[v83[8 - 5]] + v83[2 + 2];
														v75 = v75 + 1;
														v83 = v71[v75];
														v880 = v83[3 - 1];
														v876 = 7 - 3;
													end
													if ((v876 == (1812 - (1293 + 519))) or (4685 == 2498)) then
														v877 = nil;
														v878, v879 = nil;
														v880 = nil;
														v81[v83[3 - 1]] = v81[v83[7 - 4]];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[8 - 6]] = v61[v83[6 - 3]];
														v876 = 1;
													end
													if (v876 == (6 + 5)) then
														v76 = (v879 + v880) - (1 + 0);
														v877 = 0;
														for v6997 = v880, v76 do
															local v6998 = 0 - 0;
															while true do
																if ((v6998 == 0) or (2988 >= 3053)) then
																	v877 = v877 + 1 + 0;
																	v81[v6997] = v878[v877];
																	break;
																end
															end
														end
														v75 = v75 + 1;
														v83 = v71[v75];
														v880 = v83[2];
														v81[v880] = v81[v880](v13(v81, v880 + 1 + 0, v76));
														v876 = 12;
													end
													if (v876 == (8 + 4)) then
														v75 = v75 + (1097 - (709 + 387));
														v83 = v71[v75];
														v81[v83[1860 - (673 + 1185)]] = v81[v83[8 - 5]] % v83[4];
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v880 = v83[2 - 0];
														v878, v879 = v74(v81[v880](v81[v880 + 1]));
														v876 = 13;
													end
													if (v876 == 10) then
														v76 = (v879 + v880) - (1 + 0);
														v877 = 0 + 0;
														for v6999 = v880, v76 do
															v877 = v877 + (1 - 0);
															v81[v6999] = v878[v877];
														end
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v880 = v83[3 - 1];
														v878, v879 = v74(v81[v880](v13(v81, v880 + (1 - 0), v76)));
														v876 = 1891 - (446 + 1434);
													end
													if (v876 == (1292 - (1040 + 243))) then
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[1849 - (559 + 1288)]] = v81[v83[3]] + v83[1935 - (609 + 1322)];
														v75 = v75 + 1;
														v83 = v71[v75];
														v880 = v83[456 - (13 + 441)];
														v878, v879 = v74(v81[v880](v13(v81, v880 + 1, v83[10 - 7])));
														v876 = 10;
													end
													if (v876 == 7) then
														v83 = v71[v75];
														v81[v83[5 - 3]] = v81[v83[14 - 11]] % v81[v83[1 + 3]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[7 - 5]] = v83[2 + 1] + v81[v83[2 + 2]];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v876 = 8;
													end
													if ((v876 == (3 + 2)) or (1739 <= 314)) then
														v81[v880] = v81[v880](v13(v81, v880 + (1 - 0), v76));
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v61[v83[3 + 0]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v61[v83[3 + 0]];
														v876 = 439 - (153 + 280);
													end
													if ((11 - 7) == v876) then
														v878, v879 = v74(v81[v880](v13(v81, v880 + 1 + 0, v83[2 + 1])));
														v76 = (v879 + v880) - 1;
														v877 = 0 + 0;
														for v7002 = v880, v76 do
															local v7003 = 0 + 0;
															while true do
																if (v7003 == 0) then
																	v877 = v877 + 1 + 0;
																	v81[v7002] = v878[v877];
																	break;
																end
															end
														end
														v75 = v75 + 1;
														v83 = v71[v75];
														v880 = v83[2 - 0];
														v876 = 5;
													end
													if (v876 == (5 + 3)) then
														v81[v83[669 - (89 + 578)]] = #v81[v83[3 + 0]];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[1051 - (572 + 477)]] = v81[v83[1 + 2]] % v81[v83[3 + 1]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[88 - (84 + 2)]] = v83[4 - 1] + v81[v83[4]];
														v876 = 7 + 2;
													end
													if (v876 == (843 - (497 + 345))) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[1 + 1]] = v61[v83[3]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[1335 - (605 + 728)]] = v61[v83[3]];
														v75 = v75 + 1 + 0;
														v876 = 3 - 1;
													end
													if ((1926 <= 4596) and (6 == v876)) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[7 - 5]] = v81[v83[3 + 0]];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[2]] = #v81[v83[3 + 0]];
														v75 = v75 + (490 - (457 + 32));
														v876 = 3 + 4;
													end
												end
											else
												local v881;
												v81[v83[1404 - (832 + 570)]] = v81[v83[3 + 0]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[6 - 4]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
												v75 = v75 + (797 - (588 + 208));
												v83 = v71[v75];
												v881 = v83[5 - 3];
												v81[v881] = v81[v881](v13(v81, v881 + (1801 - (884 + 916)), v83[6 - 3]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[655 - (232 + 421)]][v83[1892 - (1569 + 320)]] = v81[v83[1 + 3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[6 - 4]] = v83[608 - (316 + 289)];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[1456 - (666 + 787)]];
												v75 = v75 + (426 - (360 + 65));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[257 - (79 + 175)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[3 + 0];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v881 = v83[3 - 1];
												v81[v881] = v81[v881](v13(v81, v881 + 1, v83[902 - (503 + 396)]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[183 - (92 + 89)]][v81[v83[5 - 2]]] = v81[v83[4]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[11 - 8];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[6 - 3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[2 + 1];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[4 - 1];
												v75 = v75 + 1;
												v83 = v71[v75];
												v881 = v83[2];
												v81[v881] = v81[v881](v13(v81, v881 + (1245 - (485 + 759)), v83[6 - 3]));
												v75 = v75 + (1190 - (442 + 747));
												v83 = v71[v75];
												v81[v83[1137 - (832 + 303)]][v81[v83[949 - (88 + 858)]]] = v81[v83[4]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[1 + 2];
												v75 = v75 + (790 - (766 + 23));
												v83 = v71[v75];
												v81[v83[9 - 7]] = v81[v83[3 - 0]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[6 - 4]] = v83[1076 - (1036 + 37)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[3 + 0];
												v75 = v75 + (1481 - (641 + 839));
												v83 = v71[v75];
												v881 = v83[915 - (910 + 3)];
												v81[v881] = v81[v881](v13(v81, v881 + 1, v83[7 - 4]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1686 - (1466 + 218)]][v81[v83[2 + 1]]] = v81[v83[1152 - (556 + 592)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[810 - (329 + 479)]] = v83[857 - (174 + 680)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[10 - 7]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[3 + 0];
												v75 = v75 + (740 - (396 + 343));
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v881 = v83[2];
												v81[v881] = v81[v881](v13(v81, v881 + (1478 - (29 + 1448)), v83[1392 - (135 + 1254)]));
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[9 - 7]][v81[v83[2 + 1]]] = v81[v83[4]];
												v75 = v75 + (1528 - (389 + 1138));
												v83 = v71[v75];
												v81[v83[576 - (102 + 472)]] = v83[3 + 0];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[1548 - (320 + 1225)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[2 + 1];
												v75 = v75 + (1465 - (157 + 1307));
												v83 = v71[v75];
												v81[v83[1861 - (821 + 1038)]] = v83[7 - 4];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v881 = v83[2];
												v81[v881] = v81[v881](v13(v81, v881 + 1, v83[4 - 1]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[1029 - (834 + 192)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[1 + 2]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + (305 - (300 + 4));
												v83 = v71[v75];
												v81[v83[2]] = v83[1 + 2];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v881 = v83[2];
												v81[v881] = v81[v881](v13(v81, v881 + (363 - (112 + 250)), v83[2 + 1]));
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2 + 0]][v81[v83[2 + 1]]] = v81[v83[3 + 1]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3 + 0];
												v75 = v75 + (1415 - (1001 + 413));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[884 - (244 + 638)]] = v83[696 - (627 + 66)];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[605 - (512 + 90)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v881 = v83[1908 - (1665 + 241)];
												v81[v881] = v81[v881](v13(v81, v881 + (718 - (373 + 344)), v83[2 + 1]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[7 - 4]]] = v81[v83[4]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[1102 - (35 + 1064)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[6 - 3]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[1239 - (298 + 938)];
												v75 = v75 + (1260 - (233 + 1026));
												v83 = v71[v75];
												v81[v83[2]] = v83[1669 - (636 + 1030)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v881 = v83[2 + 0];
												v81[v881] = v81[v881](v13(v81, v881 + 1 + 0, v83[1 + 2]));
												v75 = v75 + (222 - (55 + 166));
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[1 + 2]]] = v81[v83[15 - 11]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[299 - (36 + 261)]] = v83[4 - 1];
												v75 = v75 + (1369 - (34 + 1334));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[3 + 0]];
												v75 = v75 + (1284 - (1035 + 248));
												v83 = v71[v75];
												v81[v83[2]] = v83[24 - (20 + 1)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[322 - (134 + 185)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v881 = v83[2];
												v81[v881] = v81[v881](v13(v81, v881 + (1134 - (549 + 584)), v83[688 - (314 + 371)]));
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[970 - (478 + 490)]][v81[v83[2 + 1]]] = v81[v83[1176 - (786 + 386)]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[1381 - (1055 + 324)]] = v83[3];
												v75 = v75 + (1341 - (1093 + 247));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[7 - 5]] = v83[9 - 6];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[3];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v881 = v83[1 + 1];
												v81[v881] = v81[v881](v13(v81, v881 + (3 - 2), v83[10 - 7]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]][v81[v83[7 - 4]]] = v81[v83[692 - (364 + 324)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[6 - 3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[8 - 6]] = v81[v83[3]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[8 - 5];
												v75 = v75 + (1269 - (1249 + 19));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[11 - 8];
												v75 = v75 + 1;
												v83 = v71[v75];
												v881 = v83[2];
												v81[v881] = v81[v881](v13(v81, v881 + (1087 - (686 + 400)), v83[3 + 0]));
												v75 = v75 + (230 - (73 + 156));
												v83 = v71[v75];
												v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[4]];
												v75 = v75 + (812 - (721 + 90));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[9 - 6];
												v75 = v75 + (471 - (224 + 246));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[4 - 1]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[1 + 2];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[9 - 6];
												v75 = v75 + 1;
												v83 = v71[v75];
												v881 = v83[515 - (203 + 310)];
												v81[v881] = v81[v881](v13(v81, v881 + (1994 - (1238 + 755)), v83[3]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1536 - (709 + 825)]][v81[v83[4 - 1]]] = v81[v83[5 - 1]];
												v75 = v75 + (865 - (196 + 668));
												v83 = v71[v75];
												v81[v83[7 - 5]] = v83[5 - 2];
												v75 = v75 + (834 - (171 + 662));
												v83 = v71[v75];
												v81[v83[95 - (4 + 89)]] = v81[v83[10 - 7]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
											end
										elseif (v84 > 11) then
											local v963;
											local v964;
											local v965;
											v81[v83[2]] = {};
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[1489 - (35 + 1451)];
											v75 = v75 + (1454 - (28 + 1425));
											v83 = v71[v75];
											v81[v83[1995 - (941 + 1052)]] = v81[v83[3 + 0]][v81[v83[1518 - (822 + 692)]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]] = {};
											v75 = v75 + (298 - (45 + 252));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[7 - 4]][v81[v83[437 - (114 + 319)]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v965 = v83[2];
											v964 = v81[v965];
											v963 = v83[3 - 0];
											for v3694 = 1 + 0, v963 do
												v964[v3694] = v81[v965 + v3694];
											end
										else
											v81[v83[2 - 0]] = v83[5 - 2];
											v75 = v75 + (1964 - (556 + 1407));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v81[v83[1210 - (741 + 465)]]];
											v75 = v75 + (466 - (170 + 295));
											v83 = v71[v75];
											v81[v83[2 + 0]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[3]][v81[v83[4 + 0]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = {};
											v75 = v75 + (1231 - (957 + 273));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[2 + 1];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[7 - 4]][v81[v83[11 - 7]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[9 - 7]] = {};
											v75 = v75 + (1781 - (389 + 1391));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1 + 2];
										end
									elseif ((v84 <= (42 - 23)) or (3962 < 2691)) then
										if (v84 <= (966 - (783 + 168))) then
											if (v84 <= (43 - 30)) then
												v81[v83[2 + 0]][v81[v83[314 - (309 + 2)]]] = v81[v83[4]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[1215 - (1090 + 122)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[6 - 4]] = v81[v83[3 + 0]][v81[v83[4]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1120 - (628 + 490)]] = v83[1 + 2];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[9 - 7]][v81[v83[777 - (431 + 343)]]] = v81[v83[7 - 3]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[4]];
												v75 = v75 + (1696 - (556 + 1139));
												v83 = v71[v75];
												v81[v83[17 - (6 + 9)]] = v83[1 + 2];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[172 - (28 + 141)]][v81[v83[2 + 2]]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = {};
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1319 - (486 + 831)]] = v83[3];
											elseif (v84 == (36 - 22)) then
												local v992 = 0;
												local v993;
												while true do
													if (v992 == 5) then
														v83 = v71[v75];
														v81[v83[6 - 4]] = v83[1 + 2];
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v81[v83[1265 - (668 + 595)]] = v81[v83[3 + 0]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[1 + 1]] = v83[8 - 5];
														v75 = v75 + (291 - (23 + 267));
														v992 = 1950 - (1129 + 815);
													end
													if ((618 < 3435) and (8 == v992)) then
														v75 = v75 + (388 - (371 + 16));
														v83 = v71[v75];
														v81[v83[2]] = v83[3];
														v75 = v75 + (1751 - (1326 + 424));
														v83 = v71[v75];
														v993 = v83[2];
														v81[v993] = v81[v993](v13(v81, v993 + (1 - 0), v83[10 - 7]));
														v75 = v75 + 1;
														v83 = v71[v75];
														v992 = 127 - (88 + 30);
													end
													if (v992 == 4) then
														v81[v83[773 - (720 + 51)]] = v83[6 - 3];
														v75 = v75 + (1777 - (421 + 1355));
														v83 = v71[v75];
														v993 = v83[2 - 0];
														v81[v993] = v81[v993](v13(v81, v993 + 1 + 0, v83[1086 - (286 + 797)]));
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v81[v83[2 - 0]][v81[v83[442 - (397 + 42)]]] = v81[v83[4]];
														v75 = v75 + 1 + 0;
														v992 = 805 - (24 + 776);
													end
													if ((2 - 0) == v992) then
														v75 = v75 + (786 - (222 + 563));
														v83 = v71[v75];
														v993 = v83[3 - 1];
														v81[v993] = v81[v993](v13(v81, v993 + 1 + 0, v83[193 - (23 + 167)]));
														v75 = v75 + (1799 - (690 + 1108));
														v83 = v71[v75];
														v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[852 - (40 + 808)]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v992 = 11 - 8;
													end
													if ((v992 == (15 + 0)) or (111 >= 4265)) then
														v81[v993] = v81[v993](v13(v81, v993 + 1 + 0, v83[2 + 1]));
														v75 = v75 + (572 - (47 + 524));
														v83 = v71[v75];
														v81[v83[2 + 0]][v81[v83[8 - 5]]] = v81[v83[4]];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[4 - 2]] = v83[1729 - (1165 + 561)];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v992 = 16;
													end
													if (v992 == (21 - 14)) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[481 - (341 + 138)]] = v83[1 + 2];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[329 - (89 + 237)]];
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v81[v83[3 - 1]] = v83[884 - (581 + 300)];
														v992 = 1228 - (855 + 365);
													end
													if (28 == v992) then
														v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[4]];
														break;
													end
													if ((2241 <= 2299) and (v992 == (6 + 12))) then
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[1238 - (1030 + 205)]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2]] = v83[3 + 0];
														v75 = v75 + (287 - (156 + 130));
														v83 = v71[v75];
														v81[v83[2]] = v83[3];
														v75 = v75 + (2 - 1);
														v992 = 19;
													end
													if (v992 == (1 - 0)) then
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[1 + 1]] = v81[v83[2 + 1]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[71 - (10 + 59)]] = v83[1 + 2];
														v75 = v75 + (4 - 3);
														v83 = v71[v75];
														v81[v83[1165 - (671 + 492)]] = v83[3 + 0];
														v992 = 1217 - (369 + 846);
													end
													if ((4776 >= 1366) and (v992 == (7 + 19))) then
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[1948 - (1036 + 909)];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2 - 0]] = v81[v83[206 - (11 + 192)]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[178 - (135 + 40)];
														v992 = 65 - 38;
													end
													if ((297 < 4205) and (v992 == (7 + 3))) then
														v81[v83[4 - 2]] = v83[4 - 1];
														v75 = v75 + (177 - (50 + 126));
														v83 = v71[v75];
														v81[v83[2]] = v83[8 - 5];
														v75 = v75 + 1;
														v83 = v71[v75];
														v993 = v83[1 + 1];
														v81[v993] = v81[v993](v13(v81, v993 + (1414 - (1233 + 180)), v83[972 - (522 + 447)]));
														v75 = v75 + (1422 - (107 + 1314));
														v992 = 6 + 5;
													end
													if (v992 == (48 - 32)) then
														v81[v83[2]] = v81[v83[3]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[3 - 1]] = v83[3];
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v81[v83[1912 - (716 + 1194)]] = v83[1 + 2];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v992 = 520 - (74 + 429);
													end
													if ((2420 >= 1428) and (v992 == (32 - 15))) then
														v993 = v83[1 + 1];
														v81[v993] = v81[v993](v13(v81, v993 + (2 - 1), v83[3 + 0]));
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[4 - 2]][v81[v83[436 - (279 + 154)]]] = v81[v83[782 - (454 + 324)]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[19 - (12 + 5)]] = v83[3];
														v75 = v75 + 1 + 0;
														v992 = 45 - 27;
													end
													if ((1595 == 1595) and (v992 == 0)) then
														v993 = nil;
														v993 = v83[1 + 1];
														v81[v993] = v81[v993](v13(v81, v993 + (1094 - (277 + 816)), v83[3]));
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[8 - 6]][v81[v83[1186 - (1058 + 125)]]] = v81[v83[1 + 3]];
														v75 = v75 + (976 - (815 + 160));
														v83 = v71[v75];
														v81[v83[8 - 6]] = v83[7 - 4];
														v992 = 1 + 0;
													end
													if (v992 == (58 - 38)) then
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[1900 - (41 + 1857)]] = v81[v83[1896 - (1222 + 671)]];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[2 - 0]] = v83[1185 - (229 + 953)];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[1776 - (1111 + 663)]] = v83[1582 - (874 + 705)];
														v992 = 21;
													end
													if (v992 == 11) then
														v83 = v71[v75];
														v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[7 - 3]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[681 - (642 + 37)]] = v83[1 + 2];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[7 - 4]];
														v75 = v75 + (455 - (233 + 221));
														v992 = 27 - 15;
													end
													if ((v992 == 27) or (4522 <= 2520)) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[1543 - (718 + 823)]] = v83[2 + 1];
														v75 = v75 + 1;
														v83 = v71[v75];
														v993 = v83[807 - (266 + 539)];
														v81[v993] = v81[v993](v13(v81, v993 + (2 - 1), v83[1228 - (636 + 589)]));
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v992 = 57 - 29;
													end
													if (v992 == 21) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v993 = v83[1 + 1];
														v81[v993] = v81[v993](v13(v81, v993 + (1016 - (657 + 358)), v83[7 - 4]));
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[1189 - (1151 + 36)]][v81[v83[3 + 0]]] = v81[v83[2 + 2]];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v992 = 22;
													end
													if (v992 == (1846 - (1552 + 280))) then
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[836 - (64 + 770)]] = v83[3 + 0];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[1 + 1]] = v83[1246 - (157 + 1086)];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v993 = v83[2];
														v992 = 65 - 50;
													end
													if ((1766 >= 534) and (v992 == (28 - 9))) then
														v83 = v71[v75];
														v993 = v83[2];
														v81[v993] = v81[v993](v13(v81, v993 + 1, v83[3 - 0]));
														v75 = v75 + (820 - (599 + 220));
														v83 = v71[v75];
														v81[v83[3 - 1]][v81[v83[3]]] = v81[v83[4]];
														v75 = v75 + (1932 - (1813 + 118));
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[3];
														v992 = 1237 - (841 + 376);
													end
													if (v992 == (17 - 4)) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[5 - 3]][v81[v83[862 - (464 + 395)]]] = v81[v83[10 - 6]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[839 - (467 + 370)]] = v83[5 - 2];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[6 - 4]] = v81[v83[1 + 2]];
														v992 = 14;
													end
													if (23 == v992) then
														v81[v83[4 - 2]] = v83[523 - (150 + 370)];
														v75 = v75 + (1283 - (74 + 1208));
														v83 = v71[v75];
														v993 = v83[4 - 2];
														v81[v993] = v81[v993](v13(v81, v993 + (4 - 3), v83[3 + 0]));
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[392 - (14 + 376)]][v81[v83[4 - 1]]] = v81[v83[3 + 1]];
														v75 = v75 + 1 + 0;
														v992 = 24;
													end
													if (v992 == (21 + 1)) then
														v81[v83[5 - 3]] = v83[3 + 0];
														v75 = v75 + (79 - (23 + 55));
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[6 - 3]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[4 - 1];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v992 = 23;
													end
													if (v992 == 9) then
														v81[v83[903 - (652 + 249)]][v81[v83[7 - 4]]] = v81[v83[4]];
														v75 = v75 + (1869 - (708 + 1160));
														v83 = v71[v75];
														v81[v83[2]] = v83[8 - 5];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[3]];
														v75 = v75 + (28 - (10 + 17));
														v83 = v71[v75];
														v992 = 3 + 7;
													end
													if (v992 == 3) then
														v81[v83[1734 - (1400 + 332)]] = v83[5 - 2];
														v75 = v75 + (1909 - (242 + 1666));
														v83 = v71[v75];
														v81[v83[1 + 1]] = v81[v83[2 + 1]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[942 - (850 + 90)]] = v83[4 - 1];
														v75 = v75 + (1391 - (360 + 1030));
														v83 = v71[v75];
														v992 = 4;
													end
													if ((v992 == (22 + 2)) or (1690 >= 4105)) then
														v83 = v71[v75];
														v81[v83[5 - 3]] = v83[3 - 0];
														v75 = v75 + (1662 - (909 + 752));
														v83 = v71[v75];
														v81[v83[1225 - (109 + 1114)]] = v81[v83[5 - 2]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[1 + 1]] = v83[3];
														v75 = v75 + (243 - (6 + 236));
														v992 = 25;
													end
													if (v992 == 25) then
														v83 = v71[v75];
														v81[v83[2]] = v83[2 + 1];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v993 = v83[4 - 2];
														v81[v993] = v81[v993](v13(v81, v993 + 1, v83[4 - 1]));
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[1135 - (1076 + 57)]][v81[v83[1 + 2]]] = v81[v83[693 - (579 + 110)]];
														v992 = 3 + 23;
													end
													if ((6 + 0) == v992) then
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[410 - (174 + 233)];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v993 = v83[3 - 1];
														v81[v993] = v81[v993](v13(v81, v993 + 1 + 0, v83[3]));
														v75 = v75 + (1175 - (663 + 511));
														v83 = v71[v75];
														v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[12 - 8]];
														v992 = 5 + 2;
													end
													if (v992 == (28 - 16)) then
														v83 = v71[v75];
														v81[v83[4 - 2]] = v83[2 + 1];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[2]] = v83[3 + 0];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v993 = v83[724 - (478 + 244)];
														v81[v993] = v81[v993](v13(v81, v993 + 1, v83[3]));
														v992 = 530 - (440 + 77);
													end
												end
											else
												v81[v83[1 + 1]][v81[v83[10 - 7]]] = v81[v83[1560 - (655 + 901)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[3]][v81[v83[15 - 11]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1447 - (695 + 750)]] = v83[9 - 6];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[7 - 5]][v81[v83[354 - (285 + 66)]]] = v81[v83[8 - 4]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1312 - (682 + 628)]][v81[v83[1 + 2]]] = v81[v83[303 - (176 + 123)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3 + 0];
												v75 = v75 + (270 - (239 + 30));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3]][v81[v83[2 + 2]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = {};
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[3];
											end
										elseif (v84 <= (332 - (306 + 9))) then
											if ((v84 > (55 - 39)) or (4235 < 1816)) then
												local v1011 = 0 + 0;
												while true do
													if (v1011 == 1) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[1 + 1]] = v81[v83[8 - 5]][v81[v83[1379 - (1140 + 235)]]];
														v75 = v75 + 1 + 0;
														v1011 = 2;
													end
													if (v1011 == (0 + 0)) then
														v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[2]] = v83[55 - (33 + 19)];
														v1011 = 1 + 0;
													end
													if (4 == v1011) then
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[1 + 1]][v81[v83[5 - 2]]] = v81[v83[4 + 0]];
														v75 = v75 + 1;
														v1011 = 694 - (586 + 103);
													end
													if (v1011 == (1 + 5)) then
														v81[v83[5 - 3]] = v81[v83[1491 - (1309 + 179)]][v81[v83[6 - 2]]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[1 + 1]] = {};
														break;
													end
													if ((13 - 8) == v1011) then
														v83 = v71[v75];
														v81[v83[2]] = v83[3 + 0];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v1011 = 6;
													end
													if (v1011 == 3) then
														v81[v83[2]] = v81[v83[3]][v81[v83[7 - 3]]];
														v75 = v75 + (610 - (295 + 314));
														v83 = v71[v75];
														v81[v83[4 - 2]][v81[v83[1965 - (1300 + 662)]]] = v81[v83[12 - 8]];
														v1011 = 1759 - (1178 + 577);
													end
													if (v1011 == (2 + 0)) then
														v83 = v71[v75];
														v81[v83[2]] = v83[3];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v1011 = 1408 - (851 + 554);
													end
												end
											else
												local v1012 = 0 + 0;
												local v1013;
												while true do
													if ((v1012 == (46 - 29)) or (4084 < 1754)) then
														v1013 = v83[3 - 1];
														v81[v1013] = v81[v1013](v13(v81, v1013 + (303 - (115 + 187)), v83[3 + 0]));
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[4]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[7 - 5]] = v83[3];
														v75 = v75 + (1162 - (160 + 1001));
														v1012 = 16 + 2;
													end
													if (v1012 == (10 + 4)) then
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[360 - (237 + 121)]] = v83[900 - (525 + 372)];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[6 - 4]] = v83[145 - (96 + 46)];
														v75 = v75 + (778 - (643 + 134));
														v83 = v71[v75];
														v1013 = v83[1 + 1];
														v1012 = 35 - 20;
													end
													if ((v1012 == (81 - 59)) or (254 >= 1394)) then
														v81[v83[2 + 0]] = v83[3];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[3 - 1]] = v81[v83[722 - (316 + 403)]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[5 - 3]] = v83[2 + 1];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v1012 = 23;
													end
													if ((v1012 == (20 + 7)) or (3761 >= 4694)) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2]] = v83[10 - 7];
														v75 = v75 + (4 - 3);
														v83 = v71[v75];
														v1013 = v83[3 - 1];
														v81[v1013] = v81[v1013](v13(v81, v1013 + 1 + 0, v83[3]));
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v1012 = 2 + 26;
													end
													if (v1012 == 7) then
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[19 - (12 + 5)]] = v83[11 - 8];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[3 - 1]] = v81[v83[7 - 4]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2]] = v83[1976 - (1656 + 317)];
														v1012 = 8 + 0;
													end
													if (v1012 == (11 + 2)) then
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[9 - 7]][v81[v83[357 - (5 + 349)]]] = v81[v83[18 - 14]];
														v75 = v75 + (1272 - (266 + 1005));
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[3];
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v81[v83[2 - 0]] = v81[v83[3]];
														v1012 = 14;
													end
													if (v1012 == (1706 - (561 + 1135))) then
														v81[v83[2 - 0]] = v83[9 - 6];
														v75 = v75 + (1067 - (507 + 559));
														v83 = v71[v75];
														v81[v83[2]] = v83[7 - 4];
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v1013 = v83[390 - (212 + 176)];
														v81[v1013] = v81[v1013](v13(v81, v1013 + (906 - (250 + 655)), v83[3]));
														v75 = v75 + 1;
														v1012 = 29 - 18;
													end
													if (v1012 == (41 - 17)) then
														v83 = v71[v75];
														v81[v83[2 - 0]] = v83[1959 - (1869 + 87)];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[10 - 7]];
														v75 = v75 + (1902 - (484 + 1417));
														v83 = v71[v75];
														v81[v83[2]] = v83[3];
														v75 = v75 + (2 - 1);
														v1012 = 41 - 16;
													end
													if ((779 - (48 + 725)) == v1012) then
														v83 = v71[v75];
														v81[v83[2 - 0]] = v83[3];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v1013 = v83[2 + 0];
														v81[v1013] = v81[v1013](v13(v81, v1013 + 1, v83[7 - 4]));
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[1 + 1]][v81[v83[856 - (152 + 701)]]] = v81[v83[1315 - (430 + 881)]];
														v1012 = 3 + 4;
													end
													if ((34 < 720) and (v1012 == (918 - (557 + 338)))) then
														v81[v83[1 + 1]] = v83[8 - 5];
														v75 = v75 + (3 - 2);
														v83 = v71[v75];
														v1013 = v83[4 - 2];
														v81[v1013] = v81[v1013](v13(v81, v1013 + (2 - 1), v83[3]));
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[803 - (499 + 302)]][v81[v83[3]]] = v81[v83[4]];
														v75 = v75 + (867 - (39 + 827));
														v1012 = 24;
													end
													if ((2 - 1) == v1012) then
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[7 - 5]] = v81[v83[3]];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[1 + 1]] = v83[8 - 5];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[1 + 1]] = v83[3];
														v1012 = 2;
													end
													if (v1012 == (39 - 14)) then
														v83 = v71[v75];
														v81[v83[106 - (103 + 1)]] = v83[3];
														v75 = v75 + 1;
														v83 = v71[v75];
														v1013 = v83[2];
														v81[v1013] = v81[v1013](v13(v81, v1013 + (555 - (475 + 79)), v83[6 - 3]));
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[6 - 4]][v81[v83[1 + 2]]] = v81[v83[4]];
														v1012 = 23 + 3;
													end
													if ((1522 - (1395 + 108)) == v1012) then
														v83 = v71[v75];
														v1013 = v83[5 - 3];
														v81[v1013] = v81[v1013](v13(v81, v1013 + (1205 - (7 + 1197)), v83[2 + 1]));
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[321 - (27 + 292)]][v81[v83[3]]] = v81[v83[11 - 7]];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[8 - 6]] = v83[5 - 2];
														v1012 = 38 - 18;
													end
													if ((2277 > 1595) and (v1012 == 16)) then
														v81[v83[141 - (43 + 96)]] = v81[v83[12 - 9]];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[1 + 2];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[2]] = v83[2 + 1];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v1012 = 6 + 11;
													end
													if ((v1012 == 18) or (3252 >= 4779)) then
														v83 = v71[v75];
														v81[v83[1 + 1]] = v81[v83[1754 - (1414 + 337)]];
														v75 = v75 + (1941 - (1642 + 298));
														v83 = v71[v75];
														v81[v83[4 - 2]] = v83[8 - 5];
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[1 + 1]] = v83[3 + 0];
														v75 = v75 + (973 - (357 + 615));
														v1012 = 14 + 5;
													end
													if ((1165 == 1165) and (v1012 == (49 - 29))) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[4 - 2]] = v81[v83[3 + 0]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[3];
														v75 = v75 + (1302 - (384 + 917));
														v83 = v71[v75];
														v81[v83[2]] = v83[3];
														v1012 = 718 - (128 + 569);
													end
													if (v1012 == (1546 - (1407 + 136))) then
														v81[v83[1889 - (687 + 1200)]] = v83[3];
														v75 = v75 + (1711 - (556 + 1154));
														v83 = v71[v75];
														v81[v83[6 - 4]] = v81[v83[98 - (9 + 86)]];
														v75 = v75 + (422 - (275 + 146));
														v83 = v71[v75];
														v81[v83[1 + 1]] = v83[67 - (29 + 35)];
														v75 = v75 + (4 - 3);
														v83 = v71[v75];
														v1012 = 11 - 7;
													end
													if (v1012 == (66 - 51)) then
														v81[v1013] = v81[v1013](v13(v81, v1013 + 1 + 0, v83[1015 - (53 + 959)]));
														v75 = v75 + (409 - (312 + 96));
														v83 = v71[v75];
														v81[v83[3 - 1]][v81[v83[288 - (147 + 138)]]] = v81[v83[903 - (813 + 86)]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[4 - 1];
														v75 = v75 + (493 - (18 + 474));
														v83 = v71[v75];
														v1012 = 6 + 10;
													end
													if ((v1012 == (91 - 63)) or (3492 == 1446)) then
														v81[v83[1088 - (860 + 226)]][v81[v83[306 - (121 + 182)]]] = v81[v83[1 + 3]];
														break;
													end
													if ((v1012 == 11) or (66 >= 2677)) then
														v83 = v71[v75];
														v81[v83[2]][v81[v83[3]]] = v81[v83[1244 - (988 + 252)]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[1 + 1]] = v83[1973 - (49 + 1921)];
														v75 = v75 + (891 - (223 + 667));
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[55 - (51 + 1)]];
														v75 = v75 + (1 - 0);
														v1012 = 12;
													end
													if (v1012 == 4) then
														v81[v83[3 - 1]] = v83[3];
														v75 = v75 + (1126 - (146 + 979));
														v83 = v71[v75];
														v1013 = v83[1 + 1];
														v81[v1013] = v81[v1013](v13(v81, v1013 + 1, v83[608 - (311 + 294)]));
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[2]][v81[v83[3]]] = v81[v83[2 + 2]];
														v75 = v75 + (1444 - (496 + 947));
														v1012 = 1363 - (1233 + 125);
													end
													if (v1012 == (1 + 1)) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v1013 = v83[1 + 1];
														v81[v1013] = v81[v1013](v13(v81, v1013 + (1646 - (963 + 682)), v83[3 + 0]));
														v75 = v75 + (1505 - (504 + 1000));
														v83 = v71[v75];
														v81[v83[2 + 0]][v81[v83[3 + 0]]] = v81[v83[1 + 3]];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v1012 = 3 + 0;
													end
													if (v1012 == (7 + 5)) then
														v83 = v71[v75];
														v81[v83[2]] = v83[185 - (156 + 26)];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2]] = v83[3 - 0];
														v75 = v75 + (165 - (149 + 15));
														v83 = v71[v75];
														v1013 = v83[962 - (890 + 70)];
														v81[v1013] = v81[v1013](v13(v81, v1013 + (118 - (39 + 78)), v83[3]));
														v1012 = 495 - (14 + 468);
													end
													if (v1012 == (17 - 9)) then
														v75 = v75 + (2 - 1);
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[2 + 1];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v1013 = v83[1 + 1];
														v81[v1013] = v81[v1013](v13(v81, v1013 + 1 + 0, v83[5 - 2]));
														v75 = v75 + 1;
														v83 = v71[v75];
														v1012 = 9 + 0;
													end
													if (v1012 == (0 - 0)) then
														v1013 = nil;
														v1013 = v83[1 + 1];
														v81[v1013] = v81[v1013](v13(v81, v1013 + (52 - (12 + 39)), v83[3 + 0]));
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[5 - 3]][v81[v83[10 - 7]]] = v81[v83[2 + 2]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[7 - 4];
														v1012 = 1 + 0;
													end
													if ((3486 >= 1637) and (v1012 == (43 - 34))) then
														v81[v83[1712 - (1596 + 114)]][v81[v83[7 - 4]]] = v81[v83[717 - (164 + 549)]];
														v75 = v75 + (1439 - (1059 + 379));
														v83 = v71[v75];
														v81[v83[2 - 0]] = v83[3];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[3]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v1012 = 10;
													end
													if (v1012 == (397 - (145 + 247))) then
														v83 = v71[v75];
														v81[v83[2 + 0]] = v83[2 + 1];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[5 - 3]] = v81[v83[1 + 2]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[2 - 0]] = v83[723 - (254 + 466)];
														v75 = v75 + (561 - (544 + 16));
														v1012 = 18 - 12;
													end
													if (v1012 == (649 - (294 + 334))) then
														v75 = v75 + 1;
														v83 = v71[v75];
														v1013 = v83[255 - (236 + 17)];
														v81[v1013] = v81[v1013](v13(v81, v1013 + 1 + 0, v83[3 + 0]));
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[7 - 5]][v81[v83[14 - 11]]] = v81[v83[4]];
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v1012 = 22;
													end
													if ((26 == v1012) or (2981 == 317)) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[796 - (413 + 381)]] = v83[1 + 2];
														v75 = v75 + (1 - 0);
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[7 - 4]];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[1972 - (582 + 1388)]] = v83[4 - 1];
														v1012 = 27;
													end
												end
											end
										elseif (v84 > (13 + 5)) then
											v81[v83[366 - (326 + 38)]] = v81[v83[8 - 5]] % v83[5 - 1];
										else
											local v1015;
											local v1016;
											local v1017;
											v81[v83[622 - (47 + 573)]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[8 - 6]] = v83[4 - 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1666 - (1269 + 395)]] = v81[v83[495 - (76 + 416)]][v81[v83[4]]];
											v75 = v75 + (444 - (319 + 124));
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[1010 - (564 + 443)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[460 - (337 + 121)]] = v81[v83[8 - 5]][v81[v83[4]]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1017 = v83[1913 - (1261 + 650)];
											v1016 = v81[v1017];
											v1015 = v83[2 + 1];
											for v3697 = 1, v1015 do
												v1016[v3697] = v81[v1017 + v3697];
											end
										end
									elseif ((v84 <= (34 - 12)) or (1588 >= 3761)) then
										if (v84 <= (1837 - (772 + 1045))) then
											local v179;
											local v180;
											local v181;
											v81[v83[1 + 1]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[146 - (102 + 42)]] = v83[1847 - (1524 + 320)];
											v75 = v75 + (1271 - (1049 + 221));
											v83 = v71[v75];
											v81[v83[158 - (18 + 138)]] = v81[v83[7 - 4]][v81[v83[1106 - (67 + 1035)]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[350 - (136 + 212)]] = v83[12 - 9];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[1607 - (240 + 1364)]][v81[v83[1086 - (1050 + 32)]]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v181 = v83[2 + 0];
											v180 = v81[v181];
											v179 = v83[1058 - (331 + 724)];
											for v716 = 1 + 0, v179 do
												v180[v716] = v81[v181 + v716];
											end
										elseif ((v84 > (665 - (269 + 375))) or (2485 == 743)) then
											local v1032;
											local v1033;
											local v1034;
											v81[v83[727 - (267 + 458)]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[821 - (667 + 151)];
											v75 = v75 + (1498 - (1410 + 87));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1900 - (1504 + 393)]][v81[v83[4]]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[5 - 3]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[799 - (461 + 335)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1763 - (1730 + 31)]] = v81[v83[1670 - (728 + 939)]][v81[v83[4]]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1034 = v83[3 - 1];
											v1033 = v81[v1034];
											v1032 = v83[6 - 3];
											for v3700 = 1, v1032 do
												v1033[v3700] = v81[v1034 + v3700];
											end
										else
											local v1048 = 1068 - (138 + 930);
											local v1049;
											while true do
												if (21 == v1048) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v81[v83[3 + 0]];
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v81[v83[1768 - (459 + 1307)]] = v83[1873 - (474 + 1396)];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 - 0]] = v83[3 + 0];
													v1048 = 1 + 21;
												end
												if (v1048 == 22) then
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v1049 = v83[2];
													v81[v1049] = v81[v1049](v13(v81, v1049 + 1 + 0, v83[9 - 6]));
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v81[v83[2]][v81[v83[594 - (562 + 29)]]] = v81[v83[4]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1048 = 1442 - (374 + 1045);
												end
												if (v1048 == (0 + 0)) then
													v1049 = nil;
													v81[v83[5 - 3]] = v81[v83[641 - (448 + 190)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[7 - 5]] = v83[8 - 5];
													v75 = v75 + (1495 - (1307 + 187));
													v1048 = 3 - 2;
												end
												if (v1048 == (39 - 22)) then
													v81[v83[5 - 3]] = v81[v83[686 - (232 + 451)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[567 - (510 + 54)];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2]] = v83[39 - (13 + 23)];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v1048 = 18;
												end
												if (v1048 == 11) then
													v81[v83[2 - 0]] = v83[4 - 1];
													v75 = v75 + (1089 - (830 + 258));
													v83 = v71[v75];
													v81[v83[2]] = v83[10 - 7];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1049 = v83[2 + 0];
													v81[v1049] = v81[v1049](v13(v81, v1049 + 1, v83[1444 - (860 + 581)]));
													v75 = v75 + (3 - 2);
													v1048 = 10 + 2;
												end
												if (v1048 == 25) then
													v83 = v71[v75];
													v81[v83[243 - (237 + 4)]] = v83[6 - 3];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[3 - 1]] = v81[v83[3 + 0]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[7 - 5]] = v83[2 + 1];
													v75 = v75 + 1 + 0;
													v1048 = 1452 - (85 + 1341);
												end
												if (v1048 == (13 - 5)) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v83[8 - 5];
													v75 = v75 + (373 - (45 + 327));
													v83 = v71[v75];
													v81[v83[3 - 1]] = v81[v83[3]];
													v75 = v75 + (503 - (444 + 58));
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[1 + 2];
													v1048 = 5 + 4;
												end
												if ((v1048 == (57 - 37)) or (1172 > 2707)) then
													v83 = v71[v75];
													v1049 = v83[1734 - (64 + 1668)];
													v81[v1049] = v81[v1049](v13(v81, v1049 + (1974 - (1227 + 746)), v83[9 - 6]));
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[496 - (415 + 79)]][v81[v83[3]]] = v81[v83[1 + 3]];
													v75 = v75 + (492 - (142 + 349));
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[3 - 0];
													v1048 = 21;
												end
												if (v1048 == (1 + 0)) then
													v83 = v71[v75];
													v1049 = v83[2 + 0];
													v81[v1049] = v81[v1049](v13(v81, v1049 + (2 - 1), v83[1867 - (1710 + 154)]));
													v75 = v75 + (319 - (200 + 118));
													v83 = v71[v75];
													v81[v83[2]][v81[v83[3]]] = v81[v83[2 + 2]];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2 - 0]] = v83[3];
													v1048 = 2 + 0;
												end
												if (v1048 == (5 + 0)) then
													v81[v83[2]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1049 = v83[2];
													v81[v1049] = v81[v1049](v13(v81, v1049 + 1 + 0, v83[6 - 3]));
													v75 = v75 + (1251 - (363 + 887));
													v83 = v71[v75];
													v81[v83[2 - 0]][v81[v83[14 - 11]]] = v81[v83[1 + 3]];
													v75 = v75 + (2 - 1);
													v1048 = 5 + 1;
												end
												if ((1321 > 375) and (v1048 == (1688 - (674 + 990)))) then
													v81[v83[2]] = v83[1 + 2];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1049 = v83[2 - 0];
													v81[v1049] = v81[v1049](v13(v81, v1049 + (1056 - (507 + 548)), v83[3]));
													v75 = v75 + (838 - (289 + 548));
													v83 = v71[v75];
													v81[v83[1820 - (821 + 997)]][v81[v83[258 - (195 + 60)]]] = v81[v83[2 + 2]];
													v75 = v75 + (1502 - (251 + 1250));
													v1048 = 73 - 48;
												end
												if (v1048 == (14 + 5)) then
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3]];
													v75 = v75 + (1033 - (809 + 223));
													v83 = v71[v75];
													v81[v83[2 - 0]] = v83[8 - 5];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[6 - 4]] = v83[3 + 0];
													v75 = v75 + 1 + 0;
													v1048 = 637 - (14 + 603);
												end
												if (26 == v1048) then
													v83 = v71[v75];
													v81[v83[131 - (118 + 11)]] = v83[1 + 2];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1049 = v83[2 + 0];
													v81[v1049] = v81[v1049](v13(v81, v1049 + (2 - 1), v83[952 - (551 + 398)]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[14 - 10]];
													v1048 = 62 - 35;
												end
												if (v1048 == (5 + 8)) then
													v83 = v71[v75];
													v81[v83[7 - 5]] = v83[1 + 2];
													v75 = v75 + (90 - (40 + 49));
													v83 = v71[v75];
													v81[v83[7 - 5]] = v83[493 - (99 + 391)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1049 = v83[2];
													v81[v1049] = v81[v1049](v13(v81, v1049 + (4 - 3), v83[7 - 4]));
													v1048 = 14 + 0;
												end
												if (v1048 == 14) then
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[1606 - (1032 + 572)]][v81[v83[420 - (203 + 214)]]] = v81[v83[1821 - (568 + 1249)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v83[6 - 3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3]];
													v1048 = 57 - 42;
												end
												if (v1048 == (1308 - (913 + 393))) then
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2 - 0]] = v81[v83[413 - (269 + 141)]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[1983 - (362 + 1619)]] = v83[3];
													v75 = v75 + (1626 - (950 + 675));
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[1182 - (216 + 963)];
													v1048 = 1290 - (485 + 802);
												end
												if ((2680 >= 1710) and (v1048 == (566 - (432 + 127)))) then
													v83 = v71[v75];
													v81[v83[1075 - (1065 + 8)]] = v83[2 + 1];
													v75 = v75 + (1602 - (635 + 966));
													v83 = v71[v75];
													v1049 = v83[2 + 0];
													v81[v1049] = v81[v1049](v13(v81, v1049 + (43 - (5 + 37)), v83[7 - 4]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 - 0]][v81[v83[3]]] = v81[v83[2 + 2]];
													v1048 = 8;
												end
												if (v1048 == (20 - 10)) then
													v81[v83[7 - 5]][v81[v83[3]]] = v81[v83[7 - 3]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2]] = v83[3 + 0];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[531 - (318 + 211)]] = v81[v83[14 - 11]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1048 = 1598 - (963 + 624);
												end
												if (v1048 == (7 + 9)) then
													v81[v1049] = v81[v1049](v13(v81, v1049 + 1, v83[3]));
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[848 - (518 + 328)]][v81[v83[3]]] = v81[v83[8 - 4]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v83[3];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v1048 = 17;
												end
												if (v1048 == 23) then
													v81[v83[319 - (301 + 16)]] = v83[8 - 5];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[5 - 3]] = v81[v83[7 - 4]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v83[2 + 1];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1048 = 51 - 27;
												end
												if ((v1048 == 18) or (2778 >= 3693)) then
													v1049 = v83[2];
													v81[v1049] = v81[v1049](v13(v81, v1049 + 1, v83[3]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1 + 1]][v81[v83[9 - 6]]] = v81[v83[4]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1021 - (829 + 190)]] = v83[10 - 7];
													v75 = v75 + 1;
													v1048 = 19;
												end
												if (v1048 == (7 - 1)) then
													v83 = v71[v75];
													v81[v83[2 - 0]] = v83[3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[4 - 2]] = v81[v83[1 + 2]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[5 - 3]] = v83[3 + 0];
													v75 = v75 + (614 - (520 + 93));
													v1048 = 283 - (259 + 17);
												end
												if (v1048 == (1 + 3)) then
													v81[v83[1 + 1]] = v83[10 - 7];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[593 - (396 + 195)]] = v83[3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1048 = 14 - 9;
												end
												if (v1048 == (1764 - (440 + 1321))) then
													v75 = v75 + (1830 - (1059 + 770));
													v83 = v71[v75];
													v1049 = v83[9 - 7];
													v81[v1049] = v81[v1049](v13(v81, v1049 + (546 - (424 + 121)), v83[3]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1349 - (641 + 706)]][v81[v83[2 + 1]]] = v81[v83[444 - (249 + 191)]];
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v1048 = 2 + 2;
												end
												if (((104 - 77) == v1048) or (1132 >= 3109)) then
													v75 = v75 + (428 - (183 + 244));
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[733 - (434 + 296)];
													v75 = v75 + 1;
													v83 = v71[v75];
													for v7004 = v83[5 - 3], v83[515 - (169 + 343)] do
														v81[v7004] = nil;
													end
													break;
												end
												if ((14 + 1) == v1048) then
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[5 - 3]] = v83[3 + 0];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[5 - 3]] = v83[1126 - (651 + 472)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1049 = v83[2];
													v1048 = 16;
												end
												if (v1048 == 12) then
													v83 = v71[v75];
													v81[v83[1 + 1]][v81[v83[3 - 0]]] = v81[v83[4]];
													v75 = v75 + (484 - (397 + 86));
													v83 = v71[v75];
													v81[v83[878 - (423 + 453)]] = v83[1 + 2];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3 + 0]];
													v75 = v75 + 1 + 0;
													v1048 = 12 + 1;
												end
												if (v1048 == (1199 - (50 + 1140))) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[1 + 2];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v1049 = v83[2];
													v81[v1049] = v81[v1049](v13(v81, v1049 + 1 + 0, v83[3]));
													v75 = v75 + (597 - (157 + 439));
													v83 = v71[v75];
													v1048 = 17 - 7;
												end
											end
										end
									elseif (v84 <= (79 - 55)) then
										if ((v84 > 23) or (738 < 271)) then
											local v1050;
											local v1051;
											local v1052;
											v81[v83[5 - 3]] = {};
											v75 = v75 + (919 - (782 + 136));
											v83 = v71[v75];
											v81[v83[857 - (112 + 743)]] = v83[1174 - (1026 + 145)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[721 - (493 + 225)]][v81[v83[14 - 10]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = {};
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[8 - 5];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[1598 - (210 + 1385)]][v81[v83[1693 - (1201 + 488)]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1052 = v83[2 - 0];
											v1051 = v81[v1052];
											v1050 = v83[5 - 2];
											for v3703 = 586 - (352 + 233), v1050 do
												v1051[v3703] = v81[v1052 + v3703];
											end
										else
											v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[577 - (489 + 85)]][v81[v83[1505 - (277 + 1224)]]];
											v75 = v75 + (1494 - (663 + 830));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[877 - (461 + 414)]][v81[v83[3]]] = v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[1 + 2]]] = v81[v83[4 + 0]];
											v75 = v75 + (251 - (172 + 78));
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v81[v83[5 - 1]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = {};
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[1 + 2];
										end
									elseif (v84 > (14 + 11)) then
										local v1083 = 0;
										local v1084;
										local v1085;
										local v1086;
										while true do
											if (2 == v1083) then
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[2 + 1]][v81[v83[4]]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v1083 = 6 - 3;
											end
											if (v1083 == (2 + 4)) then
												for v7006 = 1, v1084 do
													v1085[v7006] = v81[v1086 + v7006];
												end
												break;
											end
											if ((335 < 1904) and ((0 + 0) == v1083)) then
												v1084 = nil;
												v1085 = nil;
												v1086 = nil;
												v81[v83[449 - (133 + 314)]] = {};
												v1083 = 1 + 0;
											end
											if (v1083 == (216 - (199 + 14))) then
												v81[v83[7 - 5]] = {};
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1551 - (647 + 902)]] = v83[8 - 5];
												v1083 = 237 - (85 + 148);
											end
											if (v1083 == (1294 - (426 + 863))) then
												v83 = v71[v75];
												v1086 = v83[9 - 7];
												v1085 = v81[v1086];
												v1084 = v83[1657 - (873 + 781)];
												v1083 = 7 - 1;
											end
											if (v1083 == (2 - 1)) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[7 - 5]] = v83[3 - 0];
												v75 = v75 + 1;
												v1083 = 5 - 3;
											end
											if (v1083 == (1951 - (414 + 1533))) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[557 - (443 + 112)]] = v81[v83[3]][v81[v83[1483 - (888 + 591)]]];
												v75 = v75 + (2 - 1);
												v1083 = 1 + 4;
											end
										end
									else
										v81[v83[7 - 5]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v62[v83[1 + 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[5 - 2]][v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1680 - (136 + 1542)]] = v62[v83[3]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3]][v83[5 - 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v62[v83[489 - (68 + 418)]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[3]][v83[4 + 0]];
										v75 = v75 + (1093 - (770 + 322));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v62[v83[1 + 2]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										if (not v81[v83[2]] or (2211 >= 3084)) then
											v75 = v75 + (1 - 0);
										else
											v75 = v83[5 - 2];
										end
									end
								elseif (v84 <= (105 - 66)) then
									if (v84 <= (117 - 85)) then
										if ((4394 == 4394) and (v84 <= (17 + 12))) then
											if (v84 <= (39 - 12)) then
												local v196 = 0 + 0;
												local v197;
												local v198;
												local v199;
												while true do
													if ((1 + 0) == v196) then
														v75 = v75 + 1 + 0;
														v83 = v71[v75];
														v81[v83[7 - 5]] = v81[v83[3 - 0]][v81[v83[2 + 2]]];
														v75 = v75 + (4 - 3);
														v196 = 6 - 4;
													end
													if ((2 + 2) == v196) then
														v75 = v75 + (4 - 3);
														v83 = v71[v75];
														v199 = v83[2];
														v198 = v81[v199];
														v196 = 836 - (762 + 69);
													end
													if (v196 == (16 - 11)) then
														v197 = v83[3 + 0];
														for v4620 = 1, v197 do
															v198[v4620] = v81[v199 + v4620];
														end
														break;
													end
													if (((0 + 0) == v196) or (3667 <= 253)) then
														v197 = nil;
														v198 = nil;
														v199 = nil;
														v81[v83[4 - 2]] = v83[1 + 2];
														v196 = 1 + 0;
													end
													if ((v196 == (7 - 5)) or (4563 < 1626)) then
														v83 = v71[v75];
														v81[v83[159 - (8 + 149)]] = {};
														v75 = v75 + 1;
														v83 = v71[v75];
														v196 = 1323 - (1199 + 121);
													end
													if (v196 == 3) then
														v81[v83[2]] = v83[4 - 1];
														v75 = v75 + 1;
														v83 = v71[v75];
														v81[v83[2]] = v81[v83[6 - 3]][v81[v83[2 + 2]]];
														v196 = 13 - 9;
													end
												end
											elseif ((2211 > 34) and (v84 > (64 - 36))) then
												v81[v83[2 + 0]] = #v81[v83[3]];
											else
												v81[v83[1809 - (518 + 1289)]][v81[v83[4 - 1]]] = v81[v83[1 + 3]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[471 - (304 + 165)]] = v81[v83[3 + 0]][v81[v83[164 - (54 + 106)]]];
												v75 = v75 + (1970 - (1618 + 351));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[1019 - (10 + 1006)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[9 - 6]]] = v81[v83[4]];
												v75 = v75 + (1034 - (912 + 121));
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[1293 - (1140 + 149)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v81[v83[1 + 2]][v81[v83[4]]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[2]] = {};
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
											end
										elseif (v84 <= (104 - 74)) then
											v81[v83[188 - (165 + 21)]][v81[v83[3]]] = v81[v83[115 - (61 + 50)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[9 - 7]] = v83[5 - 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1462 - (1295 + 165)]] = v81[v83[1 + 2]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + (1398 - (819 + 578));
											v83 = v71[v75];
											v81[v83[1404 - (331 + 1071)]][v81[v83[746 - (588 + 155)]]] = v81[v83[4]];
											v75 = v75 + (1283 - (546 + 736));
											v83 = v71[v75];
											v81[v83[1939 - (1834 + 103)]][v81[v83[2 + 1]]] = v81[v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1768 - (1536 + 230)]] = v83[494 - (128 + 363)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v81[v83[9 - 5]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[7 - 4];
										elseif ((4812 >= 4440) and (v84 > 31)) then
											local v1116 = 0 + 0;
											while true do
												if (v1116 == (1015 - (615 + 394))) then
													v81[v83[2]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1116 = 7;
												end
												if (8 == v1116) then
													v81[v83[2 + 0]] = {};
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v1116 = 40 - 31;
												end
												if (v1116 == (653 - (59 + 592))) then
													v81[v83[4 - 2]] = v81[v83[4 - 1]][v81[v83[3 + 1]]];
													v75 = v75 + (172 - (70 + 101));
													v83 = v71[v75];
													v1116 = 7 - 4;
												end
												if (v1116 == (0 + 0)) then
													v81[v83[4 - 2]][v81[v83[244 - (123 + 118)]]] = v81[v83[1 + 3]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1116 = 1;
												end
												if ((1291 > 876) and (v1116 == 7)) then
													v81[v83[1401 - (653 + 746)]] = v81[v83[4 - 1]][v81[v83[5 - 1]]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v1116 = 4 + 4;
												end
												if ((v1116 == (1 + 0)) or (475 == 396)) then
													v81[v83[2 + 0]] = v83[1 + 2];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1116 = 1 + 1;
												end
												if (v1116 == (21 - 12)) then
													v81[v83[2 + 0]] = v83[4 - 1];
													break;
												end
												if ((4210 == 4210) and (v1116 == 5)) then
													v81[v83[1236 - (885 + 349)]][v81[v83[3 + 0]]] = v81[v83[10 - 6]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v1116 = 974 - (915 + 53);
												end
												if (3 == v1116) then
													v81[v83[2]] = v83[804 - (768 + 33)];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v1116 = 6 - 2;
												end
												if ((332 - (287 + 41)) == v1116) then
													v81[v83[849 - (638 + 209)]][v81[v83[2 + 1]]] = v81[v83[1690 - (96 + 1590)]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1116 = 1677 - (741 + 931);
												end
											end
										else
											v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[11 - 7]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[13 - 10];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1 + 2]][v81[v83[4]]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[2 + 1];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[498 - (64 + 430)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[366 - (106 + 257)]]] = v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + (722 - (496 + 225));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[14 - 11]][v81[v83[1662 - (256 + 1402)]]];
											v75 = v75 + (1900 - (30 + 1869));
											v83 = v71[v75];
											v81[v83[1371 - (213 + 1156)]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[190 - (96 + 92)]] = v83[1 + 2];
										end
									elseif (v84 <= (934 - (142 + 757))) then
										if (v84 <= 33) then
											do
												return v81[v83[2 + 0]];
											end
										elseif (v84 > 34) then
											local v1136;
											local v1137;
											local v1138;
											v81[v83[2]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[81 - (32 + 47)]] = v83[1980 - (1053 + 924)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[1651 - (685 + 963)]][v81[v83[7 - 3]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1711 - (541 + 1168)]] = {};
											v75 = v75 + (1598 - (645 + 952));
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (839 - (669 + 169));
											v83 = v71[v75];
											v81[v83[6 - 4]] = v81[v83[6 - 3]][v81[v83[2 + 2]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1138 = v83[767 - (181 + 584)];
											v1137 = v81[v1138];
											v1136 = v83[3];
											for v3721 = 1396 - (665 + 730), v1136 do
												v1137[v3721] = v81[v1138 + v3721];
											end
										else
											local v1151;
											local v1152;
											local v1153;
											v81[v83[5 - 3]] = {};
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1352 - (540 + 810)]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v81[v83[3]][v81[v83[10 - 6]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[205 - (166 + 37)]] = {};
											v75 = v75 + (1882 - (22 + 1859));
											v83 = v71[v75];
											v81[v83[2]] = v83[1775 - (843 + 929)];
											v75 = v75 + (263 - (30 + 232));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[780 - (55 + 722)]][v81[v83[8 - 4]]];
											v75 = v75 + (1676 - (78 + 1597));
											v83 = v71[v75];
											v1153 = v83[2];
											v1152 = v81[v1153];
											v1151 = v83[1 + 2];
											for v3724 = 1 + 0, v1151 do
												v1152[v3724] = v81[v1153 + v3724];
											end
										end
									elseif (v84 <= (31 + 6)) then
										if ((2918 < 3377) and (v84 == 36)) then
											v81[v83[551 - (305 + 244)]] = v62[v83[3 + 0]];
										else
											local v1169 = 105 - (95 + 10);
											local v1170;
											local v1171;
											local v1172;
											while true do
												if ((1 <= 283) and (v1169 == (0 + 0))) then
													v1170 = v83[2];
													v1171 = v81[v1170 + (6 - 4)];
													v1169 = 1;
												end
												if ((v1169 == (1 - 0)) or (3606 < 1671)) then
													v1172 = v81[v1170] + v1171;
													v81[v1170] = v1172;
													v1169 = 764 - (592 + 170);
												end
												if (v1169 == (6 - 4)) then
													if ((3768 == 3768) and (v1171 > (0 - 0))) then
														if (v1172 <= v81[v1170 + 1]) then
															v75 = v83[2 + 1];
															v81[v1170 + 2 + 1] = v1172;
														end
													elseif ((v1172 >= v81[v1170 + (2 - 1)]) or (2670 < 538)) then
														v75 = v83[1 + 2];
														v81[v1170 + (5 - 2)] = v1172;
													end
													break;
												end
											end
										end
									elseif (v84 > (545 - (353 + 154))) then
										local v1173;
										local v1174;
										local v1175;
										v81[v83[2 - 0]] = {};
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3 - 0]][v81[v83[7 - 3]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[88 - (7 + 79)]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[183 - (24 + 157)]] = v81[v83[3]][v81[v83[7 - 3]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v1175 = v83[1 + 1];
										v1174 = v81[v1175];
										v1173 = v83[7 - 4];
										for v3727 = 1, v1173 do
											v1174[v3727] = v81[v1175 + v3727];
										end
									else
										local v1189 = v83[2];
										local v1190 = v81[v1189];
										for v3730 = v1189 + (381 - (262 + 118)), v83[3] do
											v7(v1190, v81[v3730]);
										end
									end
								elseif (v84 <= (1129 - (1038 + 45))) then
									if ((1800 < 2822) and (v84 <= (90 - 48))) then
										if (v84 <= (270 - (19 + 211))) then
											v81[v83[115 - (88 + 25)]][v81[v83[3]]] = v81[v83[9 - 5]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1039 - (1007 + 29)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[3]][v81[v83[18 - 14]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[814 - (340 + 471)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[3]]] = v81[v83[593 - (276 + 313)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[2 + 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1974 - (495 + 1477)]] = v83[8 - 5];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[405 - (342 + 61)]] = v81[v83[2 + 1]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + (166 - (4 + 161));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[9 - 6];
										elseif (v84 == (107 - 66)) then
											local v1191 = 497 - (322 + 175);
											while true do
												if (v1191 == (564 - (173 + 390))) then
													v81[v83[1 + 1]] = v83[317 - (203 + 111)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1191 = 2;
												end
												if ((2298 == 2298) and ((2 + 0) == v1191)) then
													v81[v83[5 - 3]] = v81[v83[3]][v81[v83[4 + 0]]];
													v75 = v75 + (707 - (57 + 649));
													v83 = v71[v75];
													v1191 = 387 - (328 + 56);
												end
												if (v1191 == (2 + 2)) then
													v81[v83[514 - (433 + 79)]][v81[v83[1 + 2]]] = v81[v83[4 + 0]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1191 = 16 - 11;
												end
												if (v1191 == (28 - 22)) then
													v81[v83[2]] = v83[3 + 0];
													v75 = v75 + 1;
													v83 = v71[v75];
													v1191 = 7 + 0;
												end
												if (8 == v1191) then
													v81[v83[1038 - (562 + 474)]] = {};
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v1191 = 17 - 8;
												end
												if (v1191 == (912 - (76 + 829))) then
													v81[v83[1675 - (1506 + 167)]] = v81[v83[5 - 2]][v81[v83[270 - (58 + 208)]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1191 = 8;
												end
												if (v1191 == (0 + 0)) then
													v81[v83[2 + 0]][v81[v83[12 - 9]]] = v81[v83[4]];
													v75 = v75 + (338 - (258 + 79));
													v83 = v71[v75];
													v1191 = 1 + 0;
												end
												if ((220 < 1058) and (v1191 == (18 - 9))) then
													v81[v83[1472 - (1219 + 251)]] = v83[3];
													break;
												end
												if ((1674 - (1231 + 440)) == v1191) then
													v81[v83[60 - (34 + 24)]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1191 = 7 - 3;
												end
												if (v1191 == (3 + 2)) then
													v81[v83[5 - 3]][v81[v83[9 - 6]]] = v81[v83[10 - 6]];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v1191 = 6;
												end
											end
										else
											local v1192 = 0;
											local v1193;
											local v1194;
											local v1195;
											while true do
												if ((1868 == 1868) and (v1192 == 0)) then
													v1193 = nil;
													v1194 = nil;
													v1195 = nil;
													v1192 = 2 - 1;
												end
												if (8 == v1192) then
													for v7009 = 1590 - (877 + 712), v1193 do
														v1194[v7009] = v81[v1195 + v7009];
													end
													break;
												end
												if (v1192 == (5 + 2)) then
													v1195 = v83[756 - (242 + 512)];
													v1194 = v81[v1195];
													v1193 = v83[3];
													v1192 = 8;
												end
												if (v1192 == (1 - 0)) then
													v81[v83[629 - (92 + 535)]] = {};
													v75 = v75 + 1;
													v83 = v71[v75];
													v1192 = 2 + 0;
												end
												if ((12 - 6) == v1192) then
													v81[v83[1 + 1]] = v81[v83[3]][v81[v83[14 - 10]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v1192 = 5 + 2;
												end
												if (v1192 == 3) then
													v81[v83[1 + 1]] = v81[v83[5 - 2]][v81[v83[5 - 1]]];
													v75 = v75 + (1786 - (1476 + 309));
													v83 = v71[v75];
													v1192 = 1288 - (299 + 985);
												end
												if (v1192 == 2) then
													v81[v83[1 + 1]] = v83[3];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v1192 = 96 - (86 + 7);
												end
												if (5 == v1192) then
													v81[v83[2]] = v83[3];
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v1192 = 1 + 5;
												end
												if (v1192 == (884 - (672 + 208))) then
													v81[v83[1 + 1]] = {};
													v75 = v75 + (133 - (14 + 118));
													v83 = v71[v75];
													v1192 = 450 - (339 + 106);
												end
											end
										end
									elseif (v84 <= (36 + 8)) then
										if (v84 == (22 + 21)) then
											local v1196;
											local v1197;
											local v1198;
											v81[v83[2]] = {};
											v75 = v75 + (1396 - (440 + 955));
											v83 = v71[v75];
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1 + 2]][v81[v83[9 - 5]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + (354 - (260 + 93));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[6 - 3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1976 - (1181 + 793)]] = v81[v83[3]][v81[v83[2 + 2]]];
											v75 = v75 + (308 - (105 + 202));
											v83 = v71[v75];
											v1198 = v83[2];
											v1197 = v81[v1198];
											v1196 = v83[3];
											for v3731 = 1, v1196 do
												v1197[v3731] = v81[v1198 + v3731];
											end
										else
											local v1210;
											v81[v83[2 + 0]] = v81[v83[813 - (352 + 458)]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[952 - (438 + 511)];
											v75 = v75 + (1384 - (1262 + 121));
											v83 = v71[v75];
											v1210 = v83[1070 - (728 + 340)];
											v81[v1210] = v81[v1210](v13(v81, v1210 + (1791 - (816 + 974)), v83[9 - 6]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[7 - 5]][v81[v83[342 - (163 + 176)]]] = v81[v83[10 - 6]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[1813 - (1564 + 246)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[347 - (124 + 221)]] = v81[v83[3 + 0]];
											v75 = v75 + (452 - (115 + 336));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1 + 2];
											v75 = v75 + (47 - (45 + 1));
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1210 = v83[1992 - (1282 + 708)];
											v81[v1210] = v81[v1210](v13(v81, v1210 + (1213 - (583 + 629)), v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]][v81[v83[3]]] = v81[v83[3 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[1173 - (943 + 227)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1633 - (1539 + 92)]] = v81[v83[1949 - (706 + 1240)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[260 - (81 + 177)]] = v83[8 - 5];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[259 - (212 + 45)]] = v83[9 - 6];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1210 = v83[1948 - (708 + 1238)];
											v81[v1210] = v81[v1210](v13(v81, v1210 + 1 + 0, v83[1 + 2]));
											v75 = v75 + (1668 - (586 + 1081));
											v83 = v71[v75];
											v81[v83[513 - (348 + 163)]][v81[v83[3 + 0]]] = v81[v83[284 - (215 + 65)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[1862 - (1541 + 318)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3 + 0]];
											v75 = v75 + (1751 - (1036 + 714));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1283 - (883 + 397)];
											v75 = v75 + (591 - (563 + 27));
											v83 = v71[v75];
											v1210 = v83[2];
											v81[v1210] = v81[v1210](v13(v81, v1210 + (3 - 2), v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1988 - (1369 + 617)]][v81[v83[1490 - (85 + 1402)]]] = v81[v83[2 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[406 - (274 + 129)];
											v75 = v75 + (218 - (12 + 205));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[387 - (27 + 357)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[483 - (91 + 389)];
											v75 = v75 + (298 - (90 + 207));
											v83 = v71[v75];
											v1210 = v83[1 + 1];
											v81[v1210] = v81[v1210](v13(v81, v1210 + (862 - (706 + 155)), v83[3]));
											v75 = v75 + (1796 - (730 + 1065));
											v83 = v71[v75];
											v81[v83[1565 - (1339 + 224)]][v81[v83[2 + 1]]] = v81[v83[4 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[846 - (268 + 575)];
											v75 = v75 + (1295 - (919 + 375));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[973 - (180 + 791)]] = v83[1808 - (323 + 1482)];
											v75 = v75 + (1919 - (1177 + 741));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[11 - 8];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1210 = v83[3 - 1];
											v81[v1210] = v81[v1210](v13(v81, v1210 + 1 + 0, v83[3]));
											v75 = v75 + (110 - (96 + 13));
											v83 = v71[v75];
											v81[v83[1923 - (962 + 959)]][v81[v83[7 - 4]]] = v81[v83[1 + 3]];
											v75 = v75 + (1352 - (461 + 890));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[11 - 8];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[246 - (19 + 224)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[200 - (37 + 161)]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[64 - (60 + 1)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1210 = v83[925 - (826 + 97)];
											v81[v1210] = v81[v1210](v13(v81, v1210 + 1, v83[3 + 0]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[6 - 4]][v81[v83[5 - 2]]] = v81[v83[689 - (375 + 310)]];
											v75 = v75 + (2000 - (1864 + 135));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[1134 - (314 + 817)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[216 - (32 + 182)]] = v83[3 + 0];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[67 - (39 + 26)]] = v83[147 - (54 + 90)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1210 = v83[200 - (45 + 153)];
											v81[v1210] = v81[v1210](v13(v81, v1210 + 1 + 0, v83[555 - (457 + 95)]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]][v81[v83[6 - 3]]] = v81[v83[9 - 5]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[10 - 7];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[750 - (485 + 263)]] = v81[v83[3]];
											v75 = v75 + (708 - (575 + 132));
											v83 = v71[v75];
											v81[v83[2]] = v83[864 - (750 + 111)];
											v75 = v75 + (1011 - (445 + 565));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1 + 2];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1210 = v83[1 + 1];
											v81[v1210] = v81[v1210](v13(v81, v1210 + (311 - (189 + 121)), v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1349 - (634 + 713)]][v81[v83[3]]] = v81[v83[542 - (493 + 45)]];
											v75 = v75 + (969 - (493 + 475));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[787 - (158 + 626)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[4 - 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1093 - (1035 + 56)]] = v83[962 - (114 + 845)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1210 = v83[2];
											v81[v1210] = v81[v1210](v13(v81, v1210 + (2 - 1), v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]][v81[v83[1052 - (179 + 870)]]] = v81[v83[4 - 0]];
											v75 = v75 + (879 - (827 + 51));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[2 + 1];
											v75 = v75 + (474 - (95 + 378));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[4 - 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1013 - (334 + 677)]] = v83[11 - 8];
											v75 = v75 + (1057 - (1049 + 7));
											v83 = v71[v75];
											v81[v83[8 - 6]] = v83[3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1210 = v83[1 + 1];
											v81[v1210] = v81[v1210](v13(v81, v1210 + (2 - 1), v83[5 - 2]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1422 - (1004 + 416)]][v81[v83[3]]] = v81[v83[1961 - (1621 + 336)]];
											v75 = v75 + (1940 - (337 + 1602));
											v83 = v71[v75];
											v81[v83[1519 - (1014 + 503)]] = v83[1018 - (446 + 569)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[8 - 5]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1 + 2];
											v75 = v75 + (506 - (223 + 282));
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1210 = v83[2];
											v81[v1210] = v81[v1210](v13(v81, v1210 + (1 - 0), v83[4 - 1]));
											v75 = v75 + (671 - (623 + 47));
											v83 = v71[v75];
											v81[v83[47 - (32 + 13)]][v81[v83[2 + 1]]] = v81[v83[4 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1803 - (1070 + 731)]] = v83[3 + 0];
											v75 = v75 + (1405 - (1257 + 147));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[5 - 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[136 - (98 + 35)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1210 = v83[2];
											v81[v1210] = v81[v1210](v13(v81, v1210 + (3 - 2), v83[3 + 0]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[561 - (395 + 162)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1944 - (816 + 1125)];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1151 - (701 + 447)]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[1344 - (391 + 950)];
										end
									elseif (v84 > (121 - 76)) then
										local v1305 = 0 - 0;
										local v1306;
										local v1307;
										local v1308;
										while true do
											if ((v1305 == (14 - 8)) or (759 >= 4671)) then
												for v7012 = 1 + 0, v1306 do
													v1307[v7012] = v81[v1308 + v7012];
												end
												break;
											end
											if (v1305 == (0 + 0)) then
												v1306 = nil;
												v1307 = nil;
												v1308 = nil;
												v81[v83[7 - 5]] = {};
												v1305 = 1523 - (251 + 1271);
											end
											if (v1305 == 4) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3 + 0]][v81[v83[10 - 6]]];
												v75 = v75 + (2 - 1);
												v1305 = 8 - 3;
											end
											if ((v1305 == (1261 - (1147 + 112))) or (2621 <= 2066)) then
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[5 - 2]][v81[v83[2 + 2]]];
												v75 = v75 + (698 - (335 + 362));
												v83 = v71[v75];
												v1305 = 3;
											end
											if ((v1305 == (5 + 0)) or (3184 < 2843)) then
												v83 = v71[v75];
												v1308 = v83[2 - 0];
												v1307 = v81[v1308];
												v1306 = v83[7 - 4];
												v1305 = 22 - 16;
											end
											if (3 == v1305) then
												v81[v83[9 - 7]] = {};
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[569 - (237 + 329)];
												v1305 = 14 - 10;
											end
											if (v1305 == (1 + 0)) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1126 - (408 + 716)]] = v83[3];
												v75 = v75 + (3 - 2);
												v1305 = 823 - (344 + 477);
											end
										end
									else
										v81[v83[1 + 1]] = v81[v83[1764 - (1188 + 573)]][v81[v83[4]]];
									end
								elseif (v84 <= 49) then
									if (v84 <= (123 - 76)) then
										local v237 = v72[v83[3 + 0]];
										local v238;
										local v239 = {};
										v238 = v10({}, {__index=function(v719, v720)
											local v721 = v239[v720];
											return v721[3 - 2][v721[2 - 0]];
										end,__newindex=function(v722, v723, v724)
											local v725 = v239[v723];
											v725[2 - 1][v725[1531 - (508 + 1021)]] = v724;
										end});
										for v727 = 1, v83[4 + 0] do
											v75 = v75 + (1167 - (228 + 938));
											local v728 = v71[v75];
											if ((v728[1] == (759 - (332 + 353))) or (2241 >= 2907)) then
												v239[v727 - (1 - 0)] = {v81,v728[3]};
											else
												v239[v727 - (1 + 0)] = {v61,v728[11 - 8]};
											end
											v80[#v80 + (424 - (18 + 405))] = v239;
										end
										v81[v83[2]] = v29(v237, v238, v62);
									elseif ((v84 == (22 + 26)) or (4304 < 3469)) then
										v75 = v83[3];
									else
										do
											return;
										end
									end
								elseif (v84 <= (26 + 25)) then
									if ((v84 == (76 - 26)) or (2713 > 4455)) then
										local v1312 = 978 - (194 + 784);
										local v1313;
										local v1314;
										local v1315;
										while true do
											if ((v1312 == (1771 - (694 + 1076))) or (2315 > 4254)) then
												v81[v83[1906 - (122 + 1782)]] = {};
												v75 = v75 + 1;
												v83 = v71[v75];
												v1312 = 2 + 0;
											end
											if (v1312 == 8) then
												for v7015 = 1 + 0, v1313 do
													v1314[v7015] = v81[v1315 + v7015];
												end
												break;
											end
											if (v1312 == 0) then
												v1313 = nil;
												v1314 = nil;
												v1315 = nil;
												v1312 = 1 + 0;
											end
											if ((v1312 == 7) or (2431 > 3602)) then
												v1315 = v83[2 + 0];
												v1314 = v81[v1315];
												v1313 = v83[8 - 5];
												v1312 = 8;
											end
											if ((1394 == 1394) and (v1312 == (6 + 0))) then
												v81[v83[2]] = v81[v83[3]][v81[v83[1974 - (214 + 1756)]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1312 = 33 - 26;
											end
											if (v1312 == (1 + 2)) then
												v81[v83[2]] = v81[v83[3]][v81[v83[4]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1312 = 589 - (217 + 368);
											end
											if (v1312 == (5 - 3)) then
												v81[v83[2 + 0]] = v83[3 + 0];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1312 = 3;
											end
											if ((894 - (844 + 45)) == v1312) then
												v81[v83[286 - (242 + 42)]] = v83[5 - 2];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v1312 = 1206 - (132 + 1068);
											end
											if ((v1312 == (5 - 1)) or (4827 < 2256)) then
												v81[v83[1625 - (214 + 1409)]] = {};
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1312 = 1639 - (497 + 1137);
											end
										end
									else
										v81[v83[2]][v81[v83[943 - (9 + 931)]]] = v81[v83[4]];
										v75 = v75 + (290 - (181 + 108));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[1 + 2]][v81[v83[3 + 1]]];
										v75 = v75 + (477 - (296 + 180));
										v83 = v71[v75];
										v81[v83[2]] = v83[1406 - (1183 + 220)];
										v75 = v75 + (1266 - (1037 + 228));
										v83 = v71[v75];
										v81[v83[2 - 0]][v81[v83[8 - 5]]] = v81[v83[13 - 9]];
										v75 = v75 + (735 - (527 + 207));
										v83 = v71[v75];
										v81[v83[529 - (187 + 340)]][v81[v83[1873 - (1298 + 572)]]] = v81[v83[9 - 5]];
										v75 = v75 + (171 - (144 + 26));
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[6 - 3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[6 - 3]][v81[v83[19 - 15]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 - 0]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
									end
								elseif (v84 == (254 - (5 + 197))) then
									local v1334;
									local v1335;
									local v1336;
									v81[v83[688 - (339 + 347)]] = {};
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[6 - 4]] = v83[379 - (365 + 11)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[6 - 3]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[926 - (837 + 87)]] = {};
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1672 - (837 + 833)]] = v83[1 + 2];
									v75 = v75 + (1388 - (356 + 1031));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]][v81[v83[1650 - (73 + 1573)]]];
									v75 = v75 + (1389 - (1307 + 81));
									v83 = v71[v75];
									v1336 = v83[236 - (7 + 227)];
									v1335 = v81[v1336];
									v1334 = v83[4 - 1];
									for v3736 = 167 - (90 + 76), v1334 do
										v1335[v3736] = v81[v1336 + v3736];
									end
								else
									local v1351 = 0 - 0;
									local v1352;
									local v1353;
									local v1354;
									while true do
										if (v1351 == (2 + 1)) then
											v81[v83[2 + 0]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1351 = 15 - 11;
										end
										if ((v1351 == 2) or (3466 >= 3471)) then
											v81[v83[262 - (197 + 63)]] = v81[v83[3]][v81[v83[1 + 3]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1351 = 3;
										end
										if (v1351 == (4 + 3)) then
											for v7018 = 1 + 0, v1352 do
												v1353[v7018] = v81[v1354 + v7018];
											end
											break;
										end
										if ((v1351 == (7 - 1)) or (1688 <= 1418)) then
											v1354 = v83[1371 - (618 + 751)];
											v1353 = v81[v1354];
											v1352 = v83[3 + 0];
											v1351 = 1917 - (206 + 1704);
										end
										if (v1351 == (8 - 3)) then
											v81[v83[2]] = v81[v83[3]][v81[v83[7 - 3]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1351 = 1281 - (155 + 1120);
										end
										if (v1351 == (1506 - (396 + 1110))) then
											v1352 = nil;
											v1353 = nil;
											v1354 = nil;
											v1351 = 2 - 1;
										end
										if (v1351 == (1 + 0)) then
											v81[v83[2 + 0]] = v83[3 + 0];
											v75 = v75 + (977 - (230 + 746));
											v83 = v71[v75];
											v1351 = 2;
										end
										if ((v1351 == (605 - (473 + 128))) or (4350 <= 2953)) then
											v81[v83[2]] = v83[51 - (39 + 9)];
											v75 = v75 + (267 - (38 + 228));
											v83 = v71[v75];
											v1351 = 9 - 4;
										end
									end
								end
							elseif (v84 <= (553 - (106 + 367))) then
								if (v84 <= (6 + 60)) then
									if (v84 <= (1921 - (354 + 1508))) then
										if (v84 <= 56) then
											if ((v84 <= 54) or (4362 >= 4894)) then
												v81[v83[6 - 4]][v81[v83[3 + 0]]] = v81[v83[3 + 1]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[1246 - (334 + 910)]] = v83[898 - (92 + 803)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1183 - (1035 + 146)]] = v81[v83[619 - (230 + 386)]][v81[v83[3 + 1]]];
												v75 = v75 + (1511 - (353 + 1157));
												v83 = v71[v75];
												v81[v83[1116 - (53 + 1061)]] = v83[1638 - (1568 + 67)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]][v81[v83[3]]] = v81[v83[1 + 3]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]][v81[v83[7 - 4]]] = v81[v83[11 - 7]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + (1213 - (615 + 597));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[3 - 0]][v81[v83[4 + 0]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = {};
												v75 = v75 + (1900 - (1056 + 843));
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[4 - 1];
											elseif ((4266 >= 1425) and (v84 == (157 - 102))) then
												v81[v83[2 + 0]][v81[v83[1979 - (286 + 1690)]]] = v81[v83[915 - (98 + 813)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[2 + 1];
												v75 = v75 + (508 - (263 + 244));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3 + 0]][v81[v83[1691 - (1502 + 185)]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v81[v83[5 - 3]][v81[v83[1530 - (629 + 898)]]] = v81[v83[10 - 6]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[367 - (12 + 353)]][v81[v83[1914 - (1680 + 231)]]] = v81[v83[4]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[2 + 1];
												v75 = v75 + (1150 - (212 + 937));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[3]][v81[v83[1066 - (111 + 951)]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[29 - (18 + 9)]] = {};
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[536 - (31 + 503)]] = v83[1635 - (595 + 1037)];
											else
												v81[v83[1446 - (189 + 1255)]][v81[v83[3]]] = v81[v83[2 + 2]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[1281 - (1170 + 109)]] = v83[1820 - (348 + 1469)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1291 - (1115 + 174)]] = v81[v83[7 - 4]][v81[v83[1018 - (85 + 929)]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[1870 - (1151 + 716)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[1708 - (95 + 1609)]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[760 - (364 + 394)]][v81[v83[3 + 0]]] = v81[v83[2 + 2]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3]][v81[v83[3 + 1]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = {};
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[959 - (719 + 237)];
											end
										elseif ((648 <= 2263) and (v84 <= (159 - 102))) then
											local v259 = 0 + 0;
											local v260;
											while true do
												if ((39 - 23) == v259) then
													v81[v83[5 - 3]] = v83[7 - 4];
													v75 = v75 + (1992 - (761 + 1230));
													v83 = v71[v75];
													v81[v83[195 - (80 + 113)]] = v83[2 + 1];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v260 = v83[2];
													v81[v260] = v81[v260](v13(v81, v260 + 1 + 0, v83[11 - 8]));
													v259 = 4 + 13;
												end
												if (v259 == 28) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[3];
													v75 = v75 + (1244 - (965 + 278));
													v83 = v71[v75];
													v260 = v83[2];
													v81[v260] = v81[v260](v13(v81, v260 + (1730 - (1391 + 338)), v83[3]));
													v75 = v75 + (2 - 1);
													v259 = 29 + 0;
												end
												if (v259 == (1 - 0)) then
													v81[v83[1 + 1]] = v83[1411 - (496 + 912)];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v81[v83[1 + 1]] = v81[v83[5 - 2]];
													v75 = v75 + (1331 - (1190 + 140));
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[721 - (317 + 401)];
													v75 = v75 + (950 - (303 + 646));
													v259 = 6 - 4;
												end
												if (v259 == (1739 - (1675 + 57))) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v260 = v83[4 - 2];
													v81[v260] = v81[v260](v13(v81, v260 + 1 + 0, v83[3]));
													v75 = v75 + (978 - (338 + 639));
													v83 = v71[v75];
													v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
													v75 = v75 + (380 - (320 + 59));
													v259 = 8;
												end
												if ((2280 < 3987) and (13 == v259)) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[735 - (628 + 104)]];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[1893 - (439 + 1452)]] = v83[1950 - (105 + 1842)];
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v259 = 33 - 19;
												end
												if (v259 == (28 - 22)) then
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[1 + 2]];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1166 - (274 + 890)]] = v83[3];
													v259 = 7 + 0;
												end
												if (v259 == (2 + 0)) then
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[2 + 1];
													v75 = v75 + 1;
													v83 = v71[v75];
													v260 = v83[2 + 0];
													v81[v260] = v81[v260](v13(v81, v260 + 1, v83[3 - 0]));
													v75 = v75 + (820 - (731 + 88));
													v83 = v71[v75];
													v259 = 3 + 0;
												end
												if (v259 == 24) then
													v81[v260] = v81[v260](v13(v81, v260 + 1 + 0, v83[1 + 2]));
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[5 - 3]][v81[v83[3]]] = v81[v83[11 - 7]];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2]] = v83[3 + 0];
													v75 = v75 + 1 + 0;
													v259 = 25;
												end
												if (v259 == (4 + 13)) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[160 - (139 + 19)]][v81[v83[1 + 2]]] = v81[v83[1997 - (1687 + 306)]];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v81[v83[1156 - (1018 + 136)]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v259 = 78 - 60;
												end
												if (v259 == 25) then
													v83 = v71[v75];
													v81[v83[817 - (117 + 698)]] = v81[v83[484 - (305 + 176)]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[3 + 0];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[5 - 2];
													v259 = 58 - 32;
												end
												if (v259 == (32 - 13)) then
													v83 = v71[v75];
													v260 = v83[262 - (159 + 101)];
													v81[v260] = v81[v260](v13(v81, v260 + 1, v83[14 - 11]));
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v81[v83[1 + 1]][v81[v83[9 - 6]]] = v81[v83[4]];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v259 = 3 + 17;
												end
												if (v259 == (293 - (112 + 154))) then
													v83 = v71[v75];
													v81[v83[4 - 2]] = v83[3];
													v75 = v75 + (32 - (21 + 10));
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[1722 - (531 + 1188)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[665 - (96 + 567)]] = v83[3 - 0];
													v259 = 12 + 16;
												end
												if ((10 - 7) == v259) then
													v81[v83[1697 - (867 + 828)]][v81[v83[6 - 3]]] = v81[v83[4]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[7 - 5]] = v83[6 - 3];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[1 + 1]] = v81[v83[4 - 1]];
													v75 = v75 + 1;
													v259 = 775 - (134 + 637);
												end
												if ((v259 == 12) or (365 > 1874)) then
													v260 = v83[1 + 1];
													v81[v260] = v81[v260](v13(v81, v260 + (1158 - (775 + 382)), v83[3 - 0]));
													v75 = v75 + (608 - (45 + 562));
													v83 = v71[v75];
													v81[v83[864 - (545 + 317)]][v81[v83[3 - 0]]] = v81[v83[1030 - (763 + 263)]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[3];
													v259 = 1763 - (512 + 1238);
												end
												if (v259 == 21) then
													v83 = v71[v75];
													v81[v83[1596 - (272 + 1322)]] = v83[5 - 2];
													v75 = v75 + (1247 - (533 + 713));
													v83 = v71[v75];
													v260 = v83[30 - (14 + 14)];
													v81[v260] = v81[v260](v13(v81, v260 + (826 - (499 + 326)), v83[3]));
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v259 = 446 - (104 + 320);
												end
												if (v259 == (2011 - (1929 + 68))) then
													v81[v83[1325 - (1206 + 117)]] = v83[3 + 0];
													v75 = v75 + (1593 - (683 + 909));
													v83 = v71[v75];
													v260 = v83[5 - 3];
													v81[v260] = v81[v260](v13(v81, v260 + (1 - 0), v83[780 - (772 + 5)]));
													v75 = v75 + (1428 - (19 + 1408));
													v83 = v71[v75];
													v81[v83[290 - (134 + 154)]][v81[v83[4 - 1]]] = v81[v83[12 - 8]];
													v259 = 6 + 9;
												end
												if ((v259 == 29) or (4549 < 1567)) then
													v83 = v71[v75];
													v81[v83[2 + 0]][v81[v83[205 - (10 + 192)]]] = v81[v83[51 - (13 + 34)]];
													v75 = v75 + (1290 - (342 + 947));
													v83 = v71[v75];
													v81[v83[2]] = v83[3];
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v81[v83[1710 - (119 + 1589)]] = v81[v83[6 - 3]];
													v259 = 41 - 11;
												end
												if (v259 == 5) then
													v81[v260] = v81[v260](v13(v81, v260 + (553 - (545 + 7)), v83[8 - 5]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1705 - (494 + 1209)]][v81[v83[7 - 4]]] = v81[v83[1002 - (197 + 801)]];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[9 - 7]] = v83[957 - (919 + 35)];
													v75 = v75 + 1 + 0;
													v259 = 6;
												end
												if ((15 - 11) == v259) then
													v83 = v71[v75];
													v81[v83[2]] = v83[470 - (369 + 98)];
													v75 = v75 + (1116 - (400 + 715));
													v83 = v71[v75];
													v81[v83[2]] = v83[2 + 1];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v260 = v83[1327 - (744 + 581)];
													v259 = 5;
												end
												if (v259 == 23) then
													v83 = v71[v75];
													v81[v83[2]] = v83[2 + 1];
													v75 = v75 + (1623 - (653 + 969));
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[1634 - (12 + 1619)];
													v75 = v75 + (164 - (103 + 60));
													v83 = v71[v75];
													v260 = v83[9 - 7];
													v259 = 104 - 80;
												end
												if (v259 == (104 - 82)) then
													v81[v83[1664 - (710 + 952)]][v81[v83[3]]] = v81[v83[1872 - (555 + 1313)]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v81[v83[1471 - (1261 + 207)]];
													v75 = v75 + (253 - (245 + 7));
													v259 = 770 - (212 + 535);
												end
												if ((4109 == 4109) and (v259 == (44 - 35))) then
													v75 = v75 + (1477 - (905 + 571));
													v83 = v71[v75];
													v81[v83[9 - 7]] = v83[3 - 0];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v260 = v83[2];
													v81[v260] = v81[v260](v13(v81, v260 + 1 + 0, v83[1466 - (522 + 941)]));
													v75 = v75 + (1512 - (292 + 1219));
													v259 = 1122 - (787 + 325);
												end
												if (v259 == (94 - 63)) then
													v260 = v83[2 + 0];
													v81[v260] = v81[v260](v13(v81, v260 + (2 - 1), v83[537 - (424 + 110)]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[1 + 3]];
													break;
												end
												if (v259 == (320 - (33 + 279))) then
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[1356 - (1338 + 15)];
													v75 = v75 + (1424 - (528 + 895));
													v83 = v71[v75];
													v81[v83[1 + 1]] = v81[v83[1927 - (1606 + 318)]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1821 - (298 + 1521)]] = v83[12 - 9];
													v259 = 9;
												end
												if (v259 == (325 - (154 + 156))) then
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[1118 - (712 + 403)];
													v75 = v75 + (451 - (168 + 282));
													v83 = v71[v75];
													v81[v83[3 - 1]] = v81[v83[3 + 0]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v259 = 16;
												end
												if (10 == v259) then
													v83 = v71[v75];
													v81[v83[5 - 3]][v81[v83[1454 - (1242 + 209)]]] = v81[v83[683 - (20 + 659)]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3]];
													v259 = 15 - 4;
												end
												if (v259 == 11) then
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[621 - (427 + 192)]] = v83[6 - 3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v83[3];
													v75 = v75 + (1948 - (1427 + 520));
													v83 = v71[v75];
													v259 = 7 + 5;
												end
												if (v259 == (68 - 50)) then
													v81[v83[2 + 0]] = v81[v83[1235 - (712 + 520)]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2]] = v83[1349 - (565 + 781)];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[567 - (35 + 530)]] = v83[2 + 1];
													v75 = v75 + (3 - 2);
													v259 = 1397 - (1330 + 48);
												end
												if ((22 + 8) == v259) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[13 - 10];
													v75 = v75 + (1170 - (854 + 315));
													v83 = v71[v75];
													v81[v83[6 - 4]] = v83[1 + 2];
													v75 = v75 + (45 - (31 + 13));
													v83 = v71[v75];
													v259 = 31;
												end
												if ((v259 == (28 - 8)) or (3157 < 315)) then
													v81[v83[4 - 2]] = v83[3 + 0];
													v75 = v75 + (564 - (281 + 282));
													v83 = v71[v75];
													v81[v83[5 - 3]] = v81[v83[2 + 1]];
													v75 = v75 + (950 - (216 + 733));
													v83 = v71[v75];
													v81[v83[1849 - (137 + 1710)]] = v83[8 - 5];
													v75 = v75 + (539 - (100 + 438));
													v259 = 1386 - (205 + 1160);
												end
												if (v259 == 26) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v260 = v83[2 + 0];
													v81[v260] = v81[v260](v13(v81, v260 + 1 + 0, v83[1308 - (535 + 770)]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[1998 - (211 + 1783)]];
													v75 = v75 + 1 + 0;
													v259 = 1456 - (1236 + 193);
												end
												if ((910 - (793 + 117)) == v259) then
													v260 = nil;
													v260 = v83[1894 - (1607 + 285)];
													v81[v260] = v81[v260](v13(v81, v260 + (861 - (747 + 113)), v83[3]));
													v75 = v75 + (1977 - (80 + 1896));
													v83 = v71[v75];
													v81[v83[9 - 7]][v81[v83[5 - 2]]] = v81[v83[4 + 0]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v259 = 1 + 0;
												end
											end
										elseif (v84 > 58) then
											local v1389 = 0 - 0;
											local v1390;
											local v1391;
											local v1392;
											while true do
												if (v1389 == (2 + 1)) then
													v81[v83[1 + 1]] = v81[v83[6 - 3]][v81[v83[458 - (246 + 208)]]];
													v75 = v75 + (1893 - (614 + 1278));
													v83 = v71[v75];
													v81[v83[1 + 1]] = {};
													v1389 = 318 - (249 + 65);
												end
												if (v1389 == (11 - 6)) then
													v83 = v71[v75];
													v81[v83[1277 - (726 + 549)]] = v81[v83[3]][v81[v83[3 + 1]]];
													v75 = v75 + (1425 - (916 + 508));
													v83 = v71[v75];
													v1389 = 6;
												end
												if (v1389 == (0 - 0)) then
													v1390 = nil;
													v1391 = nil;
													v1392 = nil;
													v81[v83[2]] = v81[v83[2 + 1]][v81[v83[327 - (140 + 183)]]];
													v1389 = 1 + 0;
												end
												if ((v1389 == (566 - (297 + 267))) or (2939 <= 2421)) then
													v83 = v71[v75];
													v81[v83[2]] = v83[2 + 1];
													v75 = v75 + (343 - (37 + 305));
													v83 = v71[v75];
													v1389 = 1269 - (323 + 943);
												end
												if ((2240 < 2699) and (v1389 == (3 + 3))) then
													v1392 = v83[2 - 0];
													v1391 = v81[v1392];
													v1390 = v83[1538 - (394 + 1141)];
													for v7021 = 1 + 0, v1390 do
														v1391[v7021] = v81[v1392 + v7021];
													end
													break;
												end
												if ((v1389 == 4) or (3055 <= 2818)) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[3];
													v75 = v75 + 1;
													v1389 = 1 + 4;
												end
												if (v1389 == (1 - 0)) then
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2 + 0]] = {};
													v75 = v75 + 1 + 0;
													v1389 = 531 - (87 + 442);
												end
											end
										else
											local v1393;
											v1393 = v83[807 - (13 + 792)];
											v81[v1393] = v81[v1393](v13(v81, v1393 + 1 + 0, v83[2 + 1]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[1868 - (1231 + 634)]]] = v81[v83[1770 - (1362 + 404)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[3 + 0];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1018 - (660 + 356)]] = v81[v83[4 - 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1952 - (1111 + 839)]] = v83[3];
											v75 = v75 + (952 - (496 + 455));
											v83 = v71[v75];
											v81[v83[700 - (66 + 632)]] = v83[4 - 1];
											v75 = v75 + (1137 - (441 + 695));
											v83 = v71[v75];
											v1393 = v83[5 - 3];
											v81[v1393] = v81[v1393](v13(v81, v1393 + (1 - 0), v83[14 - 11]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1840 - (286 + 1552)]][v81[v83[1280 - (1016 + 261)]]] = v81[v83[1324 - (708 + 612)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[382 - (113 + 266)];
											v75 = v75 + (1171 - (979 + 191));
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[1738 - (339 + 1396)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1393 = v83[2];
											v81[v1393] = v81[v1393](v13(v81, v1393 + (348 - (187 + 160)), v83[3]));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[6 - 4]][v81[v83[3]]] = v81[v83[1 + 3]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[1 + 2];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[330 - (56 + 272)]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[6 - 3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[642 - (455 + 185)]] = v83[791 - (757 + 31)];
											v75 = v75 + (2000 - (762 + 1237));
											v83 = v71[v75];
											v1393 = v83[2];
											v81[v1393] = v81[v1393](v13(v81, v1393 + 1, v83[5 - 2]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[271 - (265 + 4)]][v81[v83[7 - 4]]] = v81[v83[3 + 1]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v83[8 - 5];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[5 - 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1737 - (1691 + 43)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[9 - 6];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1393 = v83[2];
											v81[v1393] = v81[v1393](v13(v81, v1393 + (3 - 2), v83[179 - (127 + 49)]));
											v75 = v75 + (1681 - (281 + 1399));
											v83 = v71[v75];
											v81[v83[1661 - (184 + 1475)]][v81[v83[3 - 0]]] = v81[v83[8 - 4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[1294 - (260 + 1031)]];
											v75 = v75 + (1178 - (313 + 864));
											v83 = v71[v75];
											v81[v83[694 - (655 + 37)]] = v83[3 + 0];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1393 = v83[3 - 1];
											v81[v1393] = v81[v1393](v13(v81, v1393 + 1, v83[773 - (383 + 387)]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[9 - 6]]] = v81[v83[2 + 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[512 - (304 + 206)]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[227 - (182 + 43)]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[777 - (264 + 511)]] = v83[1 + 2];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[983 - (128 + 853)]] = v83[3];
											v75 = v75 + (1703 - (1635 + 67));
											v83 = v71[v75];
											v1393 = v83[2];
											v81[v1393] = v81[v1393](v13(v81, v1393 + 1 + 0, v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[199 - (131 + 66)]][v81[v83[10 - 7]]] = v81[v83[4]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[2 + 1];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[1608 - (306 + 1299)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[791 - (671 + 118)]] = v83[11 - 8];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1393 = v83[78 - (73 + 3)];
											v81[v1393] = v81[v1393](v13(v81, v1393 + (2 - 1), v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[9 - 7]][v81[v83[3]]] = v81[v83[9 - 5]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[1758 - (1668 + 87)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1901 - (296 + 1603)]] = v81[v83[109 - (79 + 27)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1010 - (700 + 307)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1802 - (1477 + 322)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1393 = v83[4 - 2];
											v81[v1393] = v81[v1393](v13(v81, v1393 + 1 + 0, v83[3]));
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2 + 0]][v81[v83[12 - 9]]] = v81[v83[10 - 6]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[6 - 3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[5 - 2]];
											v75 = v75 + (1787 - (20 + 1766));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[812 - (88 + 721)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1393 = v83[1 + 1];
											v81[v1393] = v81[v1393](v13(v81, v1393 + (2 - 1), v83[5 - 2]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[440 - (93 + 344)]]] = v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1215 - (960 + 253)]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[8 - 5]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1418 - (74 + 1342)]] = v83[1 + 2];
											v75 = v75 + (475 - (33 + 441));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[1422 - (64 + 1355)];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1393 = v83[13 - (5 + 6)];
											v81[v1393] = v81[v1393](v13(v81, v1393 + 1, v83[1 + 2]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[448 - (369 + 77)]][v81[v83[3]]] = v81[v83[1 + 3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[740 - (438 + 300)]] = v83[297 - (50 + 244)];
											v75 = v75 + (1202 - (95 + 1106));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[3]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[1898 - (1741 + 155)]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1393 = v83[2];
											v81[v1393] = v81[v1393](v13(v81, v1393 + 1, v83[5 - 2]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[2 + 1]]] = v81[v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[1780 - (1263 + 514)];
											v75 = v75 + (498 - (73 + 424));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[311 - (93 + 215)]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1937 - (1756 + 179)]] = v83[1682 - (550 + 1129)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[109 - (57 + 50)]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1393 = v83[2];
											v81[v1393] = v81[v1393](v13(v81, v1393 + (630 - (30 + 599)), v83[1 + 2]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[920 - (794 + 124)]][v81[v83[1 + 2]]] = v81[v83[1 + 3]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1929 - (1299 + 628)]] = v83[5 - 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[3 + 0]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[1448 - (335 + 1110)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[9 - 6];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1393 = v83[334 - (268 + 64)];
											v81[v1393] = v81[v1393](v13(v81, v1393 + 1 + 0, v83[1281 - (243 + 1035)]));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[9 - 7]][v81[v83[12 - 9]]] = v81[v83[3 + 1]];
										end
									elseif (v84 <= 62) then
										if ((v84 <= (53 + 7)) or (4716 <= 2804)) then
											local v261;
											local v262;
											local v263;
											v81[v83[2 - 0]] = {};
											v75 = v75 + (101 - (90 + 10));
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (805 - (209 + 595));
											v83 = v71[v75];
											v81[v83[807 - (603 + 202)]] = v81[v83[2 + 1]][v81[v83[4]]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1 + 1]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[12 - 9]][v81[v83[4]]];
											v75 = v75 + (280 - (174 + 105));
											v83 = v71[v75];
											v263 = v83[6 - 4];
											v262 = v81[v263];
											v261 = v83[3];
											for v730 = 914 - (532 + 381), v261 do
												v262[v730] = v81[v263 + v730];
											end
										elseif ((v84 == 61) or (393 > 4241)) then
											local v1486;
											local v1487;
											local v1488;
											v81[v83[2 + 0]] = v83[842 - (137 + 702)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[10 - 7]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1888 - (1819 + 67)]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + (1358 - (259 + 1098));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[1 + 3]]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1488 = v83[1 + 1];
											v1487 = v81[v1488];
											v1486 = v83[3 + 0];
											for v3923 = 4 - 3, v1486 do
												v1487[v3923] = v81[v1488 + v3923];
											end
										else
											local v1501 = 0;
											while true do
												if (v1501 == (1710 - (667 + 1039))) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1021 - (274 + 745)]] = v83[3 + 0];
													v75 = v75 + 1 + 0;
													v1501 = 435 - (288 + 142);
												end
												if ((4501 > 4485) and (v1501 == (1312 - (301 + 1005)))) then
													v81[v83[1 + 1]] = {};
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2]] = v83[1876 - (674 + 1199)];
													break;
												end
												if (v1501 == (1 + 0)) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[5 - 3]] = v81[v83[3]][v81[v83[16 - 12]]];
													v75 = v75 + 1 + 0;
													v1501 = 2;
												end
												if (v1501 == (445 - (92 + 353))) then
													v81[v83[2 + 0]][v81[v83[7 - 4]]] = v81[v83[7 - 3]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v83[8 - 5];
													v1501 = 1;
												end
												if ((1661 <= 3530) and (v1501 == (3 + 2))) then
													v83 = v71[v75];
													v81[v83[3 - 1]] = v81[v83[6 - 3]][v81[v83[4]]];
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v1501 = 6 + 0;
												end
												if (2 == v1501) then
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[268 - (34 + 231)];
													v75 = v75 + (1318 - (930 + 387));
													v83 = v71[v75];
													v1501 = 3 + 0;
												end
												if (v1501 == (2 + 1)) then
													v81[v83[5 - 3]][v81[v83[700 - (389 + 308)]]] = v81[v83[9 - 5]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[5 - 3]][v81[v83[2 + 1]]] = v81[v83[4]];
													v1501 = 326 - (125 + 197);
												end
											end
										end
									elseif (v84 <= (1061 - (339 + 658))) then
										if (v84 > (153 - 90)) then
											local v1502;
											v1502 = v83[3 - 1];
											v81[v1502] = v81[v1502](v13(v81, v1502 + (1349 - (743 + 605)), v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[11 - 8]]] = v81[v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[252 - (197 + 52)];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[2 + 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[10 - 7];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1502 = v83[2];
											v81[v1502] = v81[v1502](v13(v81, v1502 + (1 - 0), v83[3]));
											v75 = v75 + (1098 - (97 + 1000));
											v83 = v71[v75];
											v81[v83[6 - 4]][v81[v83[1848 - (143 + 1702)]]] = v81[v83[7 - 3]];
											v75 = v75 + (370 - (40 + 329));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[1 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[68 - (9 + 56)];
											v75 = v75 + (585 - (531 + 53));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[776 - (89 + 684)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1502 = v83[2];
											v81[v1502] = v81[v1502](v13(v81, v1502 + 1, v83[3 + 0]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[4 - 1]]] = v81[v83[3 + 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[615 - (238 + 375)]] = v83[3 + 0];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[8 - 5];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[11 - 8];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1502 = v83[2];
											v81[v1502] = v81[v1502](v13(v81, v1502 + 1 + 0, v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4]];
											v75 = v75 + (463 - (428 + 34));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[4 - 1];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[921 - (223 + 695)]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[513 - (329 + 182)]] = v83[1 + 2];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1502 = v83[2 + 0];
											v81[v1502] = v81[v1502](v13(v81, v1502 + 1, v83[6 - 3]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1202 - (177 + 1023)]][v81[v83[5 - 2]]] = v81[v83[2 + 2]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[1468 - (120 + 1345)];
											v75 = v75 + (338 - (8 + 329));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]];
											v75 = v75 + (126 - (19 + 106));
											v83 = v71[v75];
											v81[v83[7 - 5]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1502 = v83[2 + 0];
											v81[v1502] = v81[v1502](v13(v81, v1502 + 1, v83[8 - 5]));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[7 - 5]][v81[v83[3]]] = v81[v83[8 - 4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1506 - (957 + 546)];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[2 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + (704 - (227 + 476));
											v83 = v71[v75];
											v1502 = v83[3 - 1];
											v81[v1502] = v81[v1502](v13(v81, v1502 + (1 - 0), v83[4 - 1]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[3];
											v75 = v75 + (955 - (166 + 788));
											v83 = v71[v75];
											v81[v83[988 - (21 + 965)]] = v81[v83[699 - (127 + 569)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[2 + 1];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1502 = v83[1 + 1];
											v81[v1502] = v81[v1502](v13(v81, v1502 + 1 + 0, v83[1295 - (1162 + 130)]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[5 - 2]]] = v81[v83[3 + 1]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[938 - (889 + 47)]] = v83[2 + 1];
											v75 = v75 + (1265 - (1153 + 111));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3 - 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1502 = v83[3 - 1];
											v81[v1502] = v81[v1502](v13(v81, v1502 + 1 + 0, v83[3]));
											v75 = v75 + (97 - (23 + 73));
											v83 = v71[v75];
											v81[v83[287 - (26 + 259)]][v81[v83[2 + 1]]] = v81[v83[5 - 1]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1631 - (1094 + 535)]] = v83[1 + 2];
											v75 = v75 + (1877 - (1554 + 322));
											v83 = v71[v75];
											v81[v83[1427 - (989 + 436)]] = v81[v83[1181 - (816 + 362)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[5 - 2];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[7 - 5]] = v83[4 - 1];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1502 = v83[2];
											v81[v1502] = v81[v1502](v13(v81, v1502 + (4 - 3), v83[1 + 2]));
											v75 = v75 + (764 - (86 + 677));
											v83 = v71[v75];
											v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[1030 - (263 + 763)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[860 - (649 + 209)]] = v83[13 - 10];
											v75 = v75 + (732 - (643 + 88));
											v83 = v71[v75];
											v81[v83[1771 - (54 + 1715)]] = v81[v83[11 - 8]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[5 - 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1 + 2];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1502 = v83[2];
											v81[v1502] = v81[v1502](v13(v81, v1502 + 1, v83[1386 - (132 + 1251)]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]][v81[v83[3 + 0]]] = v81[v83[4]];
											v75 = v75 + (459 - (185 + 273));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[8 - 5];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1226 - (361 + 863)]] = v81[v83[8 - 5]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1329 - (443 + 884)]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1502 = v83[4 - 2];
											v81[v1502] = v81[v1502](v13(v81, v1502 + (748 - (16 + 731)), v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[4 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (761 - (527 + 233));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[6 - 3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[1788 - (1107 + 678)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1502 = v83[2 + 0];
											v81[v1502] = v81[v1502](v13(v81, v1502 + 1 + 0, v83[53 - (4 + 46)]));
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[3 - 1]][v81[v83[3]]] = v81[v83[3 + 1]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - 1];
											v75 = v75 + (1397 - (1262 + 134));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[798 - (383 + 412)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1502 = v83[1 + 1];
											v81[v1502] = v81[v1502](v13(v81, v1502 + 1 + 0, v83[3 - 0]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]][v81[v83[3 - 0]]] = v81[v83[10 - 6]];
										else
											local v1579 = 0 + 0;
											local v1580;
											local v1581;
											local v1582;
											while true do
												if (v1579 == (707 - (667 + 40))) then
													v1580 = v83[1312 - (436 + 874)];
													v1581 = v81[v1580];
													v1579 = 1607 - (762 + 844);
												end
												if ((v1579 == (1 - 0)) or (1382 >= 4993)) then
													v1582 = v81[v1580 + (4 - 2)];
													if (v1582 > (0 + 0)) then
														if (v1581 > v81[v1580 + 1 + 0]) then
															v75 = v83[479 - (209 + 267)];
														else
															v81[v1580 + 3] = v1581;
														end
													elseif (v1581 < v81[v1580 + 1]) then
														v75 = v83[5 - 2];
													else
														v81[v1580 + 3] = v1581;
													end
													break;
												end
											end
										end
									elseif ((v84 == 65) or (3137 == 2260)) then
										local v1583;
										local v1584;
										local v1585;
										v81[v83[5 - 3]] = v83[1714 - (1611 + 100)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[786 - (14 + 770)]] = v81[v83[1787 - (1165 + 619)]][v81[v83[5 - 1]]];
										v75 = v75 + (382 - (229 + 152));
										v83 = v71[v75];
										v81[v83[2]] = {};
										v75 = v75 + (195 - (107 + 87));
										v83 = v71[v75];
										v81[v83[2]] = v83[5 - 2];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[14 - 11]][v81[v83[15 - 11]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1585 = v83[2];
										v1584 = v81[v1585];
										v1583 = v83[3];
										for v3926 = 15 - (13 + 1), v1583 do
											v1584[v3926] = v81[v1585 + v3926];
										end
									else
										local v1598 = 0 + 0;
										while true do
											if ((4244 > 2705) and (v1598 == (2 + 1))) then
												v81[v83[1060 - (987 + 71)]][v81[v83[8 - 5]]] = v81[v83[4 - 0]];
												v75 = v75 + (700 - (514 + 185));
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[5 - 2]]] = v81[v83[15 - 11]];
												v1598 = 4;
											end
											if ((1504 - (771 + 733)) == v1598) then
												v81[v83[2]][v81[v83[5 - 2]]] = v81[v83[8 - 4]];
												v75 = v75 + (1168 - (407 + 760));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[1 + 2];
												v1598 = 1;
											end
											if ((v1598 == (4 + 0)) or (4619 < 3081)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1856 - (169 + 1685)]] = v83[3];
												v75 = v75 + 1 + 0;
												v1598 = 396 - (41 + 350);
											end
											if ((13 - 8) == v1598) then
												v83 = v71[v75];
												v81[v83[5 - 3]] = v81[v83[12 - 9]][v81[v83[9 - 5]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1598 = 4 + 2;
											end
											if ((v1598 == (893 - (790 + 97))) or (191 > 4019)) then
												v81[v83[2]] = {};
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v81[v83[2]] = v83[1 + 2];
												break;
											end
											if (v1598 == 2) then
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[248 - (235 + 10)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1598 = 5 - 2;
											end
											if (v1598 == (1184 - (887 + 296))) then
												v75 = v75 + (1046 - (512 + 533));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[1427 - (662 + 762)]][v81[v83[681 - (334 + 343)]]];
												v75 = v75 + (3 - 2);
												v1598 = 491 - (198 + 291);
											end
										end
									end
								elseif (v84 <= 73) then
									if (v84 <= (2 + 67)) then
										if ((4732 == 4732) and (v84 <= 67)) then
											v81[v83[2]][v81[v83[577 - (141 + 433)]]] = v81[v83[18 - 14]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + (778 - (227 + 550));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[3]][v81[v83[10 - 6]]];
											v75 = v75 + (104 - (72 + 31));
											v83 = v71[v75];
											v81[v83[350 - (89 + 259)]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[5 - 2]]] = v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]][v81[v83[3]]] = v81[v83[1407 - (1333 + 70)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[1835 - (701 + 1131)];
											v75 = v75 + (128 - (55 + 72));
											v83 = v71[v75];
											v81[v83[158 - (99 + 57)]] = v81[v83[4 - 1]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = {};
											v75 = v75 + (1580 - (1243 + 336));
											v83 = v71[v75];
											v81[v83[1331 - (774 + 555)]] = v83[3];
										elseif (v84 > (33 + 35)) then
											local v1599 = 799 - (150 + 649);
											local v1600;
											local v1601;
											local v1602;
											while true do
												if (v1599 == (1 + 0)) then
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[3 - 1]] = v81[v83[1987 - (1122 + 862)]][v81[v83[7 - 3]]];
													v75 = v75 + 1;
													v1599 = 1 + 1;
												end
												if (v1599 == (9 - 4)) then
													v1600 = v83[3];
													for v7024 = 1 + 0, v1600 do
														v1601[v7024] = v81[v1602 + v7024];
													end
													break;
												end
												if ((3683 >= 1805) and (v1599 == (2 + 2))) then
													v75 = v75 + (744 - (549 + 194));
													v83 = v71[v75];
													v1602 = v83[2 + 0];
													v1601 = v81[v1602];
													v1599 = 19 - 14;
												end
												if ((v1599 == 2) or (947 > 1459)) then
													v83 = v71[v75];
													v81[v83[1 + 1]] = {};
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v1599 = 3;
												end
												if ((1245 >= 375) and (v1599 == (0 + 0))) then
													v1600 = nil;
													v1601 = nil;
													v1602 = nil;
													v81[v83[7 - 5]] = v83[1706 - (453 + 1250)];
													v1599 = 2 - 1;
												end
												if (v1599 == (3 + 0)) then
													v81[v83[2]] = v83[578 - (203 + 372)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[5 - 3]] = v81[v83[1385 - (978 + 404)]][v81[v83[12 - 8]]];
													v1599 = 4 + 0;
												end
											end
										else
											local v1603;
											v1603 = v83[320 - (56 + 262)];
											v81[v1603] = v81[v1603](v13(v81, v1603 + 1, v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[117 - (108 + 6)]]] = v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1955 - (653 + 1299)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[1925 - (1042 + 880)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1004 - (16 + 986)]] = v83[3];
											v75 = v75 + (1219 - (700 + 518));
											v83 = v71[v75];
											v1603 = v83[6 - 4];
											v81[v1603] = v81[v1603](v13(v81, v1603 + (1 - 0), v83[1514 - (617 + 894)]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[460 - (271 + 187)]][v81[v83[1587 - (731 + 853)]]] = v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[1524 - (199 + 1322)];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[1663 - (1291 + 369)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[687 - (561 + 124)]] = v83[3 + 0];
											v75 = v75 + (854 - (25 + 828));
											v83 = v71[v75];
											v1603 = v83[4 - 2];
											v81[v1603] = v81[v1603](v13(v81, v1603 + (1 - 0), v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[593 - (99 + 491)]]] = v81[v83[52 - (18 + 30)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[4 - 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[734 - (501 + 231)]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1701 - (470 + 1228)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1603 = v83[2 + 0];
											v81[v1603] = v81[v1603](v13(v81, v1603 + (687 - (537 + 149)), v83[3 - 0]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]][v81[v83[9 - 6]]] = v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[2 + 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1603 = v83[581 - (134 + 445)];
											v81[v1603] = v81[v1603](v13(v81, v1603 + (1 - 0), v83[3 + 0]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[7 - 5]][v81[v83[3]]] = v81[v83[264 - (36 + 224)]];
											v75 = v75 + (1861 - (1033 + 827));
											v83 = v71[v75];
											v81[v83[1848 - (1002 + 844)]] = v83[1353 - (1126 + 224)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[67 - (48 + 16)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1603 = v83[9 - 7];
											v81[v1603] = v81[v1603](v13(v81, v1603 + (3 - 2), v83[1 + 2]));
											v75 = v75 + (1090 - (910 + 179));
											v83 = v71[v75];
											v81[v83[3 - 1]][v81[v83[3]]] = v81[v83[8 - 4]];
											v75 = v75 + (1380 - (933 + 446));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[1527 - (248 + 1276)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[2 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[9 - 6];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[1548 - (151 + 1394)];
											v75 = v75 + (945 - (929 + 15));
											v83 = v71[v75];
											v1603 = v83[1998 - (1173 + 823)];
											v81[v1603] = v81[v1603](v13(v81, v1603 + (1 - 0), v83[1779 - (482 + 1294)]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[5 - 2]]] = v81[v83[2 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1308 - (1125 + 181)]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[2 + 1]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v83[1192 - (626 + 563)];
											v75 = v75 + (1251 - (153 + 1097));
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[2 + 1];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1603 = v83[2 + 0];
											v81[v1603] = v81[v1603](v13(v81, v1603 + 1, v83[3 + 0]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[3 + 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1159 - (199 + 958)]] = v83[2 + 1];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (1177 - (1169 + 7));
											v83 = v71[v75];
											v81[v83[1875 - (751 + 1122)]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1603 = v83[1 + 1];
											v81[v1603] = v81[v1603](v13(v81, v1603 + 1, v83[1 + 2]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1183 - (589 + 592)]][v81[v83[3]]] = v81[v83[4]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[27 - (13 + 11)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1263 - (684 + 576)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1603 = v83[2 - 0];
											v81[v1603] = v81[v1603](v13(v81, v1603 + 1 + 0, v83[3 + 0]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[1 + 2]]] = v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1850 - (230 + 1618)]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[206 - (131 + 72)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[206 - (144 + 60)]] = v83[12 - 9];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[1 + 2];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v1603 = v83[1 + 1];
											v81[v1603] = v81[v1603](v13(v81, v1603 + (1923 - (523 + 1399)), v83[3 + 0]));
											v75 = v75 + (405 - (72 + 332));
											v83 = v71[v75];
											v81[v83[2]][v81[v83[979 - (269 + 707)]]] = v81[v83[7 - 3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[7 - 4];
											v75 = v75 + (131 - (123 + 7));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3 + 0]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[1091 - (38 + 1050)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1603 = v83[1 + 1];
											v81[v1603] = v81[v1603](v13(v81, v1603 + 1 + 0, v83[2 + 1]));
											v75 = v75 + (824 - (426 + 397));
											v83 = v71[v75];
											v81[v83[1408 - (751 + 655)]][v81[v83[3]]] = v81[v83[7 - 3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1248 - (39 + 1206)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[843 - (566 + 275)]] = v81[v83[938 - (167 + 768)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[4 - 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3 - 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1603 = v83[2];
											v81[v1603] = v81[v1603](v13(v81, v1603 + (16 - (8 + 7)), v83[1686 - (1510 + 173)]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4]];
											v75 = v75 + (254 - (30 + 223));
											v83 = v71[v75];
											v81[v83[1258 - (300 + 956)]] = v83[125 - (22 + 100)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[285 - (47 + 235)]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + (487 - (21 + 465));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1603 = v83[2 - 0];
											v81[v1603] = v81[v1603](v13(v81, v1603 + (1218 - (553 + 664)), v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[80 - (73 + 5)]][v81[v83[1718 - (1128 + 587)]]] = v81[v83[15 - 11]];
										end
									elseif (v84 <= (761 - (558 + 132))) then
										if ((4332 >= 309) and (v84 == 70)) then
											local v1687;
											local v1688;
											local v1689;
											v81[v83[5 - 3]] = {};
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4 + 0]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[774 - (294 + 477)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[6 - 3]][v81[v83[7 - 3]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1689 = v83[2 + 0];
											v1688 = v81[v1689];
											v1687 = v83[6 - 3];
											for v3929 = 983 - (97 + 885), v1687 do
												v1688[v3929] = v81[v1689 + v3929];
											end
										else
											local v1702;
											v1702 = v83[1 + 1];
											v81[v1702] = v81[v1702](v13(v81, v1702 + (1 - 0), v83[368 - (271 + 94)]));
											v75 = v75 + (1604 - (777 + 826));
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[1358 - (117 + 1238)]]] = v81[v83[1719 - (686 + 1029)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1358 - (1074 + 282)]] = v83[1620 - (1359 + 258)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[1938 - (1730 + 205)]];
											v75 = v75 + (529 - (67 + 461));
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - 1];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[1 + 2];
											v75 = v75 + (630 - (129 + 500));
											v83 = v71[v75];
											v1702 = v83[1713 - (1157 + 554)];
											v81[v1702] = v81[v1702](v13(v81, v1702 + (1 - 0), v83[610 - (82 + 525)]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]][v81[v83[1626 - (948 + 675)]]] = v81[v83[2 + 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[856 - (406 + 447)];
											v75 = v75 + (118 - (91 + 26));
											v83 = v71[v75];
											v81[v83[6 - 4]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[989 - (968 + 18)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3 + 0];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1702 = v83[269 - (172 + 95)];
											v81[v1702] = v81[v1702](v13(v81, v1702 + (3 - 2), v83[268 - (260 + 5)]));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[3]]] = v81[v83[823 - (265 + 554)]];
											v75 = v75 + (1572 - (1440 + 131));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[1398 - (253 + 1142)];
											v75 = v75 + (254 - (133 + 120));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[1959 - (809 + 1147)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[499 - (178 + 319)]] = v83[5 - 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1272 - (1255 + 15)]] = v83[1545 - (1221 + 321)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1702 = v83[2 + 0];
											v81[v1702] = v81[v1702](v13(v81, v1702 + 1, v83[3]));
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[11 - 8]]] = v81[v83[2 + 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[410 - (204 + 203)];
											v75 = v75 + (79 - (48 + 30));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[2 + 1]];
											v75 = v75 + (1965 - (1472 + 492));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[2 + 1];
											v75 = v75 + (612 - (258 + 353));
											v83 = v71[v75];
											v81[v83[1996 - (1382 + 612)]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1702 = v83[1 + 1];
											v81[v1702] = v81[v1702](v13(v81, v1702 + (2 - 1), v83[3 + 0]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[121 - (35 + 84)]][v81[v83[218 - (75 + 140)]]] = v81[v83[4]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1801 - (923 + 876)]] = v83[7 - 4];
											v75 = v75 + (813 - (284 + 528));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1022 - (867 + 152)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1108 - (709 + 397)]] = v83[10 - 7];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[38 - (21 + 15)]] = v83[3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1702 = v83[3 - 1];
											v81[v1702] = v81[v1702](v13(v81, v1702 + 1 + 0, v83[8 - 5]));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[139 - (97 + 38)]];
											v75 = v75 + (81 - (52 + 28));
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + (850 - (59 + 790));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[1 + 2]];
											v75 = v75 + (941 - (467 + 473));
											v83 = v71[v75];
											v81[v83[2]] = v83[14 - 11];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1702 = v83[1 + 1];
											v81[v1702] = v81[v1702](v13(v81, v1702 + (2 - 1), v83[3]));
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[4 - 1]]] = v81[v83[1 + 3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[240 - (58 + 179)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1255 - (677 + 576)]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[6 - 3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[222 - (88 + 132)]] = v83[3 + 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1702 = v83[9 - 7];
											v81[v1702] = v81[v1702](v13(v81, v1702 + (3 - 2), v83[294 - (12 + 279)]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[4]];
											v75 = v75 + (948 - (652 + 295));
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[991 - (848 + 141)]] = v81[v83[743 - (372 + 368)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1132 - (542 + 588)]] = v83[3];
											v75 = v75 + (819 - (6 + 812));
											v83 = v71[v75];
											v81[v83[1707 - (1599 + 106)]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1702 = v83[1 + 1];
											v81[v1702] = v81[v1702](v13(v81, v1702 + (3 - 2), v83[5 - 2]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[4 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1931 - (1690 + 239)]] = v81[v83[10 - 7]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[11 - 8];
											v75 = v75 + (1869 - (1736 + 132));
											v83 = v71[v75];
											v1702 = v83[2 + 0];
											v81[v1702] = v81[v1702](v13(v81, v1702 + (3 - 2), v83[13 - 10]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[34 - (27 + 5)]][v81[v83[3]]] = v81[v83[1 + 3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[1 + 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (1118 - (771 + 346));
											v83 = v71[v75];
											v81[v83[1636 - (1577 + 57)]] = v83[5 - 2];
											v75 = v75 + (1081 - (684 + 396));
											v83 = v71[v75];
											v1702 = v83[5 - 3];
											v81[v1702] = v81[v1702](v13(v81, v1702 + (1197 - (700 + 496)), v83[3 + 0]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[254 - (65 + 187)]][v81[v83[942 - (827 + 112)]]] = v81[v83[3 + 1]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[7 - 4];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1 + 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1198 - (551 + 645)]] = v83[346 - (166 + 177)];
											v75 = v75 + (1857 - (1361 + 495));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[2 + 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1702 = v83[2];
											v81[v1702] = v81[v1702](v13(v81, v1702 + 1, v83[6 - 3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[226 - (148 + 76)]][v81[v83[3]]] = v81[v83[14 - 10]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + (1743 - (735 + 1007));
											v83 = v71[v75];
											v81[v83[281 - (111 + 168)]] = v81[v83[2 + 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v1702 = v83[2 + 0];
											v81[v1702] = v81[v1702](v13(v81, v1702 + 1, v83[935 - (147 + 785)]));
											v75 = v75 + (667 - (483 + 183));
											v83 = v71[v75];
											v81[v83[5 - 3]][v81[v83[3 + 0]]] = v81[v83[1915 - (1790 + 121)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[1542 - (259 + 1280)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1587 - (160 + 1424)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[773 - (479 + 291)];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[973 - (569 + 402)]] = v83[1308 - (635 + 670)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v1702 = v83[7 - 5];
											v81[v1702] = v81[v1702](v13(v81, v1702 + (599 - (42 + 556)), v83[1404 - (1246 + 155)]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[734 - (31 + 701)]][v81[v83[9 - 6]]] = v81[v83[503 - (393 + 106)]];
										end
									elseif (v84 > 72) then
										local v1794;
										local v1795;
										local v1796;
										v81[v83[1173 - (727 + 444)]] = {};
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + (654 - (269 + 384));
										v83 = v71[v75];
										v81[v83[1571 - (598 + 971)]] = v81[v83[2 + 1]][v81[v83[12 - 8]]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[5 - 3]] = {};
										v75 = v75 + (1446 - (800 + 645));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[792 - (687 + 103)]] = v81[v83[1165 - (142 + 1020)]][v81[v83[9 - 5]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v1796 = v83[2];
										v1795 = v81[v1796];
										v1794 = v83[3];
										for v3932 = 1 + 0, v1794 do
											v1795[v3932] = v81[v1796 + v3932];
										end
									else
										v81[v83[515 - (306 + 207)]][v81[v83[1407 - (112 + 1292)]]] = v81[v83[4 + 0]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[954 - (587 + 365)]] = v83[1718 - (829 + 886)];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1 + 2]][v81[v83[15 - 11]]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[2 + 1];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]][v81[v83[980 - (613 + 364)]]] = v81[v83[4 + 0]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[8 - 4]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v83[9 - 6];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1941 - (1467 + 472)]] = v81[v83[3 - 0]][v81[v83[1551 - (1077 + 470)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = {};
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[431 - (12 + 417)]] = v83[7 - 4];
									end
								elseif (v84 <= (57 + 19)) then
									if (v84 <= (97 - 23)) then
										v81[v83[2]] = v81[v83[5 - 2]];
									elseif ((v84 > (141 - 66)) or (280 >= 4169)) then
										local v1828 = 0 + 0;
										local v1829;
										while true do
											if (v1828 == (4 + 6)) then
												v81[v83[2]] = v83[1 + 2];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[1108 - (924 + 181)];
												v75 = v75 + (798 - (263 + 534));
												v83 = v71[v75];
												v1829 = v83[1 + 1];
												v81[v1829] = v81[v1829](v13(v81, v1829 + 1 + 0, v83[5 - 2]));
												v75 = v75 + (2 - 1);
												v1828 = 11;
											end
											if ((2396 <= 3548) and (v1828 == (8 + 5))) then
												v75 = v75 + (708 - (562 + 145));
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[2 + 1]]] = v81[v83[2 + 2]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[5 - 2];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[9 - 7]] = v81[v83[2 + 1]];
												v1828 = 10 + 4;
											end
											if (v1828 == (1879 - (1459 + 417))) then
												v81[v83[288 - (194 + 92)]] = v83[1388 - (1057 + 328)];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[9 - 7]] = v81[v83[535 - (5 + 527)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + (781 - (342 + 438));
												v83 = v71[v75];
												v1828 = 2 + 2;
											end
											if ((4 + 3) == v1828) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[1 + 2];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v81[v83[5 - 2]];
												v75 = v75 + (13 - (6 + 6));
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[8 - 5];
												v1828 = 8;
											end
											if ((v1828 == (8 + 10)) or (1588 >= 3118)) then
												v83 = v71[v75];
												v81[v83[1255 - (206 + 1047)]] = v81[v83[1115 - (470 + 642)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1069 - (552 + 515)]] = v83[3 + 0];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + 1 + 0;
												v1828 = 19 + 0;
											end
											if (v1828 == (9 + 6)) then
												v81[v1829] = v81[v1829](v13(v81, v1829 + 1 + 0, v83[3]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1053 - (701 + 350)]][v81[v83[2 + 1]]] = v81[v83[3 + 1]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[3];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v1828 = 11 + 5;
											end
											if (v1828 == (9 - 5)) then
												v81[v83[1 + 1]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1829 = v83[7 - 5];
												v81[v1829] = v81[v1829](v13(v81, v1829 + 1, v83[1349 - (281 + 1065)]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[9 - 7]][v81[v83[3]]] = v81[v83[14 - 10]];
												v75 = v75 + (1212 - (1114 + 97));
												v1828 = 5;
											end
											if (v1828 == (23 - 7)) then
												v81[v83[1915 - (279 + 1634)]] = v81[v83[1283 - (1213 + 67)]];
												v75 = v75 + (192 - (65 + 126));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1087 - (189 + 896)]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1828 = 1980 - (1872 + 91);
											end
											if (v1828 == 21) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v1829 = v83[2 + 0];
												v81[v1829] = v81[v1829](v13(v81, v1829 + (3 - 2), v83[3]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[10 - 7]]] = v81[v83[80 - (22 + 54)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1828 = 22;
											end
											if (v1828 == (32 - 18)) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[1 + 2];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1829 = v83[7 - 5];
												v1828 = 1549 - (553 + 981);
											end
											if ((5 + 0) == v1828) then
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[8 - 5]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[1900 - (1320 + 577)];
												v75 = v75 + (850 - (667 + 182));
												v1828 = 6;
											end
											if (v1828 == 23) then
												v81[v83[2]] = v83[1291 - (1115 + 173)];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v1829 = v83[2 + 0];
												v81[v1829] = v81[v1829](v13(v81, v1829 + (1756 - (1375 + 380)), v83[2 + 1]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]][v81[v83[3]]] = v81[v83[30 - (12 + 14)]];
												v75 = v75 + (2 - 1);
												v1828 = 24;
											end
											if (v1828 == (24 - 13)) then
												v83 = v71[v75];
												v81[v83[4 - 2]][v81[v83[8 - 5]]] = v81[v83[5 - 1]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[734 - (354 + 377)];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[7 - 4]];
												v75 = v75 + (1983 - (263 + 1719));
												v1828 = 12;
											end
											if (v1828 == (13 + 14)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[362 - (335 + 24)];
												v75 = v75 + (952 - (882 + 69));
												v83 = v71[v75];
												v1829 = v83[1688 - (657 + 1029)];
												v81[v1829] = v81[v1829](v13(v81, v1829 + (1201 - (685 + 515)), v83[1641 - (745 + 893)]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1828 = 800 - (274 + 498);
											end
											if (v1828 == 26) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[1609 - (1035 + 571)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[3]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[7 - 5]] = v83[8 - 5];
												v1828 = 26 + 1;
											end
											if (v1828 == (13 + 6)) then
												v83 = v71[v75];
												v1829 = v83[5 - 3];
												v81[v1829] = v81[v1829](v13(v81, v1829 + (225 - (109 + 115)), v83[1402 - (1047 + 352)]));
												v75 = v75 + (1766 - (852 + 913));
												v83 = v71[v75];
												v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[1349 - (384 + 961)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[6 - 3];
												v1828 = 20;
											end
											if (v1828 == 6) then
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[3];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v1829 = v83[594 - (591 + 1)];
												v81[v1829] = v81[v1829](v13(v81, v1829 + 1 + 0, v83[3]));
												v75 = v75 + (1471 - (218 + 1252));
												v83 = v71[v75];
												v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[360 - (321 + 35)]];
												v1828 = 401 - (239 + 155);
											end
											if (v1828 == (15 + 2)) then
												v1829 = v83[2];
												v81[v1829] = v81[v1829](v13(v81, v1829 + (43 - (41 + 1)), v83[203 - (80 + 120)]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]][v81[v83[3]]] = v81[v83[7 - 3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[14 - 11];
												v75 = v75 + (2 - 1);
												v1828 = 76 - 58;
											end
											if (v1828 == (19 - 7)) then
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[1 + 2];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1228 - (165 + 1061)]] = v83[3 + 0];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1829 = v83[1645 - (596 + 1047)];
												v81[v1829] = v81[v1829](v13(v81, v1829 + 1 + 0, v83[3 + 0]));
												v1828 = 18 - 5;
											end
											if ((v1828 == 22) or (2121 <= 1356)) then
												v81[v83[2]] = v83[2 + 1];
												v75 = v75 + (738 - (185 + 552));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[604 - (507 + 94)]];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[4 - 1];
												v75 = v75 + (1738 - (569 + 1168));
												v83 = v71[v75];
												v1828 = 44 - 21;
											end
											if (v1828 == 2) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v1829 = v83[353 - (118 + 233)];
												v81[v1829] = v81[v1829](v13(v81, v1829 + 1, v83[347 - (279 + 65)]));
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[3 - 1]][v81[v83[6 - 3]]] = v81[v83[11 - 7]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1828 = 1821 - (1414 + 404);
											end
											if ((757 - (347 + 409)) == v1828) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3 + 0]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
												v75 = v75 + (1579 - (420 + 1158));
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[614 - (406 + 205)];
												v1828 = 6 - 4;
											end
											if (v1828 == (5 + 3)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[7 - 4];
												v75 = v75 + (62 - (28 + 33));
												v83 = v71[v75];
												v1829 = v83[1 + 1];
												v81[v1829] = v81[v1829](v13(v81, v1829 + (1008 - (858 + 149)), v83[1 + 2]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v1828 = 12 - 3;
											end
											if (v1828 == (1507 - (829 + 678))) then
												v1829 = nil;
												v1829 = v83[2 + 0];
												v81[v1829] = v81[v1829](v13(v81, v1829 + (1217 - (143 + 1073)), v83[1818 - (898 + 917)]));
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[1472 - (882 + 587)]]] = v81[v83[4 + 0]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[266 - (140 + 124)]] = v83[3];
												v1828 = 1 + 0;
											end
											if ((3807 > 3095) and (v1828 == (1544 - (1105 + 430)))) then
												v81[v83[5 - 3]][v81[v83[3]]] = v81[v83[13 - 9]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[4 - 1];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[2 + 1]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1828 = 2 + 8;
											end
											if (v1828 == 25) then
												v83 = v71[v75];
												v81[v83[1993 - (1047 + 944)]] = v83[1305 - (206 + 1096)];
												v75 = v75 + (195 - (30 + 164));
												v83 = v71[v75];
												v1829 = v83[8 - 6];
												v81[v1829] = v81[v1829](v13(v81, v1829 + 1 + 0, v83[1477 - (1383 + 91)]));
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[3 - 1]][v81[v83[1663 - (1174 + 486)]]] = v81[v83[431 - (172 + 255)]];
												v1828 = 81 - 55;
											end
											if ((17 == 17) and (v1828 == 20)) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1530 - (594 + 934)]] = v81[v83[571 - (211 + 357)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[1417 - (159 + 1255)];
												v1828 = 19 + 2;
											end
											if ((v1828 == (805 - (24 + 753))) or (3081 >= 4287)) then
												v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[4 - 0]];
												break;
											end
											if ((v1828 == 24) or (897 > 3112)) then
												v83 = v71[v75];
												v81[v83[2]] = v83[1135 - (898 + 234)];
												v75 = v75 + (536 - (333 + 202));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[2 + 1]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[3];
												v75 = v75 + 1;
												v1828 = 1304 - (1018 + 261);
											end
										end
									else
										local v1830;
										local v1831;
										local v1832;
										v81[v83[4 - 2]] = v83[134 - (93 + 38)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[4 + 0]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[7 - 5]] = {};
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[9 - 7]] = v83[6 - 3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3 - 0]][v81[v83[3 + 1]]];
										v75 = v75 + (421 - (14 + 406));
										v83 = v71[v75];
										v1832 = v83[2];
										v1831 = v81[v1832];
										v1830 = v83[3];
										for v3935 = 1, v1830 do
											v1831[v3935] = v81[v1832 + v3935];
										end
									end
								elseif (v84 <= 78) then
									if (v84 == (152 - 75)) then
										v81[v83[2]] = v61[v83[10 - 7]];
									else
										local v1848;
										local v1849;
										local v1850;
										v81[v83[2]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[1633 - (20 + 1610)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[8 - 5]][v81[v83[4]]];
										v75 = v75 + (518 - (243 + 274));
										v83 = v71[v75];
										v81[v83[1624 - (1437 + 185)]] = {};
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[3 + 0]][v81[v83[1 + 3]]];
										v75 = v75 + (817 - (326 + 490));
										v83 = v71[v75];
										v1850 = v83[2 + 0];
										v1849 = v81[v1850];
										v1848 = v83[206 - (181 + 22)];
										for v3938 = 76 - (35 + 40), v1848 do
											v1849[v3938] = v81[v1850 + v3938];
										end
									end
								elseif (v84 > (316 - 237)) then
									local v1864 = 0 - 0;
									local v1865;
									local v1866;
									local v1867;
									while true do
										if (v1864 == (1 + 0)) then
											v81[v83[880 - (297 + 581)]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v1864 = 2;
										end
										if (v1864 == 2) then
											v81[v83[1 + 1]] = v83[3 - 0];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1864 = 2 + 1;
										end
										if (v1864 == 0) then
											v1865 = nil;
											v1866 = nil;
											v1867 = nil;
											v1864 = 3 - 2;
										end
										if (v1864 == (17 - 13)) then
											v81[v83[1739 - (1505 + 232)]] = {};
											v75 = v75 + (1319 - (415 + 903));
											v83 = v71[v75];
											v1864 = 13 - 8;
										end
										if (v1864 == (9 - 3)) then
											v81[v83[2]] = v81[v83[3]][v81[v83[721 - (155 + 562)]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1864 = 124 - (71 + 46);
										end
										if ((v1864 == 8) or (2756 == 4341)) then
											for v7027 = 1 - 0, v1865 do
												v1866[v7027] = v81[v1867 + v7027];
											end
											break;
										end
										if (v1864 == 3) then
											v81[v83[687 - (436 + 249)]] = v81[v83[1624 - (56 + 1565)]][v81[v83[2 + 2]]];
											v75 = v75 + (985 - (80 + 904));
											v83 = v71[v75];
											v1864 = 1 + 3;
										end
										if ((3167 == 3167) and (v1864 == (807 - (595 + 205)))) then
											v1867 = v83[4 - 2];
											v1866 = v81[v1867];
											v1865 = v83[7 - 4];
											v1864 = 6 + 2;
										end
										if (v1864 == (3 + 2)) then
											v81[v83[6 - 4]] = v83[2 + 1];
											v75 = v75 + (666 - (400 + 265));
											v83 = v71[v75];
											v1864 = 11 - 5;
										end
									end
								else
									local v1868;
									local v1869;
									local v1870;
									v81[v83[1 + 1]] = {};
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[1674 - (962 + 709)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3 + 0]][v81[v83[15 - 11]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = {};
									v75 = v75 + (782 - (636 + 145));
									v83 = v71[v75];
									v81[v83[2]] = v83[298 - (282 + 13)];
									v75 = v75 + (1149 - (366 + 782));
									v83 = v71[v75];
									v81[v83[91 - (10 + 79)]] = v81[v83[1710 - (1297 + 410)]][v81[v83[13 - 9]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v1870 = v83[280 - (262 + 16)];
									v1869 = v81[v1870];
									v1868 = v83[6 - 3];
									for v3941 = 1, v1868 do
										v1869[v3941] = v81[v1870 + v3941];
									end
								end
							elseif ((2333 > 446) and (v84 <= (59 + 34))) then
								if (v84 <= (11 + 75)) then
									if (v84 <= (1933 - (1056 + 794))) then
										if (v84 <= (1429 - (741 + 607))) then
											local v295 = 1756 - (730 + 1026);
											while true do
												if (v295 == (1797 - (248 + 1545))) then
													v81[v83[994 - (191 + 801)]][v81[v83[14 - 11]]] = v81[v83[4]];
													v75 = v75 + (561 - (478 + 82));
													v83 = v71[v75];
													v295 = 5;
												end
												if ((v295 == (1709 - (434 + 1273))) or (3273 < 837)) then
													v81[v83[2]] = v81[v83[8 - 5]][v81[v83[4 + 0]]];
													v75 = v75 + (4 - 3);
													v83 = v71[v75];
													v295 = 576 - (349 + 224);
												end
												if (v295 == (871 - (275 + 589))) then
													v81[v83[3 - 1]] = v81[v83[3]][v81[v83[6 - 2]]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v295 = 1540 - (1064 + 468);
												end
												if (v295 == 9) then
													v81[v83[2 + 0]] = v83[2 + 1];
													break;
												end
												if (0 == v295) then
													v81[v83[8 - 6]][v81[v83[3]]] = v81[v83[707 - (676 + 27)]];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v295 = 1428 - (48 + 1379);
												end
												if (v295 == (5 + 0)) then
													v81[v83[1 + 1]][v81[v83[5 - 2]]] = v81[v83[3 + 1]];
													v75 = v75 + (116 - (79 + 36));
													v83 = v71[v75];
													v295 = 6;
												end
												if (v295 == (20 - 14)) then
													v81[v83[1 + 1]] = v83[2 + 1];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v295 = 6 + 1;
												end
												if ((2301 <= 4642) and ((18 - 10) == v295)) then
													v81[v83[1 + 1]] = {};
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v295 = 9;
												end
												if (v295 == (1017 - (631 + 383))) then
													v81[v83[1637 - (445 + 1190)]] = v83[3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v295 = 4;
												end
												if (v295 == (1426 - (810 + 615))) then
													v81[v83[2]] = v83[1297 - (819 + 475)];
													v75 = v75 + (1336 - (243 + 1092));
													v83 = v71[v75];
													v295 = 2;
												end
											end
										elseif (v84 == 82) then
											if not v81[v83[5 - 3]] then
												v75 = v75 + 1 + 0;
											else
												v75 = v83[3 + 0];
											end
										else
											local v1883;
											v81[v83[1 + 1]] = v81[v83[3 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - 1];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1883 = v83[526 - (119 + 405)];
											v81[v1883] = v81[v1883](v13(v81, v1883 + (2 - 1), v83[10 - 7]));
											v75 = v75 + (610 - (352 + 257));
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[1167 - (88 + 1075)]];
											v75 = v75 + (1072 - (477 + 594));
											v83 = v71[v75];
											v81[v83[725 - (328 + 395)]] = v83[507 - (164 + 340)];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[7 - 4]];
											v75 = v75 + (1230 - (1008 + 221));
											v83 = v71[v75];
											v81[v83[1513 - (1025 + 486)]] = v83[6 - 3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[8 - 5];
											v75 = v75 + (220 - (108 + 111));
											v83 = v71[v75];
											v1883 = v83[100 - (82 + 16)];
											v81[v1883] = v81[v1883](v13(v81, v1883 + (1730 - (533 + 1196)), v83[4 - 1]));
											v75 = v75 + (213 - (161 + 51));
											v83 = v71[v75];
											v81[v83[436 - (294 + 140)]][v81[v83[12 - 9]]] = v81[v83[842 - (717 + 121)]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1 + 2];
											v75 = v75 + (1711 - (1001 + 709));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[1123 - (242 + 878)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1785 - (1395 + 388)]] = v83[2 + 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1883 = v83[2];
											v81[v1883] = v81[v1883](v13(v81, v1883 + 1 + 0, v83[1950 - (1289 + 658)]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]][v81[v83[3 + 0]]] = v81[v83[4 + 0]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1978 - (337 + 1639)]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[5 - 2]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1740 - (630 + 1107)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v1883 = v83[2];
											v81[v1883] = v81[v1883](v13(v81, v1883 + 1 + 0, v83[3 + 0]));
											v75 = v75 + (62 - (13 + 48));
											v83 = v71[v75];
											v81[v83[701 - (658 + 41)]][v81[v83[5 - 2]]] = v81[v83[4]];
											v75 = v75 + (1908 - (1591 + 316));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1 + 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[3];
											v75 = v75 + (1277 - (1241 + 35));
											v83 = v71[v75];
											v81[v83[42 - (18 + 22)]] = v83[3 - 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1883 = v83[2];
											v81[v1883] = v81[v1883](v13(v81, v1883 + 1 + 0, v83[1305 - (697 + 605)]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[6 - 3]]] = v81[v83[333 - (188 + 141)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[8 - 6]] = v83[6 - 3];
											v75 = v75 + (951 - (34 + 916));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1740 - (357 + 1380)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1929 - (178 + 1749)]] = v83[8 - 5];
											v75 = v75 + (1416 - (142 + 1273));
											v83 = v71[v75];
											v1883 = v83[595 - (284 + 309)];
											v81[v1883] = v81[v1883](v13(v81, v1883 + 1 + 0, v83[693 - (622 + 68)]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[4 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1900 - (855 + 1043)]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[6 - 4]] = v81[v83[9 - 6]];
											v75 = v75 + (780 - (576 + 203));
											v83 = v71[v75];
											v81[v83[2]] = v83[7 - 4];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1986 - (709 + 1275)]] = v83[3 + 0];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v1883 = v83[7 - 5];
											v81[v1883] = v81[v1883](v13(v81, v1883 + 1, v83[121 - (31 + 87)]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[3]]] = v81[v83[135 - (44 + 87)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v83[3 + 0];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[8 - 5];
											v75 = v75 + (787 - (284 + 502));
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + (1187 - (124 + 1062));
											v83 = v71[v75];
											v1883 = v83[1029 - (847 + 180)];
											v81[v1883] = v81[v1883](v13(v81, v1883 + 1 + 0, v83[12 - 9]));
											v75 = v75 + (1364 - (369 + 994));
											v83 = v71[v75];
											v81[v83[965 - (583 + 380)]][v81[v83[1 + 2]]] = v81[v83[3 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[1976 - (1085 + 888)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[3]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v83[13 - 10];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1883 = v83[1 + 1];
											v81[v1883] = v81[v1883](v13(v81, v1883 + 1, v83[4 - 1]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[3 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[217 - (153 + 61)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[946 - (704 + 239)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1388 - (740 + 646)]] = v83[2 + 1];
											v75 = v75 + (1923 - (1547 + 375));
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1883 = v83[405 - (211 + 192)];
											v81[v1883] = v81[v1883](v13(v81, v1883 + (4 - 3), v83[4 - 1]));
											v75 = v75 + (782 - (425 + 356));
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[7 - 4]]] = v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1568 - (83 + 1483)]] = v83[3];
											v75 = v75 + (1273 - (123 + 1149));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (1581 - (908 + 672));
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (514 - (206 + 307));
											v83 = v71[v75];
											v1883 = v83[2 + 0];
											v81[v1883] = v81[v1883](v13(v81, v1883 + 1, v83[65 - (18 + 44)]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]][v81[v83[6 - 3]]] = v81[v83[1 + 3]];
											v75 = v75 + (936 - (226 + 709));
											v83 = v71[v75];
											v81[v83[728 - (235 + 491)]] = v83[4 - 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1301 - (463 + 836)]] = v81[v83[407 - (166 + 238)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[3 + 0];
											v75 = v75 + (1442 - (1080 + 361));
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v1883 = v83[1 + 1];
											v81[v1883] = v81[v1883](v13(v81, v1883 + (1 - 0), v83[303 - (254 + 46)]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]][v81[v83[259 - (37 + 219)]]] = v81[v83[4]];
											v75 = v75 + (1900 - (1330 + 569));
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[4 - 1];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[673 - (128 + 542)]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[10 - 7];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[10 - 7];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v1883 = v83[2 + 0];
											v81[v1883] = v81[v1883](v13(v81, v1883 + (1 - 0), v83[3 + 0]));
											v75 = v75 + (813 - (96 + 716));
											v83 = v71[v75];
											v81[v83[1609 - (85 + 1522)]][v81[v83[3]]] = v81[v83[857 - (724 + 129)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[376 - (83 + 290)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[5 - 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
										end
									elseif ((v84 <= (34 + 50)) or (4191 <= 2183)) then
										local v296 = 0 - 0;
										local v297;
										local v298;
										local v299;
										while true do
											if (v296 == (2 + 2)) then
												v81[v83[3 - 1]] = v83[5 - 2];
												v75 = v75 + 1;
												v83 = v71[v75];
												v296 = 452 - (190 + 257);
											end
											if (v296 == (591 - (402 + 189))) then
												v297 = nil;
												v298 = nil;
												v299 = nil;
												v296 = 1 + 0;
											end
											if ((2056 <= 2503) and ((571 - (90 + 476)) == v296)) then
												v81[v83[816 - (688 + 126)]] = v81[v83[2 + 1]][v81[v83[1 + 3]]];
												v75 = v75 + (500 - (34 + 465));
												v83 = v71[v75];
												v296 = 25 - 19;
											end
											if ((v296 == (6 - 3)) or (2194 > 3745)) then
												v81[v83[2 + 0]] = {};
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v296 = 4;
											end
											if (v296 == (15 - 9)) then
												v299 = v83[2 + 0];
												v298 = v81[v299];
												v297 = v83[5 - 2];
												v296 = 1814 - (587 + 1220);
											end
											if (2 == v296) then
												v81[v83[2]] = v81[v83[1895 - (1211 + 681)]][v81[v83[81 - (64 + 13)]]];
												v75 = v75 + (656 - (121 + 534));
												v83 = v71[v75];
												v296 = 806 - (622 + 181);
											end
											if (v296 == (1 + 0)) then
												v81[v83[1671 - (296 + 1373)]] = v83[1 + 2];
												v75 = v75 + 1;
												v83 = v71[v75];
												v296 = 2;
											end
											if ((4482 == 4482) and (v296 == 7)) then
												for v4624 = 1, v297 do
													v298[v4624] = v81[v299 + v4624];
												end
												break;
											end
										end
									elseif (v84 == (27 + 58)) then
										local v1964;
										local v1965;
										local v1966;
										v81[v83[1 + 1]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1616 - (143 + 1471)]] = v83[9 - 6];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[183 - (103 + 77)]][v81[v83[3 + 1]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1159 - (895 + 262)]] = {};
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3];
										v75 = v75 + (1627 - (581 + 1045));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1278 - (582 + 693)]][v81[v83[1190 - (454 + 732)]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v1966 = v83[1 + 1];
										v1965 = v81[v1966];
										v1964 = v83[4 - 1];
										for v3989 = 1 - 0, v1964 do
											v1965[v3989] = v81[v1966 + v3989];
										end
									else
										local v1981 = 650 - (367 + 283);
										local v1982;
										while true do
											if (v1981 == (93 - (7 + 61))) then
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[6 - 3];
												break;
											end
											if (v1981 == 8) then
												v81[v83[1 + 1]] = v83[681 - (332 + 346)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[3];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v1982 = v83[7 - 5];
												v81[v1982] = v81[v1982](v13(v81, v1982 + 1, v83[3]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1981 = 11 - 2;
											end
											if (v1981 == (18 + 2)) then
												v1982 = v83[1 + 1];
												v81[v1982] = v81[v1982](v13(v81, v1982 + (1 - 0), v83[6 - 3]));
												v75 = v75 + (1855 - (815 + 1039));
												v83 = v71[v75];
												v81[v83[2]][v81[v83[779 - (336 + 440)]]] = v81[v83[4 + 0]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1981 = 52 - 31;
											end
											if (v1981 == (430 - (222 + 208))) then
												v1982 = nil;
												v81[v83[1 + 1]] = v81[v83[3]];
												v75 = v75 + (831 - (652 + 178));
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[8 - 5];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[397 - (259 + 135)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1981 = 1461 - (1393 + 67);
											end
											if (v1981 == 7) then
												v83 = v71[v75];
												v81[v83[2 + 0]][v81[v83[1451 - (1129 + 319)]]] = v81[v83[4]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3 - 0];
												v75 = v75 + (413 - (137 + 275));
												v83 = v71[v75];
												v81[v83[441 - (140 + 299)]] = v81[v83[1104 - (421 + 680)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1981 = 39 - 31;
											end
											if ((v1981 == (63 - 42)) or (2502 >= 4437)) then
												v81[v83[4 - 2]] = v81[v83[2 + 1]];
												v75 = v75 + (541 - (58 + 482));
												v83 = v71[v75];
												v81[v83[681 - (310 + 369)]] = v83[3 + 0];
												v75 = v75 + (287 - (274 + 12));
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1982 = v83[1764 - (681 + 1081)];
												v1981 = 22;
											end
											if (v1981 == (54 - 38)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v1982 = v83[3 - 1];
												v81[v1982] = v81[v1982](v13(v81, v1982 + (2 - 1), v83[880 - (842 + 35)]));
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[1869 - (180 + 1687)]][v81[v83[6 - 3]]] = v81[v83[975 - (269 + 702)]];
												v75 = v75 + (815 - (776 + 38));
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v1981 = 8 + 9;
											end
											if ((4470 > 1426) and (v1981 == (1 - 0))) then
												v1982 = v83[1 + 1];
												v81[v1982] = v81[v1982](v13(v81, v1982 + 1, v83[1 + 2]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[9 - 5]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[11 - 8];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1981 = 2;
											end
											if ((v1981 == (965 - (135 + 820))) or (4263 > 4449)) then
												v75 = v75 + (137 - (118 + 18));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[14 - 11];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1982 = v83[2];
												v81[v1982] = v81[v1982](v13(v81, v1982 + 1 + 0, v83[3 + 0]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[1297 - (741 + 552)]];
												v1981 = 11;
											end
											if ((v1981 == (1 + 5)) or (531 >= 4703)) then
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[3 + 0];
												v75 = v75 + (885 - (779 + 105));
												v83 = v71[v75];
												v81[v83[1783 - (1451 + 330)]] = v83[3];
												v75 = v75 + (1870 - (1259 + 610));
												v83 = v71[v75];
												v1982 = v83[852 - (4 + 846)];
												v81[v1982] = v81[v1982](v13(v81, v1982 + (1858 - (1108 + 749)), v83[3]));
												v75 = v75 + 1;
												v1981 = 1748 - (1301 + 440);
											end
											if (v1981 == 17) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[1 + 2]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[478 - (168 + 308)]] = v83[5 - 2];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1349 - (469 + 878)]] = v83[3 + 0];
												v75 = v75 + (3 - 2);
												v1981 = 8 + 10;
											end
											if (v1981 == 24) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[4 - 2]][v81[v83[3 + 0]]] = v81[v83[4]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[1842 - (1332 + 508)]] = v83[1 + 2];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[3]];
												v75 = v75 + (1143 - (650 + 492));
												v1981 = 25;
											end
											if ((1728 < 1775) and (v1981 == (819 - (689 + 117)))) then
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1925 - (794 + 1129)]] = v81[v83[3 + 0]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[863 - (553 + 308)]] = v83[5 - 2];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1981 = 5 + 9;
											end
											if (v1981 == (1783 - (1764 + 4))) then
												v81[v83[519 - (121 + 396)]] = v83[557 - (498 + 56)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3 + 0]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[3 - 0];
												v1981 = 6 + 10;
											end
											if (v1981 == (44 - 25)) then
												v83 = v71[v75];
												v81[v83[1618 - (316 + 1300)]] = v81[v83[175 - (78 + 94)]];
												v75 = v75 + (1417 - (261 + 1155));
												v83 = v71[v75];
												v81[v83[1458 - (1040 + 416)]] = v83[46 - (29 + 14)];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[964 - (928 + 34)]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1981 = 20;
											end
											if (v1981 == (1 + 11)) then
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[10 - 7];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1982 = v83[2];
												v81[v1982] = v81[v1982](v13(v81, v1982 + (2 - 1), v83[4 - 1]));
												v75 = v75 + (511 - (69 + 441));
												v83 = v71[v75];
												v81[v83[4 - 2]][v81[v83[2 + 1]]] = v81[v83[8 - 4]];
												v75 = v75 + (1881 - (517 + 1363));
												v1981 = 941 - (802 + 126);
											end
											if (v1981 == (1686 - (1660 + 8))) then
												v83 = v71[v75];
												v1982 = v83[7 - 5];
												v81[v1982] = v81[v1982](v13(v81, v1982 + (182 - (38 + 143)), v83[8 - 5]));
												v75 = v75 + (118 - (29 + 88));
												v83 = v71[v75];
												v81[v83[2]][v81[v83[3]]] = v81[v83[7 - 3]];
												v75 = v75 + (490 - (308 + 181));
												v83 = v71[v75];
												v81[v83[1399 - (537 + 860)]] = v83[3];
												v75 = v75 + 1 + 0;
												v1981 = 1114 - (691 + 404);
											end
											if (v1981 == (1977 - (870 + 1084))) then
												v75 = v75 + (130 - (47 + 82));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[9 - 6];
												v75 = v75 + (118 - (84 + 33));
												v83 = v71[v75];
												v1982 = v83[1 + 1];
												v81[v1982] = v81[v1982](v13(v81, v1982 + (3 - 2), v83[1 + 2]));
												v1981 = 24;
											end
											if (v1981 == (54 - 32)) then
												v81[v1982] = v81[v1982](v13(v81, v1982 + (2 - 1), v83[3]));
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v81[v83[2]][v81[v83[3 - 0]]] = v81[v83[1224 - (87 + 1133)]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3 + 0];
												v75 = v75 + (668 - (205 + 462));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3]];
												v1981 = 8 + 15;
											end
											if (11 == v1981) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[1383 - (1035 + 346)]] = v83[2 + 1];
												v75 = v75 + (1781 - (970 + 810));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[8 - 5]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[7 - 4];
												v75 = v75 + (3 - 2);
												v1981 = 1400 - (601 + 787);
											end
											if (v1981 == 5) then
												v75 = v75 + (611 - (256 + 354));
												v83 = v71[v75];
												v81[v83[3 - 1]][v81[v83[11 - 8]]] = v81[v83[10 - 6]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[6 - 3];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[3 - 1]] = v81[v83[6 - 3]];
												v75 = v75 + (573 - (259 + 313));
												v1981 = 9 - 3;
											end
											if (v1981 == (1 + 3)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[1 + 2];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[1341 - (413 + 925)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1982 = v83[2];
												v81[v1982] = v81[v1982](v13(v81, v1982 + 1 + 0, v83[1 + 2]));
												v1981 = 18 - 13;
											end
											if (v1981 == (23 - 9)) then
												v81[v83[2]] = v83[2 + 1];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v1982 = v83[2];
												v81[v1982] = v81[v1982](v13(v81, v1982 + 1, v83[1947 - (1164 + 780)]));
												v75 = v75 + (1361 - (596 + 764));
												v83 = v71[v75];
												v81[v83[2]][v81[v83[285 - (52 + 230)]]] = v81[v83[13 - 9]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v1981 = 1581 - (806 + 760);
											end
											if (v1981 == 9) then
												v81[v83[5 - 3]][v81[v83[4 - 1]]] = v81[v83[5 - 1]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[11 - 8];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[1 + 2]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[1968 - (1000 + 965)];
												v1981 = 6 + 4;
											end
											if ((3 == v1981) or (1244 == 3167)) then
												v81[v1982] = v81[v1982](v13(v81, v1982 + (4 - 3), v83[8 - 5]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]][v81[v83[1129 - (261 + 865)]]] = v81[v83[11 - 7]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[2 + 1];
												v75 = v75 + (546 - (33 + 512));
												v83 = v71[v75];
												v81[v83[1838 - (1555 + 281)]] = v81[v83[6 - 3]];
												v1981 = 3 + 1;
											end
											if ((504 <= 1762) and ((2 - 0) == v1981)) then
												v81[v83[2]] = v81[v83[3 + 0]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[41 - (34 + 5)]] = v83[3 + 0];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v1982 = v83[2 + 0];
												v1981 = 2 + 1;
											end
										end
									end
								elseif (v84 <= (29 + 60)) then
									if (v84 <= (282 - 195)) then
										local v300 = 0 - 0;
										local v301;
										local v302;
										local v303;
										while true do
											if (v300 == (1224 - (999 + 222))) then
												v81[v83[1 + 1]] = {};
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[346 - (166 + 178)]] = v83[1 + 2];
												v300 = 11 - 7;
											end
											if ((v300 == (1300 - (587 + 713))) or (3775 <= 2976)) then
												v301 = nil;
												v302 = nil;
												v303 = nil;
												v81[v83[2 + 0]] = {};
												v300 = 1123 - (11 + 1111);
											end
											if (((3 + 2) == v300) or (2783 < 621)) then
												v83 = v71[v75];
												v303 = v83[2 + 0];
												v302 = v81[v303];
												v301 = v83[3];
												v300 = 6;
											end
											if (v300 == 1) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[1103 - (882 + 218)];
												v75 = v75 + 1 + 0;
												v300 = 2;
											end
											if (v300 == 6) then
												for v4627 = 963 - (115 + 847), v301 do
													v302[v4627] = v81[v303 + v4627];
												end
												break;
											end
											if ((1723 < 4326) and (v300 == (5 - 3))) then
												v83 = v71[v75];
												v81[v83[1617 - (1231 + 384)]] = v81[v83[3]][v81[v83[8 - 4]]];
												v75 = v75 + (1697 - (1202 + 494));
												v83 = v71[v75];
												v300 = 3;
											end
											if ((v300 == (182 - (12 + 166))) or (121 > 4474)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[4 - 2]] = v81[v83[3 + 0]][v81[v83[4]]];
												v75 = v75 + (605 - (202 + 402));
												v300 = 4 + 1;
											end
										end
									elseif ((v84 == (1086 - (936 + 62))) or (1417 == 784)) then
										local v1983 = 348 - (119 + 229);
										local v1984;
										while true do
											if ((0 - 0) == v1983) then
												v1984 = v83[7 - 5];
												do
													return v13(v81, v1984, v76);
												end
												break;
											end
										end
									else
										local v1985 = v83[1 + 1];
										v81[v1985](v13(v81, v1985 + (2 - 1), v76));
									end
								elseif (v84 <= (1527 - (513 + 923))) then
									if ((70 <= 1818) and (v84 > 90)) then
										local v1986 = 1777 - (507 + 1270);
										while true do
											if (v1986 == (3 + 3)) then
												v81[v83[2]] = {};
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[11 - 8];
												break;
											end
											if (((5 - 1) == v1986) or (1470 <= 480)) then
												v75 = v75 + (770 - (644 + 125));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + (1848 - (718 + 1129));
												v1986 = 5 + 0;
											end
											if (v1986 == (15 - 10)) then
												v83 = v71[v75];
												v81[v83[1411 - (564 + 845)]] = v81[v83[3]][v81[v83[10 - 6]]];
												v75 = v75 + (163 - (46 + 116));
												v83 = v71[v75];
												v1986 = 656 - (575 + 75);
											end
											if (v1986 == (2 - 1)) then
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[6 - 4]] = v81[v83[2 + 1]][v81[v83[4]]];
												v75 = v75 + 1 + 0;
												v1986 = 2;
											end
											if (v1986 == 2) then
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3 + 0];
												v75 = v75 + (671 - (224 + 446));
												v83 = v71[v75];
												v1986 = 1 + 2;
											end
											if ((0 + 0) == v1986) then
												v81[v83[6 - 4]][v81[v83[3]]] = v81[v83[322 - (56 + 262)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[10 - 7];
												v1986 = 702 - (666 + 35);
											end
											if (v1986 == (8 - 5)) then
												v81[v83[1182 - (553 + 627)]][v81[v83[1476 - (936 + 537)]]] = v81[v83[1 + 3]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]][v81[v83[3]]] = v81[v83[1204 - (737 + 463)]];
												v1986 = 3 + 1;
											end
										end
									else
										local v1987;
										local v1988;
										local v1989;
										v81[v83[669 - (424 + 243)]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[1349 - (1213 + 133)]][v81[v83[4]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[62 - (37 + 23)]] = v83[3];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1345 - (122 + 1221)]] = v81[v83[245 - (139 + 103)]][v81[v83[1 + 3]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v1989 = v83[2 - 0];
										v1988 = v81[v1989];
										v1987 = v83[2 + 1];
										for v4010 = 1 + 0, v1987 do
											v1988[v4010] = v81[v1989 + v4010];
										end
									end
								elseif (v84 > 92) then
									local v2002 = v83[2];
									v81[v2002] = v81[v2002](v13(v81, v2002 + 1 + 0, v83[109 - (9 + 97)]));
								else
									local v2004 = 0;
									local v2005;
									local v2006;
									local v2007;
									while true do
										if (v2004 == (9 - 4)) then
											v83 = v71[v75];
											v2007 = v83[2];
											v2006 = v81[v2007];
											v2005 = v83[3];
											v2004 = 3 + 3;
										end
										if (v2004 == (4 + 2)) then
											for v7030 = 1, v2005 do
												v2006[v7030] = v81[v2007 + v7030];
											end
											break;
										end
										if ((2047 < 4750) and (v2004 == (4 + 0))) then
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1077 - (657 + 418)]] = v81[v83[3]][v81[v83[1984 - (448 + 1532)]]];
											v75 = v75 + (254 - (110 + 143));
											v2004 = 14 - 9;
										end
										if (v2004 == (946 - (549 + 394))) then
											v81[v83[2 + 0]] = {};
											v75 = v75 + (1235 - (500 + 734));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1 + 2];
											v2004 = 4;
										end
										if (v2004 == (1 + 1)) then
											v83 = v71[v75];
											v81[v83[667 - (343 + 322)]] = v81[v83[2 + 1]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2004 = 1 + 2;
										end
										if (1 == v2004) then
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (1132 - (297 + 834));
											v2004 = 9 - 7;
										end
										if ((846 >= 285) and ((0 + 0) == v2004)) then
											v2005 = nil;
											v2006 = nil;
											v2007 = nil;
											v81[v83[4 - 2]] = {};
											v2004 = 1 + 0;
										end
									end
								end
							elseif (v84 <= (88 + 12)) then
								if ((3663 == 3663) and (v84 <= (882 - (494 + 292)))) then
									if (v84 <= (10 + 84)) then
										local v304;
										local v305;
										local v306;
										v81[v83[9 - 7]] = v83[1635 - (888 + 744)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[687 - (206 + 479)]] = v81[v83[1 + 2]][v81[v83[1177 - (861 + 312)]]];
										v75 = v75 + (737 - (135 + 601));
										v83 = v71[v75];
										v81[v83[2]] = {};
										v75 = v75 + (1143 - (1085 + 57));
										v83 = v71[v75];
										v81[v83[1927 - (224 + 1701)]] = v83[1 + 2];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[9 - 6]][v81[v83[4 + 0]]];
										v75 = v75 + (747 - (730 + 16));
										v83 = v71[v75];
										v306 = v83[2];
										v305 = v81[v306];
										v304 = v83[3 + 0];
										for v733 = 1, v304 do
											v305[v733] = v81[v306 + v733];
										end
									elseif ((2359 >= 1909) and (v84 == (1677 - (790 + 792)))) then
										local v2008 = 1081 - (474 + 607);
										while true do
											if ((v2008 == (531 - (129 + 401))) or (2542 < 1166)) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[120 - (51 + 67)]] = v81[v83[1 + 2]][v81[v83[4]]];
												v75 = v75 + 1;
												v2008 = 115 - (93 + 20);
											end
											if ((23 - 17) == v2008) then
												v81[v83[22 - (12 + 8)]] = {};
												v75 = v75 + (199 - (161 + 37));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[1560 - (507 + 1050)];
												break;
											end
											if (v2008 == (9 - 4)) then
												v83 = v71[v75];
												v81[v83[3 - 1]] = v81[v83[2 + 1]][v81[v83[4]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2008 = 6;
											end
											if (v2008 == 0) then
												v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[2 + 2]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[866 - (184 + 680)]] = v83[3];
												v2008 = 1 + 0;
											end
											if ((11 - 7) == v2008) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[5 - 2];
												v75 = v75 + 1 + 0;
												v2008 = 1055 - (629 + 421);
											end
											if ((v2008 == (2 + 0)) or (2314 == 365)) then
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[6 - 3];
												v75 = v75 + (941 - (544 + 396));
												v83 = v71[v75];
												v2008 = 5 - 2;
											end
											if ((4693 > 796) and (v2008 == (994 - (904 + 87)))) then
												v81[v83[6 - 4]][v81[v83[1477 - (1443 + 31)]]] = v81[v83[9 - 5]];
												v75 = v75 + (1814 - (1110 + 703));
												v83 = v71[v75];
												v81[v83[4 - 2]][v81[v83[2 + 1]]] = v81[v83[10 - 6]];
												v2008 = 10 - 6;
											end
										end
									else
										local v2009 = 203 - (78 + 125);
										local v2010;
										while true do
											if ((4827 >= 973) and (v2009 == (60 - 40))) then
												v81[v83[3 - 1]][v83[4 - 1]] = v81[v83[4]];
												v75 = v75 + (1825 - (1392 + 432));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[7 - 4]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[1 + 2];
												v75 = v75 + (1403 - (963 + 439));
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[1328 - (76 + 1249)];
												v2009 = 21;
											end
											if (v2009 == 23) then
												v75 = v75 + (1752 - (1165 + 586));
												v83 = v71[v75];
												v81[v83[1930 - (1916 + 12)]][v83[1259 - (604 + 652)]] = v81[v83[7 - 3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v81[v83[1 + 2]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[3 - 0];
												v75 = v75 + 1;
												v2009 = 38 - 14;
											end
											if (v2009 == 21) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v2010 = v83[15 - (11 + 2)];
												v81[v2010] = v81[v2010](v13(v81, v2010 + 1, v83[1445 - (64 + 1378)]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[4 - 2]][v83[1756 - (256 + 1497)]] = v81[v83[4 - 0]];
												v75 = v75 + (878 - (562 + 315));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[11 - 8]];
												v2009 = 22;
											end
											if ((v2009 == (1195 - (577 + 611))) or (4282 == 2535)) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[5 - 3]][v83[4 - 1]] = v81[v83[75 - (58 + 13)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[3]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[457 - (404 + 50)];
												v75 = v75 + 1;
												v2009 = 44 - (6 + 30);
											end
											if ((2233 <= 4785) and (v2009 == (1336 - (770 + 563)))) then
												v81[v83[2 + 0]] = v83[1 + 2];
												v75 = v75 + (171 - (25 + 145));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[702 - (153 + 546)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2010 = v83[929 - (60 + 867)];
												v81[v2010] = v81[v2010](v13(v81, v2010 + 1, v83[10 - 7]));
												v75 = v75 + (1284 - (309 + 974));
												v83 = v71[v75];
												v2009 = 2 + 2;
											end
											if (((29 - 18) == v2009) or (401 == 1816)) then
												v81[v83[2]] = v83[1144 - (677 + 464)];
												v75 = v75 + (823 - (567 + 255));
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[3 - 0];
												v75 = v75 + (529 - (384 + 144));
												v83 = v71[v75];
												v2010 = v83[1223 - (1030 + 191)];
												v81[v2010] = v81[v2010](v13(v81, v2010 + (1 - 0), v83[4 - 1]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2009 = 869 - (326 + 531);
											end
											if (v2009 == (4 - 2)) then
												v2010 = v83[1 + 1];
												v81[v2010] = v81[v2010](v13(v81, v2010 + 1, v83[1 + 2]));
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1 + 1]][v83[3]] = v81[v83[4 + 0]];
												v75 = v75 + (1622 - (1367 + 254));
												v83 = v71[v75];
												v81[v83[680 - (305 + 373)]] = v81[v83[3]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v2009 = 322 - (129 + 190);
											end
											if (v2009 == (41 - 27)) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[291 - (210 + 79)]] = v83[3];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v2010 = v83[2];
												v81[v2010] = v81[v2010](v13(v81, v2010 + (2 - 1), v83[675 - (32 + 640)]));
												v2009 = 15;
											end
											if (((1 + 0) == v2009) or (4472 <= 2732)) then
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[1764 - (847 + 914)];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[6 - 3];
												v75 = v75 + (525 - (163 + 361));
												v83 = v71[v75];
												v2009 = 887 - (162 + 723);
											end
											if ((3648 < 3700) and (v2009 == (2 + 10))) then
												v81[v83[403 - (258 + 143)]][v83[12 - 9]] = v81[v83[4]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[7 - 5]] = v81[v83[1694 - (486 + 1205)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[168 - (92 + 73)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[3];
												v2009 = 11 + 2;
											end
											if (v2009 == (13 - 5)) then
												v83 = v71[v75];
												v81[v83[2]] = v83[275 - (68 + 204)];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v2010 = v83[1 + 1];
												v81[v2010] = v81[v2010](v13(v81, v2010 + 1 + 0, v83[14 - 11]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]][v83[3]] = v81[v83[3 + 1]];
												v75 = v75 + 1;
												v2009 = 8 + 1;
											end
											if (v2009 == (326 - (20 + 296))) then
												v2010 = v83[2 + 0];
												v81[v2010] = v81[v2010](v13(v81, v2010 + (4 - 3), v83[10 - 7]));
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2 + 0]][v83[3]] = v81[v83[1 + 3]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[2 + 1]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v2009 = 10 + 1;
											end
											if (v2009 == (10 + 9)) then
												v81[v83[5 - 3]] = v83[3];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[252 - (155 + 94)];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v2010 = v83[909 - (515 + 392)];
												v81[v2010] = v81[v2010](v13(v81, v2010 + (327 - (7 + 319)), v83[2 + 1]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v2009 = 7 + 13;
											end
											if (v2009 == (1515 - (292 + 1205))) then
												v2010 = v83[54 - (13 + 39)];
												v81[v2010] = v81[v2010](v13(v81, v2010 + 1 + 0, v83[9 - 6]));
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[1040 - (850 + 188)]][v83[1039 - (822 + 214)]] = v81[v83[1165 - (317 + 844)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[2 + 1]];
												v75 = v75 + (1191 - (508 + 682));
												v83 = v71[v75];
												v2009 = 10 + 9;
											end
											if (v2009 == (3 + 2)) then
												v75 = v75 + (546 - (127 + 418));
												v83 = v71[v75];
												v2010 = v83[5 - 3];
												v81[v2010] = v81[v2010](v13(v81, v2010 + (2 - 1), v83[3]));
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v81[v83[2 - 0]][v83[1123 - (690 + 430)]] = v81[v83[15 - 11]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[3]];
												v2009 = 6;
											end
											if (v2009 == (0 - 0)) then
												v2010 = nil;
												v81[v83[2]] = v83[955 - (637 + 315)];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v2010 = v83[5 - 3];
												v81[v2010] = v81[v2010](v13(v81, v2010 + (3 - 2), v83[3 + 0]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[4 - 2]][v83[23 - (13 + 7)]] = v81[v83[1 + 3]];
												v75 = v75 + 1;
												v2009 = 1 - 0;
											end
											if ((30 - 17) == v2009) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v2010 = v83[1 + 1];
												v81[v2010] = v81[v2010](v13(v81, v2010 + 1 + 0, v83[354 - (44 + 307)]));
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[799 - (127 + 670)]][v83[3 + 0]] = v81[v83[588 - (375 + 209)]];
												v75 = v75 + (1817 - (1673 + 143));
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[2 + 1]];
												v2009 = 1463 - (836 + 613);
											end
											if (25 == v2009) then
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[6 - 3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1532 - (295 + 1235)]] = v83[543 - (328 + 212)];
												break;
											end
											if ((1877 <= 2038) and (v2009 == (35 - 19))) then
												v83 = v71[v75];
												v81[v83[921 - (517 + 402)]] = v83[6 - 3];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v2010 = v83[1084 - (700 + 382)];
												v81[v2010] = v81[v2010](v13(v81, v2010 + (880 - (677 + 202)), v83[4 - 1]));
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]][v83[3 + 0]] = v81[v83[4]];
												v75 = v75 + (754 - (360 + 393));
												v2009 = 55 - 38;
											end
											if ((1061 < 2971) and (15 == v2009)) then
												v75 = v75 + (1958 - (1231 + 726));
												v83 = v71[v75];
												v81[v83[2 - 0]][v83[1913 - (173 + 1737)]] = v81[v83[1951 - (441 + 1506)]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[1 + 2]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[696 - (136 + 558)]] = v83[2 + 1];
												v75 = v75 + 1;
												v2009 = 1238 - (988 + 234);
											end
											if (v2009 == (11 + 11)) then
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[653 - (125 + 526)]] = v83[9 - 6];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[5 - 3]] = v83[1129 - (290 + 836)];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2010 = v83[3 - 1];
												v81[v2010] = v81[v2010](v13(v81, v2010 + (681 - (8 + 672)), v83[1 + 2]));
												v2009 = 1459 - (740 + 696);
											end
											if (v2009 == 6) then
												v75 = v75 + (1047 - (353 + 693));
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + (1494 - (35 + 1458));
												v83 = v71[v75];
												v81[v83[1872 - (1821 + 49)]] = v83[8 - 5];
												v75 = v75 + (1735 - (727 + 1007));
												v83 = v71[v75];
												v2010 = v83[169 - (165 + 2)];
												v81[v2010] = v81[v2010](v13(v81, v2010 + 1, v83[3]));
												v2009 = 1666 - (1028 + 631);
											end
											if ((1624 - (311 + 1304)) == v2009) then
												v83 = v71[v75];
												v81[v83[4 - 2]] = v81[v83[3]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[582 - (512 + 67)];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[1 + 2];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2009 = 13 - 3;
											end
											if ((12 - 8) == v2009) then
												v81[v83[1 + 1]][v83[3]] = v81[v83[4]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[5 - 3]] = v81[v83[1792 - (395 + 1394)]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v2009 = 14 - 9;
											end
											if (v2009 == (484 - (143 + 324))) then
												v83 = v71[v75];
												v81[v83[5 - 3]] = v81[v83[1 + 2]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[3];
												v75 = v75 + (1104 - (342 + 761));
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v2009 = 8 + 10;
											end
											if ((767 <= 2182) and (v2009 == 24)) then
												v83 = v71[v75];
												v81[v83[2 - 0]] = v83[4 - 1];
												v75 = v75 + 1;
												v83 = v71[v75];
												v2010 = v83[2];
												v81[v2010] = v81[v2010](v13(v81, v2010 + 1 + 0, v83[1160 - (889 + 268)]));
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]][v83[7 - 4]] = v81[v83[301 - (196 + 101)]];
												v75 = v75 + (1 - 0);
												v2009 = 73 - 48;
											end
										end
									end
								elseif (v84 <= (34 + 64)) then
									if (v84 == (313 - 216)) then
										local v2011;
										v81[v83[4 - 2]] = v83[8 - 5];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[1586 - (431 + 1152)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2011 = v83[2 + 0];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1, v83[347 - (107 + 237)]));
										v75 = v75 + (1801 - (690 + 1110));
										v83 = v71[v75];
										v81[v83[2]][v83[4 - 1]] = v81[v83[1501 - (1374 + 123)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[2 + 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1605 - (454 + 1149)]] = v83[5 - 2];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v2011 = v83[1 + 1];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1 + 0, v83[640 - (21 + 616)]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]][v83[3]] = v81[v83[1 + 3]];
										v75 = v75 + (438 - (125 + 312));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3 + 0]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[1111 - (266 + 842)];
										v75 = v75 + (639 - (395 + 243));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1038 - (383 + 652)];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v2011 = v83[2 + 0];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1 + 0, v83[646 - (114 + 529)]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v83[2 + 1]] = v81[v83[4]];
										v75 = v75 + (1190 - (352 + 837));
										v83 = v71[v75];
										v81[v83[8 - 6]] = v81[v83[553 - (465 + 85)]];
										v75 = v75 + (532 - (366 + 165));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[9 - 6];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3];
										v75 = v75 + (1666 - (521 + 1144));
										v83 = v71[v75];
										v2011 = v83[3 - 1];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1 + 0, v83[93 - (5 + 85)]));
										v75 = v75 + (1694 - (1547 + 146));
										v83 = v71[v75];
										v81[v83[6 - 4]][v83[3]] = v81[v83[321 - (272 + 45)]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[2 + 1]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[2 + 1];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[1299 - (997 + 299)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2011 = v83[1289 - (903 + 384)];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1 + 0, v83[1 + 2]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v83[5 - 2]] = v81[v83[4]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3 - 0]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[591 - (313 + 276)]] = v83[1 + 2];
										v75 = v75 + (329 - (168 + 160));
										v83 = v71[v75];
										v2011 = v83[1458 - (1452 + 4)];
										v81[v2011] = v81[v2011](v13(v81, v2011 + (4 - 3), v83[423 - (338 + 82)]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[575 - (133 + 440)]][v83[1 + 2]] = v81[v83[4]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + (1303 - (422 + 880));
										v83 = v71[v75];
										v81[v83[1982 - (365 + 1615)]] = v83[3 - 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2011 = v83[1354 - (479 + 873)];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1 + 0, v83[3]));
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[5 - 3]][v83[1 + 2]] = v81[v83[4 + 0]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1504 - (832 + 670)]] = v81[v83[9 - 6]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1249 - (707 + 540)]] = v83[62 - (18 + 41)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2011 = v83[2];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1 + 0, v83[1223 - (554 + 666)]));
										v75 = v75 + (501 - (438 + 62));
										v83 = v71[v75];
										v81[v83[1907 - (1497 + 408)]][v83[3 - 0]] = v81[v83[3 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[642 - (508 + 132)]] = v81[v83[9 - 6]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1209 - (49 + 1158)]] = v83[1 + 2];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3 + 0];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v2011 = v83[2];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1 + 0, v83[1224 - (460 + 761)]));
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]][v83[1 + 2]] = v81[v83[600 - (405 + 191)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1672 - (311 + 1359)]] = v83[3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2011 = v83[2];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1 + 0, v83[1 + 2]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v83[4 - 1]] = v81[v83[2 + 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[1 + 2];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[3 - 0];
										v75 = v75 + (1521 - (1408 + 112));
										v83 = v71[v75];
										v2011 = v83[2];
										v81[v2011] = v81[v2011](v13(v81, v2011 + (983 - (285 + 697)), v83[14 - 11]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1262 - (737 + 523)]][v83[3]] = v81[v83[18 - 14]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[847 - (789 + 55)]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[3 + 0];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v2011 = v83[2];
										v81[v2011] = v81[v2011](v13(v81, v2011 + (1883 - (1492 + 390)), v83[5 - 2]));
										v75 = v75 + (994 - (312 + 681));
										v83 = v71[v75];
										v81[v83[1913 - (1255 + 656)]][v83[1730 - (485 + 1242)]] = v81[v83[1 + 3]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[11 - 8]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[961 - (722 + 237)]] = v83[8 - 5];
										v75 = v75 + (717 - (77 + 639));
										v83 = v71[v75];
										v2011 = v83[5 - 3];
										v81[v2011] = v81[v2011](v13(v81, v2011 + (4 - 3), v83[5 - 2]));
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[5 - 3]][v83[3 + 0]] = v81[v83[1 + 3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]];
										v75 = v75 + (1360 - (888 + 471));
										v83 = v71[v75];
										v81[v83[1111 - (1034 + 75)]] = v83[1160 - (448 + 709)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[3];
										v75 = v75 + (1856 - (1643 + 212));
										v83 = v71[v75];
										v2011 = v83[2];
										v81[v2011] = v81[v2011](v13(v81, v2011 + (481 - (320 + 160)), v83[3]));
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[4 - 2]][v83[1 + 2]] = v81[v83[7 - 3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[138 - (114 + 22)]] = v81[v83[1 + 2]];
										v75 = v75 + (1060 - (89 + 970));
										v83 = v71[v75];
										v81[v83[1730 - (1083 + 645)]] = v83[169 - (50 + 116)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1964 - (1058 + 904)]] = v83[6 - 3];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v2011 = v83[7 - 5];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1, v83[8 - 5]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[198 - (94 + 102)]][v83[3]] = v81[v83[4 + 0]];
										v75 = v75 + (1265 - (735 + 529));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1154 - (875 + 276)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[982 - (461 + 518)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[8 - 5];
										v75 = v75 + (782 - (656 + 125));
										v83 = v71[v75];
										v2011 = v83[4 - 2];
										v81[v2011] = v81[v2011](v13(v81, v2011 + 1, v83[851 - (532 + 316)]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]][v83[3]] = v81[v83[4]];
										v75 = v75 + (255 - (150 + 104));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[8 - 5]];
									else
										local v2098;
										local v2099;
										local v2100;
										v81[v83[2]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1849 - (564 + 1283)]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[10 - 7];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1551 - (330 + 1218)]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2100 = v83[2 + 0];
										v2099 = v81[v2100];
										v2098 = v83[3 + 0];
										for v4013 = 1, v2098 do
											v2099[v4013] = v81[v2100 + v4013];
										end
									end
								elseif (v84 == (57 + 42)) then
									v81[v83[2 - 0]][v81[v83[2 + 1]]] = v81[v83[17 - 13]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1572 - (511 + 1058)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[9 - 5]]];
									v75 = v75 + (1499 - (1315 + 183));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[545 - (233 + 309)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[655 - (267 + 386)]][v81[v83[6 - 3]]] = v81[v83[857 - (744 + 109)]];
									v75 = v75 + (1551 - (1271 + 279));
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[1647 - (642 + 1002)]]] = v81[v83[1867 - (643 + 1220)]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[4 - 1];
									v75 = v75 + (1418 - (1063 + 354));
									v83 = v71[v75];
									v81[v83[832 - (739 + 91)]] = v81[v83[4 - 1]][v81[v83[4]]];
									v75 = v75 + (1878 - (790 + 1087));
									v83 = v71[v75];
									v81[v83[2]] = {};
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[7 - 4];
								else
									local v2129;
									local v2130;
									local v2131;
									v81[v83[6 - 4]] = {};
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[10 - 7];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[153 - (82 + 67)]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = {};
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1987 - (1835 + 150)]] = v83[3];
									v75 = v75 + (15 - (12 + 2));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1039 - (784 + 252)]][v81[v83[2 + 2]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v2131 = v83[2];
									v2130 = v81[v2131];
									v2129 = v83[3 + 0];
									for v4016 = 1385 - (1134 + 250), v2129 do
										v2130[v4016] = v81[v2131 + v4016];
									end
								end
							elseif ((4530 > 2836) and (v84 <= (68 + 35))) then
								if (v84 <= 101) then
									local v320;
									v320 = v83[1 + 1];
									v81[v320] = v81[v320](v13(v81, v320 + (1 - 0), v83[3 + 0]));
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[6 - 3]]] = v81[v83[1985 - (1940 + 41)]];
									v75 = v75 + (239 - (39 + 199));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[5 - 2];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[1932 - (313 + 1616)]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[5 - 2];
									v75 = v75 + (38 - (7 + 30));
									v83 = v71[v75];
									v81[v83[1188 - (961 + 225)]] = v83[12 - 9];
									v75 = v75 + 1;
									v83 = v71[v75];
									v320 = v83[2 + 0];
									v81[v320] = v81[v320](v13(v81, v320 + (841 - (281 + 559)), v83[8 - 5]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[1 + 2]]] = v81[v83[1 + 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1442 - (102 + 1338)]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[443 - (319 + 122)]] = v81[v83[3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[999 - (45 + 951)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v320 = v83[2 - 0];
									v81[v320] = v81[v320](v13(v81, v320 + 1, v83[1 + 2]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1377 - (684 + 691)]][v81[v83[3]]] = v81[v83[1648 - (1161 + 483)]];
									v75 = v75 + (967 - (245 + 721));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[44 - (31 + 11)]] = v81[v83[10 - 7]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[12 - 9];
									v75 = v75 + (837 - (179 + 657));
									v83 = v71[v75];
									v81[v83[2]] = v83[330 - (150 + 177)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v320 = v83[1207 - (142 + 1063)];
									v81[v320] = v81[v320](v13(v81, v320 + (1906 - (1346 + 559)), v83[1 + 2]));
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]][v81[v83[11 - 8]]] = v81[v83[4 + 0]];
									v75 = v75 + (1727 - (1695 + 31));
									v83 = v71[v75];
									v81[v83[2]] = v83[1 + 2];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1439 - (1073 + 364)]] = v81[v83[820 - (405 + 412)]];
									v75 = v75 + (650 - (518 + 131));
									v83 = v71[v75];
									v81[v83[1304 - (667 + 635)]] = v83[1 + 2];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[4 - 1];
									v75 = v75 + (1911 - (1397 + 513));
									v83 = v71[v75];
									v320 = v83[2 - 0];
									v81[v320] = v81[v320](v13(v81, v320 + 1, v83[1078 - (454 + 621)]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[1 + 2]]] = v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[600 - (417 + 181)]] = v83[4 - 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[9 - 7]] = v83[1123 - (995 + 125)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[2 + 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v320 = v83[2];
									v81[v320] = v81[v320](v13(v81, v320 + 1, v83[7 - 4]));
									v75 = v75 + (1326 - (754 + 571));
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[8 - 5]]] = v81[v83[2 + 2]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[11 - 8];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1494 - (1141 + 350)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[8 - 5];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[1 + 2];
									v75 = v75 + 1;
									v83 = v71[v75];
									v320 = v83[5 - 3];
									v81[v320] = v81[v320](v13(v81, v320 + 1 + 0, v83[3]));
									v75 = v75 + (1870 - (513 + 1356));
									v83 = v71[v75];
									v81[v83[1938 - (196 + 1740)]][v81[v83[3 - 0]]] = v81[v83[3 + 1]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[4 - 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[6 - 3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[7 - 4];
									v75 = v75 + (1632 - (362 + 1269));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[40 - (26 + 11)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v320 = v83[1 + 1];
									v81[v320] = v81[v320](v13(v81, v320 + 1 + 0, v83[1822 - (183 + 1636)]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3]]] = v81[v83[3 + 1]];
									v75 = v75 + (1231 - (1161 + 69));
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (1379 - (672 + 706));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[108 - (82 + 23)]];
									v75 = v75 + (1522 - (100 + 1421));
									v83 = v71[v75];
									v81[v83[782 - (61 + 719)]] = v83[3];
									v75 = v75 + (413 - (180 + 232));
									v83 = v71[v75];
									v81[v83[2]] = v83[3 + 0];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v320 = v83[4 - 2];
									v81[v320] = v81[v320](v13(v81, v320 + 1, v83[1784 - (728 + 1053)]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[561 - (427 + 132)]][v81[v83[3]]] = v81[v83[4 + 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[968 - (786 + 179)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[3 - 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1926 - (1685 + 239)]] = v83[6 - 3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v320 = v83[4 - 2];
									v81[v320] = v81[v320](v13(v81, v320 + (2 - 1), v83[8 - 5]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1179 - (457 + 720)]][v81[v83[7 - 4]]] = v81[v83[4]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v83[724 - (124 + 597)];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[566 - (414 + 150)]] = v81[v83[14 - 11]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[831 - (592 + 237)]] = v83[3 + 0];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[615 - (122 + 491)]] = v83[13 - 10];
									v75 = v75 + (286 - (116 + 169));
									v83 = v71[v75];
									v320 = v83[7 - 5];
									v81[v320] = v81[v320](v13(v81, v320 + 1 + 0, v83[3]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]][v81[v83[5 - 2]]] = v81[v83[1 + 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1232 - (477 + 753)]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3 + 0]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[1380 - (649 + 728)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[914 - (478 + 434)]] = v83[5 - 2];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v320 = v83[2];
									v81[v320] = v81[v320](v13(v81, v320 + (4 - 3), v83[3 + 0]));
									v75 = v75 + (1561 - (1329 + 231));
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[1913 - (1523 + 387)]]] = v81[v83[4]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1310 - (1013 + 294)];
									v75 = v75 + (1349 - (25 + 1323));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 + 0]];
									v75 = v75 + (1931 - (611 + 1319));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[5 - 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v320 = v83[3 - 1];
									v81[v320] = v81[v320](v13(v81, v320 + 1 + 0, v83[2 + 1]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[818 - (353 + 463)]][v81[v83[5 - 2]]] = v81[v83[3 + 1]];
									v75 = v75 + (1062 - (605 + 456));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[787 - (122 + 662)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1494 - (1184 + 308)]] = v81[v83[1171 - (445 + 723)]];
									v75 = v75 + (1641 - (1245 + 395));
									v83 = v71[v75];
									v81[v83[1129 - (191 + 936)]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[1 + 2];
									v75 = v75 + (259 - (90 + 168));
									v83 = v71[v75];
									v320 = v83[173 - (87 + 84)];
									v81[v320] = v81[v320](v13(v81, v320 + (1 - 0), v83[715 - (176 + 536)]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[1701 - (858 + 840)]]] = v81[v83[4]];
								elseif (v84 > (762 - (447 + 213))) then
									local v2144;
									v2144 = v83[1462 - (1458 + 2)];
									v81[v2144] = v81[v2144](v13(v81, v2144 + (4 - 3), v83[4 - 1]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3]]] = v81[v83[3 + 1]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[7 - 4];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[483 - (248 + 232)]];
									v75 = v75 + (231 - (109 + 121));
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1407 - (1288 + 116)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v2144 = v83[2 + 0];
									v81[v2144] = v81[v2144](v13(v81, v2144 + (237 - (212 + 24)), v83[2 + 1]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[1710 - (1175 + 532)]]] = v81[v83[4 + 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[571 - (252 + 317)]] = v81[v83[3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[805 - (738 + 65)]] = v83[3];
									v75 = v75 + (558 - (410 + 147));
									v83 = v71[v75];
									v81[v83[902 - (272 + 628)]] = v83[7 - 4];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v2144 = v83[170 - (62 + 106)];
									v81[v2144] = v81[v2144](v13(v81, v2144 + (2 - 1), v83[697 - (167 + 527)]));
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 - 0]][v81[v83[4 - 1]]] = v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1068 - (326 + 740)]] = v83[79 - (68 + 8)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1474 - (133 + 1338)]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[2 + 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v2144 = v83[5 - 3];
									v81[v2144] = v81[v2144](v13(v81, v2144 + (1988 - (1930 + 57)), v83[1 + 2]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[908 - (14 + 890)]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[6 - 3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[9 - 7]] = v81[v83[9 - 6]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[8 - 6]] = v83[3 + 0];
									v75 = v75 + (1782 - (755 + 1026));
									v83 = v71[v75];
									v81[v83[2]] = v83[8 - 5];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v2144 = v83[948 - (217 + 729)];
									v81[v2144] = v81[v2144](v13(v81, v2144 + 1 + 0, v83[3]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[3]]] = v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[11 - 8];
									v75 = v75 + (1681 - (619 + 1061));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[5 - 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[138 - (108 + 28)]] = v83[1930 - (191 + 1736)];
									v75 = v75 + (764 - (757 + 6));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[1258 - (337 + 918)];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v2144 = v83[1 + 1];
									v81[v2144] = v81[v2144](v13(v81, v2144 + 1 + 0, v83[3]));
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[1679 - (754 + 922)]]] = v81[v83[638 - (487 + 147)]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (1570 - (825 + 744));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[1 + 2];
									v75 = v75 + (250 - (150 + 99));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3];
									v75 = v75 + (1504 - (1335 + 168));
									v83 = v71[v75];
									v2144 = v83[941 - (256 + 683)];
									v81[v2144] = v81[v2144](v13(v81, v2144 + 1, v83[3]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[321 - (33 + 285)]]] = v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v83[5 - 2];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3 + 0]];
									v75 = v75 + (948 - (776 + 171));
									v83 = v71[v75];
									v81[v83[265 - (244 + 19)]] = v83[3];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[409 - (8 + 398)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v2144 = v83[2];
									v81[v2144] = v81[v2144](v13(v81, v2144 + (517 - (228 + 288)), v83[3 - 0]));
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[591 - (434 + 154)]]] = v81[v83[3 + 1]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[11 - 8];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1667 - (810 + 855)]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v2144 = v83[2 + 0];
									v81[v2144] = v81[v2144](v13(v81, v2144 + 1 + 0, v83[1 + 2]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[9 - 6]]] = v81[v83[1618 - (463 + 1151)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1977 - (29 + 1946)]] = v83[2 + 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]];
									v75 = v75 + (516 - (337 + 178));
									v83 = v71[v75];
									v81[v83[66 - (4 + 60)]] = v83[11 - 8];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1118 - (425 + 691)]] = v83[2001 - (354 + 1644)];
									v75 = v75 + (842 - (499 + 342));
									v83 = v71[v75];
									v2144 = v83[2 + 0];
									v81[v2144] = v81[v2144](v13(v81, v2144 + (161 - (65 + 95)), v83[3 + 0]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1641 - (1403 + 236)]][v81[v83[1363 - (1117 + 243)]]] = v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[245 - (67 + 175)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[734 - (387 + 344)]];
									v75 = v75 + (975 - (654 + 320));
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[3];
									v75 = v75 + (432 - (276 + 155));
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v2144 = v83[2 + 0];
									v81[v2144] = v81[v2144](v13(v81, v2144 + (775 - (65 + 709)), v83[2 + 1]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1746 - (884 + 860)]][v81[v83[3]]] = v81[v83[5 - 1]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[682 - (492 + 188)]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[1 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[3 + 0];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[3];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v2144 = v83[2 - 0];
									v81[v2144] = v81[v2144](v13(v81, v2144 + 1 + 0, v83[1 + 2]));
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[9 - 5]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[1 + 2];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1253 - (1190 + 61)]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v2144 = v83[2 + 0];
									v81[v2144] = v81[v2144](v13(v81, v2144 + (1694 - (1448 + 245)), v83[3 - 0]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[8 - 5]]] = v81[v83[9 - 5]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[3];
									v75 = v75 + (824 - (528 + 295));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1349 - (1224 + 123)]] = v83[1 + 2];
									v75 = v75 + (638 - (97 + 540));
									v83 = v71[v75];
									v81[v83[1970 - (484 + 1484)]] = v83[1555 - (1398 + 154)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v2144 = v83[4 - 2];
									v81[v2144] = v81[v2144](v13(v81, v2144 + 1, v83[3]));
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]][v81[v83[533 - (354 + 176)]]] = v81[v83[4]];
								else
									v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[1 + 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[1434 - (649 + 781)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[5 - 2];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[779 - (126 + 651)]][v81[v83[3]]] = v81[v83[8 - 4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[6 - 3]]] = v81[v83[11 - 7]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1031 - (179 + 850)]] = v81[v83[787 - (34 + 750)]][v81[v83[309 - (302 + 3)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]] = {};
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[7 - 4];
								end
							elseif (v84 <= (171 - 66)) then
								if (v84 == (184 - 80)) then
									local v2246;
									local v2247;
									local v2248;
									v81[v83[2 + 0]] = {};
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[107 - (56 + 48)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 + 0]][v81[v83[6 - 2]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[84 - (7 + 75)]] = {};
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v83[258 - (170 + 85)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[353 - (288 + 61)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v2248 = v83[2 + 0];
									v2247 = v81[v2248];
									v2246 = v83[3];
									for v4019 = 1 + 0, v2246 do
										v2247[v4019] = v81[v2248 + v4019];
									end
								else
									local v2262 = 0 + 0;
									while true do
										if ((v2262 == (2 - 1)) or (4885 <= 2758)) then
											v75 = v75 + (738 - (330 + 407));
											v83 = v71[v75];
											v81[v83[190 - (29 + 159)]] = v81[v83[5 - 2]][v81[v83[18 - 14]]];
											v75 = v75 + (1 - 0);
											v2262 = 2 + 0;
										end
										if (v2262 == (763 - (15 + 742))) then
											v81[v83[2]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											break;
										end
										if ((454 - (414 + 36)) == v2262) then
											v75 = v75 + (1507 - (745 + 761));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v2262 = 5;
										end
										if (v2262 == 0) then
											v81[v83[2 - 0]][v81[v83[3 + 0]]] = v81[v83[1083 - (126 + 953)]];
											v75 = v75 + (1701 - (759 + 941));
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v2262 = 1605 - (896 + 708);
										end
										if ((1 + 4) == v2262) then
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1580 - (555 + 1022)]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2262 = 147 - (14 + 127);
										end
										if ((2591 >= 1729) and (v2262 == 3)) then
											v81[v83[1 + 1]][v81[v83[798 - (141 + 654)]]] = v81[v83[935 - (156 + 775)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[1593 - (167 + 1423)]]] = v81[v83[10 - 6]];
											v2262 = 4;
										end
										if ((1521 > 330) and (v2262 == 2)) then
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[3 + 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2262 = 1 + 2;
										end
									end
								end
							elseif ((v84 > (228 - 122)) or (1722 == 1128)) then
								v81[v83[2 + 0]][v81[v83[1883 - (1625 + 255)]]] = v81[v83[4 + 0]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + (1517 - (1026 + 490));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[1737 - (16 + 1718)]][v81[v83[2 + 2]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[8 - 5];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[580 - (168 + 410)]][v81[v83[3]]] = v81[v83[2 + 2]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[809 - (134 + 673)]][v81[v83[3 + 0]]] = v81[v83[5 - 1]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1910 - (1174 + 734)]] = v83[3];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1 + 2]][v81[v83[6 - 2]]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]] = {};
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[6 - 4]] = v83[2 + 1];
							else
								v81[v83[2 - 0]] = {};
							end
						elseif (v84 <= (52 + 109)) then
							if (v84 <= (508 - 374)) then
								if ((v84 <= (74 + 46)) or (2128 >= 3553)) then
									if (v84 <= (437 - 324)) then
										if (v84 <= (183 - 73)) then
											if (v84 <= 108) then
												v81[v83[2 - 0]] = v81[v83[1 + 2]] % v81[v83[11 - 7]];
											elseif ((3273 >= 1739) and (v84 == (74 + 35))) then
												local v2280;
												local v2281;
												local v2282;
												v81[v83[2]] = {};
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v83[515 - (289 + 223)];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[3 - 1]] = v81[v83[2 + 1]][v81[v83[3 + 1]]];
												v75 = v75 + (641 - (514 + 126));
												v83 = v71[v75];
												v81[v83[2]] = {};
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 - 0]] = v81[v83[2 + 1]][v81[v83[12 - 8]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v2282 = v83[2 + 0];
												v2281 = v81[v2282];
												v2280 = v83[3];
												for v4022 = 1 + 0, v2280 do
													v2281[v4022] = v81[v2282 + v4022];
												end
											else
												v81[v83[1 + 1]][v81[v83[7 - 4]]] = v81[v83[3 + 1]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[611 - (4 + 604)]][v81[v83[12 - 8]]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[2]] = v83[13 - 10];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[4]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[1447 - (344 + 1101)]][v81[v83[7 - 4]]] = v81[v83[4]];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[3 + 0];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[8 - 6]] = v81[v83[3 - 0]][v81[v83[4]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[303 - (57 + 244)]] = {};
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v83[2 + 1];
											end
										elseif (v84 <= (318 - 207)) then
											local v412;
											local v413;
											local v414;
											v81[v83[1965 - (883 + 1080)]] = v83[203 - (138 + 62)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]][v81[v83[1 + 3]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[85 - (62 + 21)]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1451 - (1036 + 413)]] = v81[v83[3]][v81[v83[7 - 3]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v414 = v83[2];
											v413 = v81[v414];
											v412 = v83[3 + 0];
											for v736 = 2 - 1, v412 do
												v413[v736] = v81[v414 + v736];
											end
										elseif ((214 < 1254) and (v84 > (389 - 277))) then
											local v2310 = 0 - 0;
											local v2311;
											local v2312;
											local v2313;
											while true do
												if (v2310 == 3) then
													v81[v83[2 - 0]] = v81[v83[5 - 2]][v81[v83[4]]];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v2310 = 4;
												end
												if (v2310 == (1472 - (649 + 823))) then
													v2311 = nil;
													v2312 = nil;
													v2313 = nil;
													v2310 = 1 - 0;
												end
												if (v2310 == 4) then
													v81[v83[2]] = {};
													v75 = v75 + (1564 - (1202 + 361));
													v83 = v71[v75];
													v2310 = 18 - 13;
												end
												if ((v2310 == 5) or (1773 > 1975)) then
													v81[v83[3 - 1]] = v83[1712 - (263 + 1446)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v2310 = 1 + 5;
												end
												if (v2310 == (5 + 2)) then
													v2313 = v83[1 + 1];
													v2312 = v81[v2313];
													v2311 = v83[746 - (387 + 356)];
													v2310 = 12 - 4;
												end
												if ((29 - 21) == v2310) then
													for v7033 = 1, v2311 do
														v2312[v7033] = v81[v2313 + v7033];
													end
													break;
												end
												if (v2310 == (1 + 0)) then
													v81[v83[2]] = {};
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v2310 = 1718 - (646 + 1070);
												end
												if ((v2310 == (1 + 1)) or (2753 > 4358)) then
													v81[v83[2]] = v83[3 + 0];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v2310 = 11 - 8;
												end
												if (v2310 == 6) then
													v81[v83[2]] = v81[v83[1 + 2]][v81[v83[9 - 5]]];
													v75 = v75 + (1098 - (288 + 809));
													v83 = v71[v75];
													v2310 = 1660 - (471 + 1182);
												end
											end
										else
											local v2314 = 0;
											local v2315;
											local v2316;
											local v2317;
											while true do
												if (v2314 == (1499 - (385 + 1110))) then
													v75 = v75 + (1610 - (1201 + 408));
													v83 = v71[v75];
													v2317 = v83[1849 - (747 + 1100)];
													v2316 = v81[v2317];
													v2314 = 5;
												end
												if (v2314 == (2 + 1)) then
													v81[v83[613 - (269 + 342)]] = v83[3 - 0];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[349 - (263 + 83)]][v81[v83[6 - 2]]];
													v2314 = 13 - 9;
												end
												if (v2314 == (821 - (659 + 162))) then
													v2315 = nil;
													v2316 = nil;
													v2317 = nil;
													v81[v83[5 - 3]] = v83[3];
													v2314 = 1;
												end
												if (v2314 == (216 - (109 + 106))) then
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[3]][v81[v83[5 - 1]]];
													v75 = v75 + (1166 - (1157 + 8));
													v2314 = 513 - (179 + 332);
												end
												if (v2314 == 5) then
													v2315 = v83[840 - (705 + 132)];
													for v7036 = 1, v2315 do
														v2316[v7036] = v81[v2317 + v7036];
													end
													break;
												end
												if (v2314 == (2 + 0)) then
													v83 = v71[v75];
													v81[v83[1 + 1]] = {};
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v2314 = 3;
												end
											end
										end
									elseif (v84 <= (417 - 301)) then
										if ((v84 <= (97 + 17)) or (3435 <= 1453)) then
											local v427 = 43 - (17 + 26);
											local v428;
											while true do
												if ((4067 >= 1631) and (v427 == (1987 - (1866 + 96)))) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[5 - 3]][v81[v83[5 - 2]]] = v81[v83[8 - 4]];
													break;
												end
												if (v427 == (72 - 52)) then
													v83 = v71[v75];
													v81[v83[4 - 2]] = v81[v83[1 + 2]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[7 - 5]] = v83[3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1133 - (725 + 406)]] = v83[7 - 4];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v427 = 396 - (198 + 177);
												end
												if (10 == v427) then
													v81[v83[5 - 3]][v81[v83[4 - 1]]] = v81[v83[4]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[6 - 4]] = v83[1 + 2];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v81[v83[3 + 0]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[7 - 5]] = v83[1723 - (1082 + 638)];
													v427 = 1373 - (1322 + 40);
												end
												if (v427 == (14 - 8)) then
													v75 = v75 + (1649 - (435 + 1213));
													v83 = v71[v75];
													v81[v83[1 + 1]][v81[v83[991 - (696 + 292)]]] = v81[v83[8 - 4]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[9 - 7]] = v83[13 - 10];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[8 - 6]] = v81[v83[3]];
													v75 = v75 + (1466 - (731 + 734));
													v427 = 1578 - (1286 + 285);
												end
												if ((2354 == 2354) and (v427 == 17)) then
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v428 = v83[1 + 1];
													v81[v428] = v81[v428](v13(v81, v428 + (2 - 1), v83[3 + 0]));
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v81[v83[1263 - (1048 + 213)]][v81[v83[5 - 2]]] = v81[v83[1 + 3]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v83[3];
													v427 = 18;
												end
												if ((v427 == (3 + 1)) or (1309 == 3691)) then
													v81[v428] = v81[v428](v13(v81, v428 + (1358 - (223 + 1134)), v83[14 - 11]));
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]][v81[v83[1884 - (982 + 899)]]] = v81[v83[4 - 0]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[3 - 0];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[6 - 4]] = v81[v83[4 - 1]];
													v427 = 5;
												end
												if ((1516 > 172) and (v427 == (1484 - (310 + 1173)))) then
													v83 = v71[v75];
													v81[v83[1 + 1]] = v81[v83[10 - 7]];
													v75 = v75 + (1452 - (968 + 483));
													v83 = v71[v75];
													v81[v83[2]] = v83[3];
													v75 = v75 + (225 - (37 + 187));
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[4 - 1];
													v75 = v75 + (495 - (204 + 290));
													v83 = v71[v75];
													v427 = 843 - (680 + 161);
												end
												if ((2 + 17) == v427) then
													v83 = v71[v75];
													v428 = v83[1070 - (979 + 89)];
													v81[v428] = v81[v428](v13(v81, v428 + (1875 - (802 + 1072)), v83[9 - 6]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v83[2 + 1];
													v75 = v75 + (2 - 1);
													v427 = 4 + 16;
												end
												if (v427 == 11) then
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2]] = v83[3];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v428 = v83[1996 - (1413 + 581)];
													v81[v428] = v81[v428](v13(v81, v428 + (1215 - (630 + 584)), v83[9 - 6]));
													v75 = v75 + (1129 - (184 + 944));
													v83 = v71[v75];
													v81[v83[2 + 0]][v81[v83[956 - (927 + 26)]]] = v81[v83[10 - 6]];
													v427 = 652 - (284 + 356);
												end
												if (v427 == (5 + 9)) then
													v83 = v71[v75];
													v81[v83[4 - 2]] = v83[3 + 0];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v81[v83[1 + 2]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1130 - (211 + 917)]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v427 = 1810 - (1151 + 644);
												end
												if ((2505 < 4949) and (v427 == 5)) then
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[4 - 1];
													v75 = v75 + (1901 - (745 + 1155));
													v83 = v71[v75];
													v81[v83[5 - 3]] = v83[3];
													v75 = v75 + (315 - (27 + 287));
													v83 = v71[v75];
													v428 = v83[2 - 0];
													v81[v428] = v81[v428](v13(v81, v428 + (2 - 1), v83[7 - 4]));
													v427 = 6;
												end
												if (v427 == (62 - 38)) then
													v75 = v75 + (217 - (148 + 68));
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[2 + 1];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[2 + 1];
													v75 = v75 + (1175 - (1064 + 110));
													v83 = v71[v75];
													v428 = v83[21 - (9 + 10)];
													v81[v428] = v81[v428](v13(v81, v428 + 1 + 0, v83[1898 - (1219 + 676)]));
													v427 = 1166 - (130 + 1011);
												end
												if ((1989 - (1639 + 332)) == v427) then
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[1 + 2]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[250 - (229 + 19)]] = v83[126 - (21 + 102)];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1187 - (931 + 254)]] = v83[3];
													v75 = v75 + 1 + 0;
													v427 = 19;
												end
												if ((717 > 504) and (v427 == (467 - (428 + 17)))) then
													v81[v83[5 - 3]] = v81[v83[91 - (26 + 62)]];
													v75 = v75 + (1081 - (173 + 907));
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[2 + 1];
													v75 = v75 + (132 - (71 + 60));
													v83 = v71[v75];
													v81[v83[4 - 2]] = v83[1231 - (774 + 454)];
													v75 = v75 + (1603 - (849 + 753));
													v83 = v71[v75];
													v428 = v83[2];
													v427 = 62 - 39;
												end
												if ((3435 == 3435) and (v427 == (29 - 16))) then
													v83 = v71[v75];
													v81[v83[1218 - (861 + 355)]] = v83[4 - 1];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v428 = v83[5 - 3];
													v81[v428] = v81[v428](v13(v81, v428 + 1 + 0, v83[6 - 3]));
													v75 = v75 + (1144 - (455 + 688));
													v83 = v71[v75];
													v81[v83[1346 - (481 + 863)]][v81[v83[2 + 1]]] = v81[v83[1 + 3]];
													v75 = v75 + (2 - 1);
													v427 = 1982 - (896 + 1072);
												end
												if ((4301 >= 318) and ((23 - 14) == v427)) then
													v81[v83[2]] = v83[2 + 1];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[790 - (50 + 738)]] = v83[3 + 0];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v428 = v83[2];
													v81[v428] = v81[v428](v13(v81, v428 + (2 - 1), v83[3]));
													v75 = v75 + 1;
													v83 = v71[v75];
													v427 = 1563 - (1128 + 425);
												end
												if (v427 == 23) then
													v81[v428] = v81[v428](v13(v81, v428 + 1 + 0, v83[459 - (398 + 58)]));
													v75 = v75 + (713 - (194 + 518));
													v83 = v71[v75];
													v81[v83[2]][v81[v83[378 - (42 + 333)]]] = v81[v83[1448 - (1308 + 136)]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v83[123 - (56 + 64)];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[698 - (251 + 445)]] = v81[v83[3]];
													v427 = 9 + 15;
												end
												if (v427 == (1 + 2)) then
													v81[v83[2 + 0]] = v81[v83[1572 - (999 + 570)]];
													v75 = v75 + (1 - 0);
													v83 = v71[v75];
													v81[v83[2]] = v83[6 - 3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[1702 - (1476 + 223)];
													v75 = v75 + (1837 - (597 + 1239));
													v83 = v71[v75];
													v428 = v83[6 - 4];
													v427 = 3 + 1;
												end
												if (v427 == (900 - (590 + 294))) then
													v81[v83[3 - 1]] = v83[792 - (433 + 356)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[4 - 1]];
													v75 = v75 + (1257 - (791 + 465));
													v83 = v71[v75];
													v81[v83[1116 - (1048 + 66)]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[8 - 6]] = v83[2000 - (666 + 1331)];
													v427 = 1917 - (854 + 1046);
												end
												if (v427 == (0 - 0)) then
													v428 = nil;
													v428 = v83[2];
													v81[v428] = v81[v428](v13(v81, v428 + 1 + 0, v83[7 - 4]));
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 + 0]][v81[v83[99 - (61 + 35)]]] = v81[v83[19 - 15]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[1 + 1]] = v83[1821 - (1591 + 227)];
													v75 = v75 + 1;
													v427 = 1 - 0;
												end
												if (v427 == (806 - (173 + 618))) then
													v81[v83[1325 - (588 + 735)]] = v83[583 - (170 + 410)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v428 = v83[2 + 0];
													v81[v428] = v81[v428](v13(v81, v428 + (2 - 1), v83[1 + 2]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[554 - (362 + 190)]][v81[v83[851 - (529 + 319)]]] = v81[v83[2 + 2]];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v427 = 16;
												end
												if ((4 + 3) == v427) then
													v83 = v71[v75];
													v81[v83[2 + 0]] = v83[3];
													v75 = v75 + (1201 - (829 + 371));
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[2 + 1];
													v75 = v75 + (1677 - (700 + 976));
													v83 = v71[v75];
													v428 = v83[2];
													v81[v428] = v81[v428](v13(v81, v428 + (2 - 1), v83[4 - 1]));
													v75 = v75 + 1 + 0;
													v427 = 1649 - (1137 + 504);
												end
												if ((464 < 1234) and (v427 == (43 - 31))) then
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v81[v83[2 - 0]] = v83[1 + 2];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v81[v83[1617 - (327 + 1287)]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[4 - 1];
													v75 = v75 + 1 + 0;
													v427 = 36 - 23;
												end
												if (v427 == (1115 - (224 + 889))) then
													v428 = v83[1222 - (574 + 646)];
													v81[v428] = v81[v428](v13(v81, v428 + (608 - (83 + 524)), v83[771 - (577 + 191)]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[4]];
													v75 = v75 + (800 - (248 + 551));
													v83 = v71[v75];
													v81[v83[79 - (53 + 24)]] = v83[136 - (12 + 121)];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v427 = 5 - 2;
												end
												if (v427 == 8) then
													v83 = v71[v75];
													v81[v83[608 - (164 + 442)]][v81[v83[3]]] = v81[v83[1 + 3]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[5 - 3]] = v83[6 - 3];
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2 + 0]] = v81[v83[3]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v427 = 20 - 11;
												end
												if ((v427 == 21) or (1228 >= 1774)) then
													v428 = v83[2 + 0];
													v81[v428] = v81[v428](v13(v81, v428 + (1248 - (585 + 662)), v83[3 + 0]));
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v81[v83[582 - (126 + 454)]][v81[v83[417 - (366 + 48)]]] = v81[v83[1687 - (1633 + 50)]];
													v75 = v75 + (1102 - (892 + 209));
													v83 = v71[v75];
													v81[v83[2]] = v83[3 + 0];
													v75 = v75 + (2 - 1);
													v83 = v71[v75];
													v427 = 22;
												end
											end
										elseif (v84 > (222 - 107)) then
											local v2318;
											local v2319;
											local v2320;
											v81[v83[662 - (495 + 165)]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[8 - 5];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[5 - 2]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[584 - (431 + 151)]] = v83[3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[17 - (10 + 5)]] = v81[v83[425 - (403 + 19)]][v81[v83[1775 - (454 + 1317)]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2320 = v83[1816 - (187 + 1627)];
											v2319 = v81[v2320];
											v2318 = v83[2 + 1];
											for v4208 = 1953 - (832 + 1120), v2318 do
												v2319[v4208] = v81[v2320 + v4208];
											end
										else
											local v2334;
											local v2335;
											local v2336;
											v81[v83[5 - 3]] = v83[1 + 2];
											v75 = v75 + (1097 - (1001 + 95));
											v83 = v71[v75];
											v81[v83[31 - (4 + 25)]] = v81[v83[1164 - (904 + 257)]][v81[v83[9 - 5]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = {};
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[13 - 10];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[1792 - (735 + 1054)]][v81[v83[4]]];
											v75 = v75 + (1694 - (418 + 1275));
											v83 = v71[v75];
											v2336 = v83[2 + 0];
											v2335 = v81[v2336];
											v2334 = v83[8 - 5];
											for v4211 = 3 - 2, v2334 do
												v2335[v4211] = v81[v2336 + v4211];
											end
										end
									elseif (v84 <= 118) then
										if ((4090 > 1368) and (v84 > (1589 - (784 + 688)))) then
											v81[v83[6 - 4]][v81[v83[3]]] = v81[v83[8 - 4]];
											v75 = v75 + (1250 - (374 + 875));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[983 - (304 + 676)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1360 - (517 + 841)]] = v81[v83[3]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[869 - (356 + 510)];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[1213 - (306 + 903)]];
											v75 = v75 + (1104 - (70 + 1033));
											v83 = v71[v75];
											v81[v83[8 - 6]][v81[v83[2 + 1]]] = v81[v83[3 + 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[806 - (523 + 281)]] = v83[925 - (241 + 681)];
											v75 = v75 + (1099 - (358 + 740));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4]]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1043 - (1005 + 36)]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[704 - (533 + 169)]] = v83[3];
										else
											v81[v83[1 + 1]][v81[v83[2 + 1]]] = v81[v83[1 + 3]];
											v75 = v75 + (1526 - (817 + 708));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1701 - (636 + 1062)]][v81[v83[15 - 11]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v83[1661 - (1130 + 528)];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2 + 0]][v81[v83[146 - (115 + 28)]]] = v81[v83[2 + 2]];
											v75 = v75 + (1382 - (1076 + 305));
											v83 = v71[v75];
											v81[v83[1771 - (1198 + 571)]][v81[v83[1520 - (629 + 888)]]] = v81[v83[9 - 5]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1 + 2]][v81[v83[173 - (113 + 56)]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1255 - (521 + 732)]] = {};
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1540 - (99 + 1439)]] = v83[2 + 1];
										end
									elseif ((1318 < 4118) and (v84 > (380 - 261))) then
										local v2386 = 0 - 0;
										local v2387;
										local v2388;
										local v2389;
										while true do
											if (v2386 == (408 - (39 + 369))) then
												v2387 = nil;
												v2388 = nil;
												v2389 = nil;
												v2386 = 1;
											end
											if (v2386 == (1962 - (870 + 1089))) then
												v81[v83[797 - (564 + 231)]] = v81[v83[1924 - (1893 + 28)]][v81[v83[4]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2386 = 530 - (140 + 386);
											end
											if (v2386 == (1 + 0)) then
												v81[v83[1 + 1]] = {};
												v75 = v75 + 1;
												v83 = v71[v75];
												v2386 = 1 + 1;
											end
											if (v2386 == 7) then
												v2389 = v83[1918 - (485 + 1431)];
												v2388 = v81[v2389];
												v2387 = v83[3];
												v2386 = 19 - 11;
											end
											if ((2 - 0) == v2386) then
												v81[v83[2]] = v83[3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2386 = 3 + 0;
											end
											if (v2386 == (16 - 12)) then
												v81[v83[1 + 1]] = {};
												v75 = v75 + (1182 - (945 + 236));
												v83 = v71[v75];
												v2386 = 12 - 7;
											end
											if ((548 < 2182) and (v2386 == (1 + 7))) then
												for v7039 = 2 - 1, v2387 do
													v2388[v7039] = v81[v2389 + v7039];
												end
												break;
											end
											if ((12 - 7) == v2386) then
												v81[v83[1 + 1]] = v83[516 - (383 + 130)];
												v75 = v75 + (904 - (643 + 260));
												v83 = v71[v75];
												v2386 = 6;
											end
											if (v2386 == (1453 - (109 + 1338))) then
												v81[v83[1 + 1]] = v81[v83[13 - 10]][v81[v83[4]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v2386 = 751 - (338 + 406);
											end
										end
									else
										local v2390;
										local v2391;
										local v2392;
										v81[v83[5 - 3]] = v83[478 - (20 + 455)];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[3]][v81[v83[79 - (39 + 36)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + (1707 - (609 + 1097));
										v83 = v71[v75];
										v81[v83[660 - (543 + 115)]] = v81[v83[3]][v81[v83[3 + 1]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v2392 = v83[3 - 1];
										v2391 = v81[v2392];
										v2390 = v83[8 - 5];
										for v4214 = 1609 - (1559 + 49), v2390 do
											v2391[v4214] = v81[v2392 + v4214];
										end
									end
								elseif ((1241 <= 1550) and (v84 <= (749 - (317 + 305)))) then
									if ((1114 <= 2934) and (v84 <= (330 - 207))) then
										if ((2107 > 496) and (v84 <= (495 - 374))) then
											local v429;
											v81[v83[829 - (509 + 318)]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1819 - (384 + 1433)]] = v83[3 + 0];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[13 - 10];
											v75 = v75 + (1535 - (198 + 1336));
											v83 = v71[v75];
											v429 = v83[1 + 1];
											v81[v429] = v81[v429](v13(v81, v429 + (1406 - (1149 + 256)), v83[6 - 3]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1768 - (1280 + 486)]][v83[5 - 2]] = v81[v83[5 - 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1611 - (786 + 822)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1462 - (1303 + 157)]] = v83[2 + 1];
											v75 = v75 + (1416 - (505 + 910));
											v83 = v71[v75];
											v429 = v83[5 - 3];
											v81[v429] = v81[v429](v13(v81, v429 + (869 - (548 + 320)), v83[594 - (52 + 539)]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[557 - (378 + 177)]][v83[8 - 5]] = v81[v83[9 - 5]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[209 - (108 + 99)]] = v81[v83[2 + 1]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[8 - 6]] = v83[3 + 0];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3 + 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v429 = v83[2 + 0];
											v81[v429] = v81[v429](v13(v81, v429 + (2 - 1), v83[6 - 3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]][v83[3]] = v81[v83[8 - 4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[9 - 7]] = v81[v83[3 + 0]];
											v75 = v75 + (840 - (823 + 16));
											v83 = v71[v75];
											v81[v83[280 - (19 + 259)]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1822 - (1780 + 40)]] = v83[6 - 3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v429 = v83[4 - 2];
											v81[v429] = v81[v429](v13(v81, v429 + (1 - 0), v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[3 - 1]][v83[1 + 2]] = v81[v83[16 - 12]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[8 - 5];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[1183 - (825 + 355)];
											v75 = v75 + (861 - (846 + 14));
											v83 = v71[v75];
											v429 = v83[2];
											v81[v429] = v81[v429](v13(v81, v429 + 1 + 0, v83[4 - 1]));
											v75 = v75 + (371 - (237 + 133));
											v83 = v71[v75];
											v81[v83[1188 - (624 + 562)]][v83[8 - 5]] = v81[v83[4]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[805 - (700 + 102)]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v429 = v83[1278 - (735 + 541)];
											v81[v429] = v81[v429](v13(v81, v429 + (841 - (497 + 343)), v83[1786 - (995 + 788)]));
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]][v83[1 + 2]] = v81[v83[5 - 1]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[200 - (37 + 161)]] = v81[v83[5 - 2]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3 + 0];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v429 = v83[1274 - (357 + 915)];
											v81[v429] = v81[v429](v13(v81, v429 + (676 - (50 + 625)), v83[1883 - (1624 + 256)]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]][v83[3]] = v81[v83[4]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1525 - (180 + 1343)]] = v81[v83[3 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1344 - (1057 + 285)]] = v83[1 + 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1406 - (135 + 1268)];
											v75 = v75 + (1422 - (1088 + 333));
											v83 = v71[v75];
											v429 = v83[1684 - (1280 + 402)];
											v81[v429] = v81[v429](v13(v81, v429 + 1, v83[3]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]][v83[3]] = v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[11 - 8]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[19 - (11 + 6)]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[11 - 8];
											v75 = v75 + (1737 - (1015 + 721));
											v83 = v71[v75];
											v429 = v83[5 - 3];
											v81[v429] = v81[v429](v13(v81, v429 + 1, v83[245 - (169 + 73)]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]][v83[1899 - (1052 + 844)]] = v81[v83[13 - 9]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[18 - (5 + 11)]] = v81[v83[3]];
											v75 = v75 + (1516 - (210 + 1305));
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v429 = v83[749 - (646 + 101)];
											v81[v429] = v81[v429](v13(v81, v429 + (377 - (12 + 364)), v83[718 - (587 + 128)]));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[4 - 2]][v83[3]] = v81[v83[9 - 5]];
											v75 = v75 + (228 - (196 + 31));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[540 - (227 + 310)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[776 - (689 + 84)];
											v75 = v75 + (1376 - (404 + 971));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1 + 2];
											v75 = v75 + (1398 - (764 + 633));
											v83 = v71[v75];
											v429 = v83[2];
											v81[v429] = v81[v429](v13(v81, v429 + 1 + 0, v83[2 + 1]));
											v75 = v75 + (207 - (114 + 92));
											v83 = v71[v75];
											v81[v83[2 + 0]][v83[532 - (4 + 525)]] = v81[v83[5 - 1]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1315 - (636 + 677)]] = v81[v83[9 - 6]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[1357 - (447 + 907)];
											v75 = v75 + (1799 - (303 + 1495));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[8 - 5];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v429 = v83[1818 - (1446 + 370)];
											v81[v429] = v81[v429](v13(v81, v429 + (552 - (245 + 306)), v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]][v83[3]] = v81[v83[14 - 10]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1475 - (536 + 937)]] = v83[7 - 4];
											v75 = v75 + (153 - (143 + 9));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1077 - (474 + 600)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v429 = v83[5 - 3];
											v81[v429] = v81[v429](v13(v81, v429 + (3 - 2), v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]][v83[3 + 0]] = v81[v83[5 - 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1491 - (49 + 1439)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v83[1993 - (769 + 1221)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v429 = v83[1074 - (270 + 802)];
											v81[v429] = v81[v429](v13(v81, v429 + (1857 - (301 + 1555)), v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v83[78 - (22 + 53)]] = v81[v83[2 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[9 - 7]] = v81[v83[6 - 3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1 + 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v429 = v83[94 - (41 + 51)];
											v81[v429] = v81[v429](v13(v81, v429 + (604 - (391 + 212)), v83[5 - 2]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]][v83[3]] = v81[v83[9 - 5]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[3]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v429 = v83[2];
											v81[v429] = v81[v429](v13(v81, v429 + (1 - 0), v83[3 + 0]));
											v75 = v75 + (377 - (155 + 221));
											v83 = v71[v75];
											v81[v83[2]][v83[2 + 1]] = v81[v83[1461 - (366 + 1091)]];
										elseif (v84 > (98 + 24)) then
											v81[v83[288 - (90 + 196)]][v81[v83[1777 - (1710 + 64)]]] = v81[v83[7 - 3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[9 - 7]] = v83[5 - 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v81[v83[4 - 1]][v81[v83[5 - 1]]];
											v75 = v75 + (268 - (72 + 195));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1181 - (28 + 1150)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[601 - (102 + 496)]]] = v81[v83[448 - (181 + 263)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[3]]] = v81[v83[2 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v83[3 + 0];
											v75 = v75 + (1509 - (822 + 686));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[3]][v81[v83[9 - 5]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = {};
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[863 - (252 + 609)]] = v83[3];
										else
											local v2425 = v83[1 + 1];
											local v2426, v2427 = v74(v81[v2425](v81[v2425 + 1 + 0]));
											v76 = (v2427 + v2425) - (1 - 0);
											local v2428 = 958 - (578 + 380);
											for v4217 = v2425, v76 do
												local v4218 = 0 + 0;
												while true do
													if (v4218 == (1716 - (1431 + 285))) then
														v2428 = v2428 + 1 + 0;
														v81[v4217] = v2426[v2428];
														break;
													end
												end
											end
										end
									elseif ((1413 >= 1083) and (v84 <= (236 - 111))) then
										if (v84 > (182 - 58)) then
											local v2429;
											local v2430;
											local v2431;
											v81[v83[7 - 5]] = {};
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1115 - (1013 + 99)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[6 - 3]][v81[v83[4]]];
											v75 = v75 + (958 - (449 + 508));
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1894 - (1562 + 330)]] = v83[1975 - (1870 + 102)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2431 = v83[2 - 0];
											v2430 = v81[v2431];
											v2429 = v83[5 - 2];
											for v4219 = 1 + 0, v2429 do
												v2430[v4219] = v81[v2431 + v4219];
											end
										else
											local v2445;
											v81[v83[2]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[997 - (550 + 444)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2445 = v83[1 + 1];
											v81[v2445] = v81[v2445](v13(v81, v2445 + (1 - 0), v83[2 + 1]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[1 + 2]]] = v81[v83[5 - 1]];
											v75 = v75 + (581 - (544 + 36));
											v83 = v71[v75];
											v81[v83[1233 - (70 + 1161)]] = v83[2 + 1];
											v75 = v75 + (758 - (130 + 627));
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[313 - (121 + 190)]] = v83[3];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[12 - 9];
											v75 = v75 + (323 - (255 + 67));
											v83 = v71[v75];
											v2445 = v83[2 + 0];
											v81[v2445] = v81[v2445](v13(v81, v2445 + (2 - 1), v83[281 - (225 + 53)]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1301 - (738 + 561)]][v81[v83[10 - 7]]] = v81[v83[3 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[3]];
											v75 = v75 + (1612 - (1450 + 161));
											v83 = v71[v75];
											v81[v83[1730 - (183 + 1545)]] = v83[2 + 1];
											v75 = v75 + (1171 - (736 + 434));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[13 - 10];
											v75 = v75 + (40 - (32 + 7));
											v83 = v71[v75];
											v2445 = v83[2];
											v81[v2445] = v81[v2445](v13(v81, v2445 + 1, v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[7 - 5]][v81[v83[376 - (103 + 270)]]] = v81[v83[2 + 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1455 - (1021 + 432)]] = v83[11 - 8];
											v75 = v75 + (1415 - (153 + 1261));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[890 - (800 + 88)]] = v83[1 + 2];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[823 - (358 + 463)]] = v83[261 - (176 + 82)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2445 = v83[4 - 2];
											v81[v2445] = v81[v2445](v13(v81, v2445 + (771 - (543 + 227)), v83[3 + 0]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[7 - 5]][v81[v83[1789 - (1509 + 277)]]] = v81[v83[4]];
											v75 = v75 + (1961 - (1453 + 507));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[11 - 8];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1 + 2]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[1034 - (22 + 1009)];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[1942 - (245 + 1695)]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2445 = v83[1037 - (611 + 424)];
											v81[v2445] = v81[v2445](v13(v81, v2445 + (299 - (280 + 18)), v83[3 + 0]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[6 - 3]]] = v81[v83[8 - 4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[280 - (109 + 169)]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[1 + 2]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[7 - 5]] = v83[7 - 4];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1344 - (875 + 467)]] = v83[2 + 1];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v2445 = v83[5 - 3];
											v81[v2445] = v81[v2445](v13(v81, v2445 + (3 - 2), v83[802 - (717 + 82)]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[1023 - (693 + 327)]]] = v81[v83[1915 - (746 + 1165)]];
											v75 = v75 + (1736 - (1473 + 262));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1875 - (874 + 999)]] = v81[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[2 + 1];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v2445 = v83[2];
											v81[v2445] = v81[v2445](v13(v81, v2445 + (1 - 0), v83[3 + 0]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[3 + 1]];
											v75 = v75 + (459 - (388 + 70));
											v83 = v71[v75];
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + (583 - (319 + 263));
											v83 = v71[v75];
											v81[v83[7 - 5]] = v83[4 - 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2445 = v83[2];
											v81[v2445] = v81[v2445](v13(v81, v2445 + 1 + 0, v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[816 - (94 + 720)]][v81[v83[381 - (78 + 300)]]] = v81[v83[1921 - (774 + 1143)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[194 - (18 + 173)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[9 - 7]] = v83[1488 - (677 + 808)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[972 - (528 + 442)]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2445 = v83[2];
											v81[v2445] = v81[v2445](v13(v81, v2445 + 1, v83[8 - 5]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[349 - (116 + 231)]][v81[v83[3 + 0]]] = v81[v83[3 + 1]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + (1471 - (1242 + 228));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[847 - (320 + 524)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[9 - 7]] = v83[1 + 2];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2445 = v83[5 - 3];
											v81[v2445] = v81[v2445](v13(v81, v2445 + (476 - (63 + 412)), v83[1867 - (1299 + 565)]));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[12 - 9]]] = v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[2 + 1];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[330 - (79 + 249)]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[7 - 4];
											v75 = v75 + (1631 - (305 + 1325));
											v83 = v71[v75];
											v81[v83[1730 - (1585 + 143)]] = v83[9 - 6];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2445 = v83[2];
											v81[v2445] = v81[v2445](v13(v81, v2445 + (1831 - (1727 + 103)), v83[9 - 6]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[12 - 8]];
											v75 = v75 + (275 - (135 + 139));
											v83 = v71[v75];
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[3 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[9 - 6];
											v75 = v75 + (1705 - (1084 + 620));
											v83 = v71[v75];
											v2445 = v83[1055 - (404 + 649)];
											v81[v2445] = v81[v2445](v13(v81, v2445 + (815 - (318 + 496)), v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1884 - (1730 + 152)]][v81[v83[9 - 6]]] = v81[v83[13 - 9]];
											v75 = v75 + (1862 - (527 + 1334));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[1949 - (464 + 1482)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[572 - (485 + 84)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[2 + 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v2445 = v83[2];
											v81[v2445] = v81[v2445](v13(v81, v2445 + 1 + 0, v83[1 + 2]));
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[1004 - (359 + 642)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[2 + 1]];
											v75 = v75 + (1345 - (564 + 780));
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[1 + 2];
										end
									elseif (v84 > (53 + 73)) then
										local v2523;
										local v2524;
										local v2525;
										v81[v83[2 - 0]] = {};
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[7 - 4];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v81[v83[1430 - (909 + 517)]]];
										v75 = v75 + (460 - (432 + 27));
										v83 = v71[v75];
										v81[v83[2]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[1739 - (69 + 1667)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[124 - (16 + 106)]] = v81[v83[2 + 1]][v81[v83[1256 - (1178 + 74)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2525 = v83[6 - 4];
										v2524 = v81[v2525];
										v2523 = v83[450 - (312 + 135)];
										for v4222 = 1 + 0, v2523 do
											v2524[v4222] = v81[v2525 + v4222];
										end
									else
										v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[10 - 7];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1831 - (492 + 1337)]] = v81[v83[1 + 2]][v81[v83[3 + 1]]];
										v75 = v75 + (1391 - (814 + 576));
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[7 - 4];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]][v81[v83[8 - 5]]] = v81[v83[4]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[1 + 3]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[1 + 2]][v81[v83[1363 - (978 + 381)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[1 + 2];
									end
								elseif (v84 <= (52 + 78)) then
									if (v84 <= 128) then
										local v516 = 0 - 0;
										while true do
											if (v516 == 3) then
												v81[v83[2]] = v83[2 + 1];
												v75 = v75 + 1;
												v83 = v71[v75];
												v516 = 11 - 7;
											end
											if (v516 == (6 + 0)) then
												v81[v83[2]] = v83[6 - 3];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v516 = 7;
											end
											if (v516 == (2 + 2)) then
												v81[v83[2]][v81[v83[3]]] = v81[v83[1 + 3]];
												v75 = v75 + (570 - (397 + 172));
												v83 = v71[v75];
												v516 = 7 - 2;
											end
											if ((v516 == (1124 - (267 + 850))) or (2087 >= 2118)) then
												v81[v83[2]] = v81[v83[3]][v81[v83[4 + 0]]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v516 = 1002 - (41 + 953);
											end
											if (v516 == 1) then
												v81[v83[2]] = v83[3];
												v75 = v75 + 1;
												v83 = v71[v75];
												v516 = 2;
											end
											if (v516 == 5) then
												v81[v83[8 - 6]][v81[v83[3]]] = v81[v83[4]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v516 = 11 - 5;
											end
											if ((822 - (817 + 3)) == v516) then
												v81[v83[1387 - (867 + 518)]] = v81[v83[8 - 5]][v81[v83[4]]];
												v75 = v75 + (331 - (256 + 74));
												v83 = v71[v75];
												v516 = 3 + 0;
											end
											if (9 == v516) then
												v81[v83[1 + 1]] = v83[3];
												break;
											end
											if ((0 - 0) == v516) then
												v81[v83[2]][v81[v83[190 - (111 + 76)]]] = v81[v83[3 + 1]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v516 = 1052 - (100 + 951);
											end
											if (v516 == (633 - (369 + 256))) then
												v81[v83[8 - 6]] = {};
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v516 = 72 - (25 + 38);
											end
										end
									elseif (v84 > (1165 - (890 + 146))) then
										local v2553 = 0 - 0;
										while true do
											if ((v2553 == (0 + 0)) or (4769 == 2887)) then
												v81[v83[1586 - (549 + 1035)]][v81[v83[6 - 3]]] = v81[v83[4]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v2553 = 1 + 0;
											end
											if (v2553 == 3) then
												v81[v83[963 - (546 + 415)]][v81[v83[1027 - (175 + 849)]]] = v81[v83[4]];
												v75 = v75 + (1665 - (734 + 930));
												v83 = v71[v75];
												v81[v83[1417 - (1093 + 322)]][v81[v83[11 - 8]]] = v81[v83[1305 - (1256 + 45)]];
												v2553 = 1849 - (66 + 1779);
											end
											if (v2553 == (1777 - (920 + 853))) then
												v75 = v75 + (59 - (6 + 52));
												v83 = v71[v75];
												v81[v83[3 - 1]] = v83[3];
												v75 = v75 + 1;
												v2553 = 18 - 13;
											end
											if (v2553 == (14 - 8)) then
												v81[v83[2]] = {};
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[7 - 5]] = v83[3 + 0];
												break;
											end
											if (v2553 == (4 + 1)) then
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[90 - (11 + 76)]][v81[v83[10 - 6]]];
												v75 = v75 + (823 - (560 + 262));
												v83 = v71[v75];
												v2553 = 7 - 1;
											end
											if (v2553 == 2) then
												v83 = v71[v75];
												v81[v83[1859 - (12 + 1845)]] = v83[3 + 0];
												v75 = v75 + 1;
												v83 = v71[v75];
												v2553 = 1320 - (1278 + 39);
											end
											if (v2553 == (3 - 2)) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2 + 0]] = v81[v83[5 - 2]][v81[v83[15 - 11]]];
												v75 = v75 + 1 + 0;
												v2553 = 2;
											end
										end
									else
										local v2554 = 0 + 0;
										local v2555;
										local v2556;
										local v2557;
										while true do
											if (v2554 == (1540 - (385 + 1151))) then
												v75 = v75 + (1451 - (240 + 1210));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[1668 - (816 + 849)]][v81[v83[4]]];
												v75 = v75 + (1855 - (99 + 1755));
												v2554 = 6 - 1;
											end
											if (v2554 == (787 - (424 + 360))) then
												v81[v83[2]] = {};
												v75 = v75 + (1375 - (41 + 1333));
												v83 = v71[v75];
												v81[v83[547 - (161 + 384)]] = v83[3];
												v2554 = 4;
											end
											if ((v2554 == (937 - (355 + 576))) or (4657 <= 4605)) then
												for v7044 = 688 - (348 + 339), v2555 do
													v2556[v7044] = v81[v2557 + v7044];
												end
												break;
											end
											if ((v2554 == (22 - 17)) or (1744 >= 4525)) then
												v83 = v71[v75];
												v2557 = v83[2];
												v2556 = v81[v2557];
												v2555 = v83[14 - 11];
												v2554 = 474 - (285 + 183);
											end
											if (v2554 == (4 - 2)) then
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[3]][v81[v83[1974 - (928 + 1042)]]];
												v75 = v75 + 1;
												v83 = v71[v75];
												v2554 = 1579 - (545 + 1031);
											end
											if ((0 - 0) == v2554) then
												v2555 = nil;
												v2556 = nil;
												v2557 = nil;
												v81[v83[2]] = {};
												v2554 = 3 - 2;
											end
											if ((1 == v2554) or (3849 < 2971)) then
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[3];
												v75 = v75 + (926 - (345 + 580));
												v2554 = 3 - 1;
											end
										end
									end
								elseif (v84 <= (5 + 127)) then
									if ((v84 == 131) or (4027 < 427)) then
										v81[v83[311 - (136 + 173)]][v81[v83[3]]] = v81[v83[4]];
										v75 = v75 + (1904 - (1448 + 455));
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[2 + 1]][v81[v83[4]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1563 - (1137 + 424)]] = v83[1930 - (372 + 1555)];
										v75 = v75 + (382 - (174 + 207));
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[1 + 3]];
										v75 = v75 + (72 - (65 + 6));
										v83 = v71[v75];
										v81[v83[1313 - (1041 + 270)]][v81[v83[3]]] = v81[v83[4]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[2 + 1];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1712 - (222 + 1488)]] = v81[v83[3 + 0]][v81[v83[4 + 0]]];
										v75 = v75 + (1523 - (1023 + 499));
										v83 = v71[v75];
										v81[v83[3 - 1]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[3];
									else
										local v2577;
										local v2578;
										local v2579;
										v81[v83[2 + 0]] = {};
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[809 - (134 + 673)]] = v81[v83[1060 - (810 + 247)]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1462 - (753 + 707)]] = {};
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[603 - (462 + 138)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[13 - 9]]];
										v75 = v75 + (661 - (642 + 18));
										v83 = v71[v75];
										v2579 = v83[980 - (155 + 823)];
										v2578 = v81[v2579];
										v2577 = v83[3 + 0];
										for v4253 = 1 + 0, v2577 do
											v2578[v4253] = v81[v2579 + v4253];
										end
									end
								elseif ((v84 > 133) or (4326 > 4624)) then
									v81[v83[2 + 0]][v81[v83[2 + 1]]] = v81[v83[1457 - (799 + 654)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[3];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[636 - (527 + 106)]][v81[v83[7 - 3]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3 + 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[13 - 9]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[736 - (589 + 144)]]] = v81[v83[3 + 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[530 - (179 + 349)]] = v83[12 - 9];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1 + 2]][v81[v83[3 + 1]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 + 0]] = {};
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v83[3 + 0];
								else
									v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[2 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[488 - (242 + 244)]] = v83[410 - (303 + 104)];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[646 - (411 + 232)]][v81[v83[4 + 0]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[11 - 7]];
									v75 = v75 + (482 - (164 + 317));
									v83 = v71[v75];
									v81[v83[2]][v81[v83[102 - (65 + 34)]]] = v81[v83[10 - 6]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[320 - (61 + 257)]] = v83[1882 - (398 + 1481)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[3]][v81[v83[4]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = {};
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[688 - (338 + 348)]] = v83[1381 - (401 + 977)];
								end
							elseif (v84 <= (353 - 206)) then
								if (v84 <= (139 + 1)) then
									if (v84 <= 137) then
										if (v84 <= (180 - (17 + 28))) then
											local v517 = 185 - (27 + 158);
											while true do
												if (v517 == 4) then
													v81[v83[5 - 3]][v81[v83[1 + 2]]] = v81[v83[2 + 2]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v517 = 1298 - (372 + 921);
												end
												if (v517 == (7 + 0)) then
													v81[v83[2]] = v81[v83[3]][v81[v83[487 - (350 + 133)]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v517 = 3 + 5;
												end
												if ((v517 == 3) or (4974 == 3938)) then
													v81[v83[1 + 1]] = v83[3];
													v75 = v75 + (1539 - (1432 + 106));
													v83 = v71[v75];
													v517 = 2 + 2;
												end
												if (v517 == 0) then
													v81[v83[2 - 0]][v81[v83[3 + 0]]] = v81[v83[1450 - (1075 + 371)]];
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v517 = 2 - 1;
												end
												if ((v517 == 1) or (1116 >= 3762)) then
													v81[v83[2]] = v83[3];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v517 = 2;
												end
												if ((17 - 12) == v517) then
													v81[v83[2 + 0]][v81[v83[3 + 0]]] = v81[v83[1551 - (234 + 1313)]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v517 = 12 - 6;
												end
												if (v517 == (3 + 5)) then
													v81[v83[910 - (597 + 311)]] = {};
													v75 = v75 + (28 - (13 + 14));
													v83 = v71[v75];
													v517 = 1 + 8;
												end
												if (v517 == (1062 - (713 + 340))) then
													v81[v83[4 - 2]] = v83[3 + 0];
													break;
												end
												if (((14 - 8) == v517) or (4732 == 1094)) then
													v81[v83[2 + 0]] = v83[354 - (265 + 86)];
													v75 = v75 + 1;
													v83 = v71[v75];
													v517 = 7;
												end
												if (v517 == (6 - 4)) then
													v81[v83[2]] = v81[v83[1 + 2]][v81[v83[875 - (747 + 124)]]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v517 = 1459 - (692 + 764);
												end
											end
										elseif (v84 > (423 - 287)) then
											local v2630;
											local v2631;
											local v2632;
											v81[v83[2 + 0]] = {};
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[3]][v81[v83[4]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1032 - (283 + 747)]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[907 - (816 + 89)]] = v83[11 - 8];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1080 - (709 + 369)]] = v81[v83[11 - 8]][v81[v83[9 - 5]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v2632 = v83[2];
											v2631 = v81[v2632];
											v2630 = v83[1 + 2];
											for v4284 = 1 + 0, v2630 do
												v2631[v4284] = v81[v2632 + v4284];
											end
										else
											local v2647 = 0 + 0;
											local v2648;
											local v2649;
											local v2650;
											while true do
												if ((v2647 == (1 + 0)) or (2691 < 2454)) then
													v81[v83[701 - (478 + 221)]] = {};
													v75 = v75 + (773 - (607 + 165));
													v83 = v71[v75];
													v2647 = 1246 - (1108 + 136);
												end
												if ((8 - 5) == v2647) then
													v81[v83[4 - 2]] = v81[v83[8 - 5]][v81[v83[4]]];
													v75 = v75 + (637 - (352 + 284));
													v83 = v71[v75];
													v2647 = 1 + 3;
												end
												if (v2647 == (895 - (352 + 539))) then
													v81[v83[7 - 5]] = {};
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v2647 = 5 + 0;
												end
												if (v2647 == (19 - 11)) then
													for v7047 = 1, v2648 do
														v2649[v7047] = v81[v2650 + v7047];
													end
													break;
												end
												if (v2647 == (766 - (714 + 52))) then
													v2648 = nil;
													v2649 = nil;
													v2650 = nil;
													v2647 = 1;
												end
												if ((4578 == 4578) and (v2647 == (5 + 0))) then
													v81[v83[1815 - (1482 + 331)]] = v83[1204 - (766 + 435)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v2647 = 6;
												end
												if (v2647 == (1826 - (62 + 1757))) then
													v2650 = v83[2];
													v2649 = v81[v2650];
													v2648 = v83[1371 - (833 + 535)];
													v2647 = 8;
												end
												if (v2647 == 2) then
													v81[v83[1 + 1]] = v83[141 - (5 + 133)];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v2647 = 523 - (393 + 127);
												end
												if (v2647 == (1062 - (705 + 351))) then
													v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4]]];
													v75 = v75 + 1 + 0;
													v83 = v71[v75];
													v2647 = 7 + 0;
												end
											end
										end
									elseif (v84 <= (1295 - (414 + 743))) then
										v81[v83[2 + 0]][v81[v83[475 - (65 + 407)]]] = v81[v83[8 - 4]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[9 - 7]] = v83[11 - 8];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1546 - (116 + 1428)]] = v81[v83[12 - 9]][v81[v83[1306 - (79 + 1223)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[390 - (353 + 35)]] = v83[3];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[4 - 2]][v81[v83[1943 - (490 + 1450)]]] = v81[v83[1350 - (778 + 568)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1296 - (914 + 380)]][v81[v83[2 + 1]]] = v81[v83[536 - (126 + 406)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + (1191 - (655 + 535));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[8 - 5]][v81[v83[4]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = {};
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[1301 - (711 + 587)];
									elseif (v84 == (1022 - (168 + 715))) then
										local v2651;
										local v2652;
										local v2653;
										v81[v83[3 - 1]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 - 0];
										v75 = v75 + (293 - (232 + 60));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[2 + 1]][v81[v83[41 - (22 + 15)]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[1176 - (797 + 376)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2653 = v83[8 - 6];
										v2652 = v81[v2653];
										v2651 = v83[3];
										for v4287 = 1 + 0, v2651 do
											v2652[v4287] = v81[v2653 + v4287];
										end
									else
										local v2666;
										local v2667;
										local v2668;
										v81[v83[2]] = v83[12 - 9];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[3]][v81[v83[1381 - (1071 + 306)]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1193 - (412 + 779)]] = {};
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[6 - 3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[614 - (427 + 185)]] = v81[v83[3]][v81[v83[1655 - (1444 + 207)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2668 = v83[2];
										v2667 = v81[v2668];
										v2666 = v83[3];
										for v4290 = 2 - 1, v2666 do
											v2667[v4290] = v81[v2668 + v4290];
										end
									end
								elseif (v84 <= (8 + 135)) then
									if ((v84 <= (333 - 192)) or (4835 < 265)) then
										local v535;
										local v536;
										local v537;
										v81[v83[2 - 0]] = v83[3];
										v75 = v75 + (640 - (261 + 378));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[1 + 2]][v81[v83[13 - 9]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[350 - (22 + 326)]] = v83[3];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1216 - (836 + 378)]] = v81[v83[2 + 1]][v81[v83[10 - 6]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v537 = v83[3 - 1];
										v536 = v81[v537];
										v535 = v83[9 - 6];
										for v739 = 1 + 0, v535 do
											v536[v739] = v81[v537 + v739];
										end
									elseif ((1088 == 1088) and (v84 > (1429 - (742 + 545)))) then
										if (v81[v83[2]] == v81[v83[4]]) then
											v75 = v75 + (2 - 1);
										else
											v75 = v83[3];
										end
									else
										local v2681;
										local v2682;
										local v2683;
										v81[v83[6 - 4]] = v83[1204 - (334 + 867)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[1407 - (317 + 1087)]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 - 0]] = {};
										v75 = v75 + (671 - (97 + 573));
										v83 = v71[v75];
										v81[v83[7 - 5]] = v83[1 + 2];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[3 + 0]][v81[v83[1339 - (1234 + 101)]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v2683 = v83[2 + 0];
										v2682 = v81[v2683];
										v2681 = v83[13 - 10];
										for v4293 = 2 - 1, v2681 do
											v2682[v4293] = v81[v2683 + v4293];
										end
									end
								elseif ((v84 <= (1345 - (711 + 489))) or (200 >= 3460)) then
									if (v84 == 144) then
										local v2697 = 0 + 0;
										local v2698;
										local v2699;
										local v2700;
										while true do
											if (v2697 == (22 - 16)) then
												v2700 = v83[2];
												v2699 = v81[v2700];
												v2698 = v83[3 + 0];
												v2697 = 13 - 6;
											end
											if (v2697 == (16 - 9)) then
												for v7050 = 643 - (483 + 159), v2698 do
													v2699[v7050] = v81[v2700 + v7050];
												end
												break;
											end
											if ((0 + 0) == v2697) then
												v2698 = nil;
												v2699 = nil;
												v2700 = nil;
												v2697 = 1;
											end
											if (v2697 == (321 - (200 + 117))) then
												v81[v83[49 - (5 + 42)]] = v83[9 - 6];
												v75 = v75 + 1;
												v83 = v71[v75];
												v2697 = 5 + 0;
											end
											if ((4080 == 4080) and (v2697 == (14 - 11))) then
												v81[v83[2]] = {};
												v75 = v75 + (537 - (298 + 238));
												v83 = v71[v75];
												v2697 = 1825 - (1370 + 451);
											end
											if (v2697 == 1) then
												v81[v83[2]] = v83[2 + 1];
												v75 = v75 + (1262 - (493 + 768));
												v83 = v71[v75];
												v2697 = 1179 - (622 + 555);
											end
											if (v2697 == 5) then
												v81[v83[621 - (581 + 38)]] = v81[v83[2 + 1]][v81[v83[9 - 5]]];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v2697 = 1928 - (567 + 1355);
											end
											if (v2697 == (1566 - (801 + 763))) then
												v81[v83[1 + 1]] = v81[v83[407 - (251 + 153)]][v81[v83[906 - (709 + 193)]]];
												v75 = v75 + (1888 - (737 + 1150));
												v83 = v71[v75];
												v2697 = 2 + 1;
											end
										end
									else
										local v2701 = 1032 - (755 + 277);
										while true do
											if ((4610 > 1856) and ((463 - (182 + 279)) == v2701)) then
												v83 = v71[v75];
												v81[v83[362 - (323 + 37)]] = v83[3];
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v2701 = 3;
											end
											if (v2701 == 6) then
												v81[v83[1 + 1]] = {};
												v75 = v75 + (1016 - (992 + 23));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[8 - 5];
												break;
											end
											if (v2701 == 1) then
												v75 = v75 + (646 - (269 + 376));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[6 - 3]][v81[v83[475 - (169 + 302)]]];
												v75 = v75 + 1 + 0;
												v2701 = 1 + 1;
											end
											if (v2701 == (1332 - (623 + 704))) then
												v83 = v71[v75];
												v81[v83[1 + 1]] = v81[v83[820 - (420 + 397)]][v81[v83[1 + 3]]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2701 = 1 + 5;
											end
											if (v2701 == (8 - 5)) then
												v81[v83[2]][v81[v83[13 - 10]]] = v81[v83[4]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[11 - 7]];
												v2701 = 9 - 5;
											end
											if (v2701 == (0 - 0)) then
												v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[1062 - (440 + 618)]];
												v75 = v75 + (1036 - (593 + 442));
												v83 = v71[v75];
												v81[v83[1 + 1]] = v83[4 - 1];
												v2701 = 1;
											end
											if (v2701 == (1048 - (801 + 243))) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[2]] = v83[8 - 5];
												v75 = v75 + 1;
												v2701 = 6 - 1;
											end
										end
									end
								elseif ((v84 == (299 - 153)) or (1278 < 426)) then
									local v2702 = v83[2 + 0];
									v81[v2702] = v81[v2702](v13(v81, v2702 + 1, v76));
								else
									local v2704 = 122 - (41 + 81);
									local v2705;
									local v2706;
									local v2707;
									while true do
										if (v2704 == (3 - 2)) then
											v81[v83[508 - (145 + 361)]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v2704 = 2;
										end
										if ((v2704 == (0 + 0)) or (2091 < 1573)) then
											v2705 = nil;
											v2706 = nil;
											v2707 = nil;
											v2704 = 1 - 0;
										end
										if (v2704 == (164 - (28 + 128))) then
											for v7053 = 1, v2705 do
												v2706[v7053] = v81[v2707 + v7053];
											end
											break;
										end
										if ((218 <= 4212) and (v2704 == (3 - 1))) then
											v81[v83[3 - 1]] = v83[2 + 1];
											v75 = v75 + (86 - (33 + 52));
											v83 = v71[v75];
											v2704 = 3;
										end
										if (v2704 == (10 - 3)) then
											v2707 = v83[2 + 0];
											v2706 = v81[v2707];
											v2705 = v83[14 - 11];
											v2704 = 27 - 19;
										end
										if (v2704 == (2 + 1)) then
											v81[v83[2]] = v81[v83[1349 - (1135 + 211)]][v81[v83[4 + 0]]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v2704 = 2 + 2;
										end
										if ((v2704 == 5) or (3602 < 3141)) then
											v81[v83[2]] = v83[1098 - (380 + 715)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2704 = 6;
										end
										if ((v2704 == (1972 - (462 + 1506))) or (4227 <= 2634)) then
											v81[v83[2]] = {};
											v75 = v75 + (1823 - (1182 + 640));
											v83 = v71[v75];
											v2704 = 13 - 8;
										end
										if (v2704 == (20 - 14)) then
											v81[v83[2]] = v81[v83[3]][v81[v83[2 + 2]]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v2704 = 7;
										end
									end
								end
							elseif ((v84 <= 154) or (4519 <= 4409)) then
								if (v84 <= 150) then
									if (v84 <= (55 + 93)) then
										local v550;
										local v551;
										local v552;
										v81[v83[345 - (323 + 20)]] = v83[6 - 3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[2 + 1]][v81[v83[4]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = {};
										v75 = v75 + (1175 - (769 + 405));
										v83 = v71[v75];
										v81[v83[2]] = v83[11 - 8];
										v75 = v75 + (86 - (9 + 76));
										v83 = v71[v75];
										v81[v83[256 - (244 + 10)]] = v81[v83[1 + 2]][v81[v83[1309 - (601 + 704)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v552 = v83[524 - (23 + 499)];
										v551 = v81[v552];
										v550 = v83[1 + 2];
										for v742 = 1 + 0, v550 do
											v551[v742] = v81[v552 + v742];
										end
									elseif ((4514 >= 1479) and (v84 == (455 - (35 + 271)))) then
										local v2708;
										local v2709;
										local v2710;
										v81[v83[2 - 0]] = v83[3 - 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[8 - 6]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[10 - 7];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4 + 0]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2710 = v83[5 - 3];
										v2709 = v81[v2710];
										v2708 = v83[8 - 5];
										for v4296 = 1876 - (1136 + 739), v2708 do
											v2709[v4296] = v81[v2710 + v4296];
										end
									else
										v81[v83[7 - 5]] = v83[5 - 2];
									end
								elseif ((v84 <= (726 - (125 + 449))) or (3414 <= 210)) then
									if (v84 > (385 - 234)) then
										local v2726;
										local v2727;
										local v2728;
										v81[v83[881 - (96 + 783)]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1030 - (888 + 140)]] = v83[3 + 0];
										v75 = v75 + (63 - (41 + 21));
										v83 = v71[v75];
										v81[v83[589 - (570 + 17)]] = v81[v83[1 + 2]][v81[v83[2 + 2]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = {};
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[11 - 8];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[3 + 0]][v81[v83[2 + 2]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2728 = v83[757 - (321 + 434)];
										v2727 = v81[v2728];
										v2726 = v83[8 - 5];
										for v4299 = 1 + 0, v2726 do
											v2727[v4299] = v81[v2728 + v4299];
										end
									else
										local v2743;
										v81[v83[1 + 1]][v83[3]] = v81[v83[1290 - (137 + 1149)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[1826 - (566 + 1257)]];
										v75 = v75 + (678 - (391 + 286));
										v83 = v71[v75];
										v81[v83[1376 - (384 + 990)]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[615 - (505 + 108)]] = v83[3 + 0];
										v75 = v75 + (1298 - (549 + 748));
										v83 = v71[v75];
										v2743 = v83[1 + 1];
										v81[v2743] = v81[v2743](v13(v81, v2743 + 1, v83[3 + 0]));
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1 + 1]][v83[3]] = v81[v83[3 + 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[5 - 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[2 + 1];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v2743 = v83[694 - (205 + 487)];
										v81[v2743] = v81[v2743](v13(v81, v2743 + (2 - 1), v83[1 + 2]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v83[3]] = v81[v83[13 - 9]];
										v75 = v75 + (1427 - (309 + 1117));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[4 - 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[7 - 4];
										v75 = v75 + (77 - (50 + 26));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[1 + 2];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2743 = v83[2 + 0];
										v81[v2743] = v81[v2743](v13(v81, v2743 + (1819 - (520 + 1298)), v83[1063 - (420 + 640)]));
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[3 - 1]][v83[1585 - (15 + 1567)]] = v81[v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]];
										v75 = v75 + (1985 - (110 + 1874));
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + (783 - (101 + 681));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[7 - 4];
										v75 = v75 + (544 - (120 + 423));
										v83 = v71[v75];
										v2743 = v83[5 - 3];
										v81[v2743] = v81[v2743](v13(v81, v2743 + 1 + 0, v83[1 + 2]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]][v83[2 + 1]] = v81[v83[10 - 6]];
										v75 = v75 + (46 - (41 + 4));
										v83 = v71[v75];
										v81[v83[1085 - (246 + 837)]] = v81[v83[909 - (492 + 414)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[6 - 3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[1052 - (829 + 220)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2743 = v83[2 + 0];
										v81[v2743] = v81[v2743](v13(v81, v2743 + (3 - 2), v83[5 - 2]));
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1497 - (345 + 1150)]][v83[1360 - (1017 + 340)]] = v81[v83[2 + 2]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[2 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1841 - (1279 + 560)]] = v83[5 - 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2743 = v83[4 - 2];
										v81[v2743] = v81[v2743](v13(v81, v2743 + (1464 - (140 + 1323)), v83[3]));
										v75 = v75 + (1989 - (1607 + 381));
										v83 = v71[v75];
										v81[v83[2 - 0]][v83[8 - 5]] = v81[v83[198 - (162 + 32)]];
										v75 = v75 + (605 - (440 + 164));
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[6 - 3]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[959 - (553 + 403)];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[3];
										v75 = v75 + (342 - (111 + 230));
										v83 = v71[v75];
										v2743 = v83[2 - 0];
										v81[v2743] = v81[v2743](v13(v81, v2743 + 1, v83[12 - 9]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]][v83[341 - (85 + 253)]] = v81[v83[1853 - (1558 + 291)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[1085 - (985 + 97)];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[615 - (424 + 189)]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2743 = v83[2 + 0];
										v81[v2743] = v81[v2743](v13(v81, v2743 + (1024 - (19 + 1004)), v83[3 + 0]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]][v83[3 + 0]] = v81[v83[1349 - (231 + 1114)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1047 - (114 + 931)]] = v81[v83[3 + 0]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[1 + 2];
										v75 = v75 + (64 - (17 + 46));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[8 - 5];
										v75 = v75 + (1037 - (931 + 105));
										v83 = v71[v75];
										v2743 = v83[1130 - (718 + 410)];
										v81[v2743] = v81[v2743](v13(v81, v2743 + (1206 - (361 + 844)), v83[1913 - (1760 + 150)]));
										v75 = v75 + (1568 - (917 + 650));
										v83 = v71[v75];
										v81[v83[183 - (104 + 77)]][v83[7 - 4]] = v81[v83[1 + 3]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[267 - (53 + 211)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[7 - 4];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[10 - 7];
										v75 = v75 + (1301 - (282 + 1018));
										v83 = v71[v75];
										v2743 = v83[2];
										v81[v2743] = v81[v2743](v13(v81, v2743 + 1 + 0, v83[3]));
										v75 = v75 + (515 - (162 + 352));
										v83 = v71[v75];
										v81[v83[1 + 1]][v83[3]] = v81[v83[933 - (22 + 907)]];
										v75 = v75 + (440 - (280 + 159));
										v83 = v71[v75];
										v81[v83[1582 - (1064 + 516)]] = v81[v83[8 - 5]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2743 = v83[1907 - (1293 + 612)];
										v81[v2743] = v81[v2743](v13(v81, v2743 + 1, v83[2 + 1]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]][v83[11 - 8]] = v81[v83[3 + 1]];
										v75 = v75 + (1752 - (782 + 969));
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[1671 - (1085 + 583)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[1463 - (229 + 1231)];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[8 - 5];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2743 = v83[6 - 4];
										v81[v2743] = v81[v2743](v13(v81, v2743 + 1 + 0, v83[148 - (48 + 97)]));
										v75 = v75 + (1847 - (676 + 1170));
										v83 = v71[v75];
										v81[v83[1974 - (830 + 1142)]][v83[3]] = v81[v83[99 - (41 + 54)]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]];
										v75 = v75 + (1067 - (536 + 530));
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[12 - 9];
										v75 = v75 + (1256 - (1129 + 126));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[455 - (282 + 170)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2743 = v83[2];
										v81[v2743] = v81[v2743](v13(v81, v2743 + 1, v83[2 + 1]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]][v83[3]] = v81[v83[19 - 15]];
										v75 = v75 + (1224 - (610 + 613));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[8 - 5]];
										v75 = v75 + (1609 - (1182 + 426));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[2 + 1];
										v75 = v75 + (1235 - (1210 + 24));
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2743 = v83[1 + 1];
										v81[v2743] = v81[v2743](v13(v81, v2743 + (1358 - (307 + 1050)), v83[3]));
										v75 = v75 + (815 - (693 + 121));
										v83 = v71[v75];
										v81[v83[286 - (267 + 17)]][v83[62 - (22 + 37)]] = v81[v83[7 - 3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[1450 - (391 + 1056)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1578 - (1117 + 459)]] = v83[8 - 5];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[464 - (65 + 396)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2743 = v83[4 - 2];
										v81[v2743] = v81[v2743](v13(v81, v2743 + (3 - 2), v83[2 + 1]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1703 - (620 + 1081)]][v83[1 + 2]] = v81[v83[1884 - (845 + 1035)]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[1572 - (1348 + 221)]];
										v75 = v75 + (1042 - (320 + 721));
										v83 = v71[v75];
										v81[v83[1959 - (1284 + 673)]] = v83[6 - 3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v2743 = v83[1 + 1];
										v81[v2743] = v81[v2743](v13(v81, v2743 + (2 - 1), v83[8 - 5]));
									end
								elseif ((v84 == 153) or (349 <= 242)) then
									v81[v83[7 - 5]][v81[v83[6 - 3]]] = v81[v83[15 - 11]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[364 - (170 + 191)];
									v75 = v75 + (1743 - (209 + 1533));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[1419 - (1049 + 367)]][v81[v83[8 - 4]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v83[8 - 5];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[7 - 4]]] = v81[v83[7 - 3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[226 - (167 + 56)]]] = v81[v83[10 - 6]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3 - 0];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[882 - (752 + 128)]] = v81[v83[3]][v81[v83[4 + 0]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = {};
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[20 - (7 + 11)]] = v83[3 + 0];
								else
									local v2847 = 131 - (87 + 44);
									local v2848;
									local v2849;
									local v2850;
									while true do
										if ((2209 >= 1935) and (v2847 == 3)) then
											v81[v83[5 - 3]] = v81[v83[9 - 6]][v81[v83[14 - 10]]];
											v75 = v75 + (1536 - (656 + 879));
											v83 = v71[v75];
											v2847 = 7 - 3;
										end
										if (v2847 == (2 + 6)) then
											for v7056 = 2 - 1, v2848 do
												v2849[v7056] = v81[v2850 + v7056];
											end
											break;
										end
										if (v2847 == (0 - 0)) then
											v2848 = nil;
											v2849 = nil;
											v2850 = nil;
											v2847 = 1083 - (529 + 553);
										end
										if ((6 + 0) == v2847) then
											v81[v83[2]] = v81[v83[940 - (613 + 324)]][v81[v83[1324 - (585 + 735)]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v2847 = 14 - 7;
										end
										if (v2847 == (1 + 0)) then
											v81[v83[5 - 3]] = {};
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v2847 = 17 - (6 + 9);
										end
										if ((2 == v2847) or (1369 == 4914)) then
											v81[v83[7 - 5]] = v83[3];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v2847 = 8 - 5;
										end
										if (v2847 == (11 - 7)) then
											v81[v83[462 - (59 + 401)]] = {};
											v75 = v75 + (790 - (743 + 46));
											v83 = v71[v75];
											v2847 = 5;
										end
										if ((v2847 == (3 + 2)) or (3459 >= 4887)) then
											v81[v83[2]] = v83[6 - 3];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v2847 = 5 + 1;
										end
										if ((v2847 == (544 - (285 + 252))) or (2964 <= 78)) then
											v2850 = v83[477 - (146 + 329)];
											v2849 = v81[v2850];
											v2848 = v83[3];
											v2847 = 8;
										end
									end
								end
							elseif (v84 <= (76 + 81)) then
								if ((v84 <= (86 + 69)) or (730 == 3621)) then
									local v565;
									v81[v83[1472 - (417 + 1053)]] = v81[v83[1875 - (1251 + 621)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[8 - 6]] = v83[239 - (213 + 23)];
									v75 = v75 + (745 - (617 + 127));
									v83 = v71[v75];
									v81[v83[2]] = v83[695 - (181 + 511)];
									v75 = v75 + (381 - (187 + 193));
									v83 = v71[v75];
									v565 = v83[2];
									v81[v565] = v81[v565](v13(v81, v565 + (1290 - (107 + 1182)), v83[1987 - (1623 + 361)]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[1824 - (325 + 1496)]]] = v81[v83[360 - (235 + 121)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[2 + 1];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[52 - (28 + 21)]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[690 - (630 + 57)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v83[1 + 2];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v565 = v83[2];
									v81[v565] = v81[v565](v13(v81, v565 + 1, v83[891 - (21 + 867)]));
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[1769 - (1555 + 212)]][v81[v83[3]]] = v81[v83[4 + 0]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[6 - 3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v565 = v83[2];
									v81[v565] = v81[v565](v13(v81, v565 + 1, v83[4 - 1]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[8 - 5]]] = v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1 + 2];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[7 - 4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[944 - (903 + 38)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[388 - (74 + 312)]] = v83[1323 - (837 + 483)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v565 = v83[2 - 0];
									v81[v565] = v81[v565](v13(v81, v565 + 1 + 0, v83[2 + 1]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1543 - (1455 + 86)]][v81[v83[3]]] = v81[v83[828 - (803 + 21)]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[4 - 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[6 - 3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[3 + 0];
									v75 = v75 + 1;
									v83 = v71[v75];
									v565 = v83[901 - (497 + 402)];
									v81[v565] = v81[v565](v13(v81, v565 + 1, v83[991 - (578 + 410)]));
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]][v81[v83[1546 - (464 + 1079)]]] = v81[v83[3 + 1]];
									v75 = v75 + (1697 - (1398 + 298));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[1 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1292 - (561 + 729)]] = v83[1 + 2];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[1162 - (104 + 1055)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v565 = v83[1675 - (308 + 1365)];
									v81[v565] = v81[v565](v13(v81, v565 + (548 - (500 + 47)), v83[4 - 1]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1952 - (186 + 1764)]][v81[v83[3 + 0]]] = v81[v83[3 + 1]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[2 + 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1176 - (1133 + 41)]] = v83[3];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[3];
									v75 = v75 + (1894 - (1786 + 107));
									v83 = v71[v75];
									v565 = v83[2];
									v81[v565] = v81[v565](v13(v81, v565 + (2 - 1), v83[1532 - (344 + 1185)]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[699 - (72 + 623)]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[10 - 7];
									v75 = v75 + (1893 - (1093 + 799));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[11 - 8];
									v75 = v75 + (1056 - (721 + 334));
									v83 = v71[v75];
									v565 = v83[1864 - (1322 + 540)];
									v81[v565] = v81[v565](v13(v81, v565 + 1 + 0, v83[1375 - (575 + 797)]));
									v75 = v75 + (1130 - (274 + 855));
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[1 + 2]]] = v81[v83[6 - 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1812 - (986 + 823)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1016 - (872 + 141)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[10 - 7];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[541 - (139 + 399)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v565 = v83[2];
									v81[v565] = v81[v565](v13(v81, v565 + 1 + 0, v83[1705 - (1038 + 664)]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[4 - 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[7 - 4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[576 - (388 + 186)]] = v83[489 - (421 + 65)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v565 = v83[1265 - (604 + 659)];
									v81[v565] = v81[v565](v13(v81, v565 + (1505 - (1267 + 237)), v83[3]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[183 - (112 + 69)]][v81[v83[3]]] = v81[v83[4]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[487 - (319 + 165)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1356 - (634 + 719)]];
									v75 = v75 + (1040 - (248 + 791));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1088 - (888 + 197)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v565 = v83[7 - 5];
									v81[v565] = v81[v565](v13(v81, v565 + (1 - 0), v83[11 - 8]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[6 - 4]][v81[v83[1 + 2]]] = v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[4 - 1]];
									v75 = v75 + (1967 - (1355 + 611));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[1004 - (497 + 504)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v565 = v83[2 + 0];
									v81[v565] = v81[v565](v13(v81, v565 + 1, v83[9 - 6]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1259 - (1159 + 98)]] = v83[1446 - (418 + 1025)];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[1796 - (297 + 1496)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[945 - (547 + 396)]] = v83[6 - 3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v565 = v83[4 - 2];
									v81[v565] = v81[v565](v13(v81, v565 + (1744 - (999 + 744)), v83[2 + 1]));
									v75 = v75 + (501 - (324 + 176));
									v83 = v71[v75];
									v81[v83[1512 - (1171 + 339)]][v81[v83[950 - (492 + 455)]]] = v81[v83[4]];
									v75 = v75 + (1477 - (805 + 671));
									v83 = v71[v75];
									v81[v83[1315 - (265 + 1048)]] = v83[3];
									v75 = v75 + (1577 - (252 + 1324));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1572 - (544 + 1026)]] = v83[3 + 0];
								elseif ((301 < 4219) and (v84 > 156)) then
									local v2851 = 0 - 0;
									local v2852;
									local v2853;
									local v2854;
									while true do
										if (v2851 == (665 - (217 + 445))) then
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + (941 - (492 + 448));
											v83 = v71[v75];
											v81[v83[1434 - (1152 + 280)]] = v81[v83[4 - 1]][v81[v83[19 - 15]]];
											v2851 = 4 + 0;
										end
										if ((v2851 == (2 + 3)) or (1855 > 2408)) then
											v2852 = v83[848 - (175 + 670)];
											for v7059 = 1 + 0, v2852 do
												v2853[v7059] = v81[v2854 + v7059];
											end
											break;
										end
										if (v2851 == (1655 - (1411 + 242))) then
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v2851 = 696 - (678 + 15);
										end
										if (v2851 == 1) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[812 - (593 + 217)]] = v81[v83[7 - 4]][v81[v83[4]]];
											v75 = v75 + 1 + 0;
											v2851 = 3 - 1;
										end
										if ((3635 < 4494) and (v2851 == (490 - (112 + 378)))) then
											v2852 = nil;
											v2853 = nil;
											v2854 = nil;
											v81[v83[1549 - (952 + 595)]] = v83[3];
											v2851 = 397 - (23 + 373);
										end
										if (v2851 == (8 - 4)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v2854 = v83[2];
											v2853 = v81[v2854];
											v2851 = 5;
										end
									end
								else
									v81[v83[5 - 3]][v81[v83[3 + 0]]] = v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1786 - (1102 + 682)]] = v83[1 + 2];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1386 - (118 + 1265)]][v81[v83[1103 - (725 + 374)]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[2001 - (1142 + 856)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3]]] = v81[v83[6 - 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[4]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[646 - (104 + 540)]] = v83[965 - (496 + 466)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[4 - 1]][v81[v83[728 - (657 + 67)]]];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[1748 - (127 + 1619)]] = {};
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v83[1193 - (1069 + 121)];
								end
							elseif ((2295 >= 592) and (v84 <= (50 + 109))) then
								if (v84 == 158) then
									v81[v83[2 + 0]][v81[v83[11 - 8]]] = v81[v83[10 - 6]];
									v75 = v75 + (1191 - (27 + 1163));
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1161 - (371 + 788)]] = v81[v83[3]][v81[v83[3 + 1]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]][v81[v83[2 + 1]]] = v81[v83[11 - 7]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[431 - (139 + 290)]][v81[v83[1338 - (639 + 696)]]] = v81[v83[9 - 5]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[507 - (156 + 348)];
									v75 = v75 + (891 - (488 + 402));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[206 - (186 + 16)]]];
									v75 = v75 + (324 - (119 + 204));
									v83 = v71[v75];
									v81[v83[2]] = {};
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[3];
								else
									local v2889;
									local v2890;
									local v2891;
									v81[v83[2]] = {};
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[6 - 4]] = v83[2 + 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v81[v83[3 + 0]][v81[v83[1763 - (1709 + 50)]]];
									v75 = v75 + (1330 - (249 + 1080));
									v83 = v71[v75];
									v81[v83[2 + 0]] = {};
									v75 = v75 + (452 - (155 + 296));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3 + 0];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[2 + 1]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v2891 = v83[6 - 4];
									v2890 = v81[v2891];
									v2889 = v83[3];
									for v4302 = 1, v2889 do
										v2890[v4302] = v81[v2891 + v4302];
									end
								end
							elseif (v84 == (80 + 80)) then
								local v2905 = 0 + 0;
								local v2906;
								local v2907;
								local v2908;
								while true do
									if (v2905 == (0 - 0)) then
										v2906 = nil;
										v2907 = nil;
										v2908 = nil;
										v81[v83[1 + 1]] = {};
										v2905 = 2 - 1;
									end
									if (v2905 == 2) then
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[3]][v81[v83[702 - (604 + 94)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v2905 = 1806 - (500 + 1303);
									end
									if ((1524 - (916 + 604)) == v2905) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[11 - 8]][v81[v83[4]]];
										v75 = v75 + 1;
										v2905 = 5;
									end
									if ((2728 == 2728) and (v2905 == 5)) then
										v83 = v71[v75];
										v2908 = v83[2];
										v2907 = v81[v2908];
										v2906 = v83[2 + 1];
										v2905 = 6 + 0;
									end
									if (v2905 == (4 + 2)) then
										for v7062 = 1476 - (754 + 721), v2906 do
											v2907[v7062] = v81[v2908 + v7062];
										end
										break;
									end
									if ((509 - (181 + 325)) == v2905) then
										v81[v83[2]] = {};
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[1413 - (413 + 997)];
										v2905 = 9 - 5;
									end
									if (v2905 == (1 - 0)) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v2905 = 6 - 4;
									end
								end
							else
								v81[v83[2]][v81[v83[6 - 3]]] = v81[v83[1745 - (708 + 1033)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[3 + 0];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1 + 2]][v81[v83[9 - 5]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[3];
								v75 = v75 + (1658 - (505 + 1152));
								v83 = v71[v75];
								v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[3 + 1]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]][v81[v83[3 - 0]]] = v81[v83[15 - 11]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1525 - (53 + 1470)]] = v83[3];
								v75 = v75 + (1005 - (482 + 522));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[649 - (496 + 150)]][v81[v83[4 - 0]]];
								v75 = v75 + (86 - (32 + 53));
								v83 = v71[v75];
								v81[v83[1812 - (956 + 854)]] = {};
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[5 - 2];
							end
						elseif ((v84 <= (18 + 170)) or (1582 <= 1424)) then
							if (v84 <= (489 - 315)) then
								if (v84 <= 167) then
									if (v84 <= 164) then
										if ((v84 <= (2055 - (1192 + 701))) or (393 >= 2017)) then
											v81[v83[1623 - (326 + 1295)]][v81[v83[3]]] = v81[v83[1816 - (1595 + 217)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[218 - (93 + 123)]] = v81[v83[1839 - (848 + 988)]][v81[v83[1564 - (546 + 1014)]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[76 - (53 + 21)]][v81[v83[3]]] = v81[v83[4]];
											v75 = v75 + (292 - (167 + 124));
											v83 = v71[v75];
											v81[v83[182 - (4 + 176)]][v81[v83[6 - 3]]] = v81[v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3 + 0]][v81[v83[4]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = {};
											v75 = v75 + (120 - (93 + 26));
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
										elseif (v84 == (122 + 41)) then
											local v2925 = 0 - 0;
											local v2926;
											local v2927;
											local v2928;
											while true do
												if (((2 + 0) == v2925) or (4350 == 423)) then
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[2 + 1]][v81[v83[4]]];
													v75 = v75 + 1;
													v83 = v71[v75];
													v2925 = 1 + 2;
												end
												if ((1655 - (220 + 1434)) == v2925) then
													v75 = v75 + (3 - 2);
													v83 = v71[v75];
													v81[v83[3 - 1]] = v83[10 - 7];
													v75 = v75 + (1603 - (906 + 696));
													v2925 = 3 - 1;
												end
												if (v2925 == 0) then
													v2926 = nil;
													v2927 = nil;
													v2928 = nil;
													v81[v83[2]] = {};
													v2925 = 1 + 0;
												end
												if ((682 - (178 + 501)) == v2925) then
													v81[v83[9 - 7]] = {};
													v75 = v75 + 1;
													v83 = v71[v75];
													v81[v83[2]] = v83[1 + 2];
													v2925 = 1031 - (444 + 583);
												end
												if (v2925 == 6) then
													for v7065 = 1 - 0, v2926 do
														v2927[v7065] = v81[v2928 + v7065];
													end
													break;
												end
												if ((4 + 0) == v2925) then
													v75 = v75 + (430 - (407 + 22));
													v83 = v71[v75];
													v81[v83[2]] = v81[v83[5 - 2]][v81[v83[4]]];
													v75 = v75 + (1233 - (1139 + 93));
													v2925 = 5;
												end
												if ((3 + 2) == v2925) then
													v83 = v71[v75];
													v2928 = v83[1346 - (237 + 1107)];
													v2927 = v81[v2928];
													v2926 = v83[3];
													v2925 = 6;
												end
											end
										else
											local v2929 = v83[1 + 1];
											do
												return v81[v2929](v13(v81, v2929 + (12 - (4 + 7)), v83[11 - 8]));
											end
										end
									elseif (v84 <= (678 - (8 + 505))) then
										local v660;
										v81[v83[2]] = v81[v83[2 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3];
										v75 = v75 + (936 - (662 + 273));
										v83 = v71[v75];
										v660 = v83[1 + 1];
										v81[v660] = v81[v660](v13(v81, v660 + 1 + 0, v83[10 - 7]));
										v75 = v75 + (245 - (127 + 117));
										v83 = v71[v75];
										v81[v83[209 - (105 + 102)]][v83[1 + 2]] = v81[v83[9 - 5]];
									elseif ((3161 >= 2045) and (v84 > (35 + 131))) then
										local v2930;
										local v2931;
										local v2932;
										v81[v83[2]] = {};
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[749 - (588 + 158)];
										v75 = v75 + (1081 - (126 + 954));
										v83 = v71[v75];
										v81[v83[6 - 4]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[345 - (52 + 291)]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[281 - (76 + 202)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[849 - (504 + 342)]][v81[v83[3 + 1]]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v2932 = v83[2 + 0];
										v2931 = v81[v2932];
										v2930 = v83[6 - 3];
										for v4305 = 1 + 0, v2930 do
											v2931[v4305] = v81[v2932 + v4305];
										end
									else
										local v2945;
										local v2946;
										local v2947;
										v81[v83[482 - (387 + 93)]] = {};
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v81[v83[3 + 0]][v81[v83[943 - (36 + 903)]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = {};
										v75 = v75 + (263 - (220 + 42));
										v83 = v71[v75];
										v81[v83[7 - 5]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1507 - (300 + 1205)]] = v81[v83[9 - 6]][v81[v83[4]]];
										v75 = v75 + (923 - (728 + 194));
										v83 = v71[v75];
										v2947 = v83[659 - (445 + 212)];
										v2946 = v81[v2947];
										v2945 = v83[3];
										for v4308 = 3 - 2, v2945 do
											v2946[v4308] = v81[v2947 + v4308];
										end
									end
								elseif (v84 <= (105 + 65)) then
									if ((3332 > 2568) and (v84 <= (150 + 18))) then
										local v670 = 0;
										local v671;
										local v672;
										local v673;
										while true do
											if (v670 == (1357 - (167 + 1190))) then
												v671 = nil;
												v672 = nil;
												v673 = nil;
												v670 = 645 - (315 + 329);
											end
											if (((1 + 0) == v670) or (2573 <= 2291)) then
												v81[v83[2]] = {};
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v670 = 652 - (545 + 105);
											end
											if (v670 == (1 + 1)) then
												v81[v83[1 + 1]] = v83[3 + 0];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v670 = 4 - 1;
											end
											if (v670 == (12 - 6)) then
												v81[v83[1191 - (1044 + 145)]] = v81[v83[3]][v81[v83[4]]];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v670 = 1257 - (122 + 1128);
											end
											if ((1822 - (371 + 1444)) == v670) then
												v673 = v83[18 - (14 + 2)];
												v672 = v81[v673];
												v671 = v83[1 + 2];
												v670 = 7 + 1;
											end
											if ((1667 <= 1727) and (v670 == (5 - 2))) then
												v81[v83[2 - 0]] = v81[v83[2 + 1]][v81[v83[7 - 3]]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v670 = 3 + 1;
											end
											if (v670 == (12 - 7)) then
												v81[v83[6 - 4]] = v83[3];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v670 = 6;
											end
											if (v670 == (1 + 3)) then
												v81[v83[1 + 1]] = {};
												v75 = v75 + 1;
												v83 = v71[v75];
												v670 = 20 - 15;
											end
											if (v670 == 8) then
												for v4631 = 1 - 0, v671 do
													v672[v4631] = v81[v673 + v4631];
												end
												break;
											end
										end
									elseif (v84 > (318 - (50 + 99))) then
										local v2960;
										local v2961;
										local v2962;
										v81[v83[441 - (123 + 316)]] = v83[4 - 1];
										v75 = v75 + (1583 - (1507 + 75));
										v83 = v71[v75];
										v81[v83[596 - (145 + 449)]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + (1112 - (241 + 870));
										v83 = v71[v75];
										v81[v83[2 + 0]] = {};
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[7 - 5]] = v83[3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[760 - (627 + 130)]][v81[v83[149 - (82 + 63)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v2962 = v83[2 + 0];
										v2961 = v81[v2962];
										v2960 = v83[1287 - (386 + 898)];
										for v4330 = 1, v2960 do
											v2961[v4330] = v81[v2962 + v4330];
										end
									else
										local v2976 = 0 + 0;
										local v2977;
										local v2978;
										local v2979;
										while true do
											if ((3642 >= 2739) and (v2976 == (12 - 8))) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v2979 = v83[2 + 0];
												v2978 = v81[v2979];
												v2976 = 974 - (659 + 310);
											end
											if (v2976 == (3 + 2)) then
												v2977 = v83[606 - (364 + 239)];
												for v7068 = 1 + 0, v2977 do
													v2978[v7068] = v81[v2979 + v7068];
												end
												break;
											end
											if (v2976 == (7 - 5)) then
												v83 = v71[v75];
												v81[v83[2 - 0]] = {};
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v2976 = 3;
											end
											if (v2976 == 1) then
												v75 = v75 + 1;
												v83 = v71[v75];
												v81[v83[195 - (30 + 163)]] = v81[v83[8 - 5]][v81[v83[559 - (213 + 342)]]];
												v75 = v75 + (2 - 1);
												v2976 = 2;
											end
											if (v2976 == (1421 - (843 + 575))) then
												v81[v83[704 - (347 + 355)]] = v83[3];
												v75 = v75 + (2 - 1);
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3]][v81[v83[471 - (386 + 81)]]];
												v2976 = 8 - 4;
											end
											if ((v2976 == (0 - 0)) or (4686 == 3242)) then
												v2977 = nil;
												v2978 = nil;
												v2979 = nil;
												v81[v83[2]] = v83[2 + 1];
												v2976 = 1;
											end
										end
									end
								elseif (v84 <= 172) then
									if (v84 > (123 + 48)) then
										v81[v83[3 - 1]] = v81[v83[1660 - (610 + 1047)]][v83[4]];
									else
										local v2982 = v83[1 + 1];
										local v2983, v2984 = v74(v81[v2982](v13(v81, v2982 + (564 - (304 + 259)), v83[8 - 5])));
										v76 = (v2984 + v2982) - (966 - (306 + 659));
										local v2985 = 0 + 0;
										for v4333 = v2982, v76 do
											local v4334 = 0 + 0;
											while true do
												if (v4334 == 0) then
													v2985 = v2985 + 1;
													v81[v4333] = v2983[v2985];
													break;
												end
											end
										end
									end
								elseif ((v84 == (1912 - (315 + 1424))) or (1872 > 4054)) then
									local v2986;
									local v2987;
									local v2988;
									v81[v83[590 - (27 + 561)]] = {};
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[2 + 1];
									v75 = v75 + (1928 - (1904 + 23));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[1 + 2]][v81[v83[2002 - (1852 + 146)]]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[7 - 5]] = {};
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[188 - (18 + 168)]] = v83[2 + 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 - 0]][v81[v83[6 - 2]]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v2988 = v83[2 - 0];
									v2987 = v81[v2988];
									v2986 = v83[641 - (399 + 239)];
									for v4335 = 3 - 2, v2986 do
										v2987[v4335] = v81[v2988 + v4335];
									end
								else
									for v4338 = v83[1410 - (779 + 629)], v83[1 + 2] do
										v81[v4338] = nil;
									end
								end
							elseif ((v84 <= 181) or (1292 >= 4566)) then
								if ((3766 <= 4403) and (v84 <= (97 + 80))) then
									if (v84 <= 175) then
										local v674 = 0;
										while true do
											if ((1770 - (855 + 914)) == v674) then
												v75 = v75 + (23 - (15 + 7));
												v83 = v71[v75];
												v81[v83[2]] = v81[v83[3]][v81[v83[4 + 0]]];
												v75 = v75 + (1703 - (646 + 1056));
												v674 = 1 + 1;
											end
											if (v674 == (0 + 0)) then
												v81[v83[2]][v81[v83[4 - 1]]] = v81[v83[1870 - (1443 + 423)]];
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[4 - 2]] = v83[3 + 0];
												v674 = 1 + 0;
											end
											if (v674 == (7 - 4)) then
												v81[v83[2]][v81[v83[1509 - (271 + 1235)]]] = v81[v83[2 + 2]];
												v75 = v75 + (3 - 2);
												v83 = v71[v75];
												v81[v83[2]][v81[v83[9 - 6]]] = v81[v83[12 - 8]];
												v674 = 1048 - (463 + 581);
											end
											if ((1 + 4) == v674) then
												v83 = v71[v75];
												v81[v83[1177 - (599 + 576)]] = v81[v83[1515 - (316 + 1196)]][v81[v83[4]]];
												v75 = v75 + (1304 - (970 + 333));
												v83 = v71[v75];
												v674 = 2 + 4;
											end
											if ((2 + 0) == v674) then
												v83 = v71[v75];
												v81[v83[963 - (538 + 423)]] = v83[1 + 2];
												v75 = v75 + (4 - 3);
												v83 = v71[v75];
												v674 = 3;
											end
											if ((v674 == (10 - 6)) or (4787 <= 3756)) then
												v75 = v75 + 1 + 0;
												v83 = v71[v75];
												v81[v83[1356 - (1061 + 293)]] = v83[3];
												v75 = v75 + (530 - (153 + 376));
												v674 = 5;
											end
											if ((3 + 3) == v674) then
												v81[v83[707 - (173 + 532)]] = {};
												v75 = v75 + (1 - 0);
												v83 = v71[v75];
												v81[v83[2]] = v83[8 - 5];
												break;
											end
										end
									elseif (v84 == (441 - 265)) then
										local v3001;
										v81[v83[1 + 1]] = v81[v83[6 - 3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[7 - 5]] = v83[2 + 1];
										v75 = v75 + (1537 - (561 + 975));
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3001 = v83[2 + 0];
										v81[v3001] = v81[v3001](v13(v81, v3001 + (2 - 1), v83[1 + 2]));
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[8 - 4]];
										v75 = v75 + (124 - (115 + 8));
										v83 = v71[v75];
										v81[v83[1558 - (1476 + 80)]] = v83[3];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[844 - (648 + 194)]] = v81[v83[258 - (111 + 144)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[4 - 1];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3001 = v83[319 - (275 + 42)];
										v81[v3001] = v81[v3001](v13(v81, v3001 + (183 - (104 + 78)), v83[3]));
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[4 - 2]][v81[v83[1939 - (813 + 1123)]]] = v81[v83[1 + 3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[3 + 0];
										v75 = v75 + (1794 - (144 + 1649));
										v83 = v71[v75];
										v81[v83[553 - (125 + 426)]] = v81[v83[6 - 3]];
										v75 = v75 + (83 - (51 + 31));
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[292 - (174 + 115)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3001 = v83[2];
										v81[v3001] = v81[v3001](v13(v81, v3001 + 1 + 0, v83[3]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1700 - (941 + 757)]][v81[v83[3]]] = v81[v83[1166 - (696 + 466)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[6 - 3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[1354 - (165 + 1186)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[9 - 7]] = v83[2 + 1];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3001 = v83[2 + 0];
										v81[v3001] = v81[v3001](v13(v81, v3001 + 1, v83[3 + 0]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[1041 - (853 + 184)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[37 - (14 + 20)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[768 - (35 + 731)]] = v83[1 + 2];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3001 = v83[2];
										v81[v3001] = v81[v3001](v13(v81, v3001 + (1 - 0), v83[5 - 2]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[149 - (26 + 121)]][v81[v83[3]]] = v81[v83[115 - (95 + 16)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[3 - 0];
										v75 = v75 + (552 - (423 + 128));
										v83 = v71[v75];
										v81[v83[1576 - (1331 + 243)]] = v81[v83[7 - 4]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + (1635 - (284 + 1350));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[31 - (10 + 18)];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v3001 = v83[1309 - (73 + 1234)];
										v81[v3001] = v81[v3001](v13(v81, v3001 + 1, v83[740 - (503 + 234)]));
										v75 = v75 + (1902 - (425 + 1476));
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[5 - 2]]] = v81[v83[1060 - (856 + 200)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1613 - (734 + 877)]] = v83[2 + 1];
										v75 = v75 + (1482 - (514 + 967));
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[3];
										v75 = v75 + (648 - (325 + 322));
										v83 = v71[v75];
										v3001 = v83[2 - 0];
										v81[v3001] = v81[v3001](v13(v81, v3001 + (1831 - (1668 + 162)), v83[8 - 5]));
										v75 = v75 + (233 - (43 + 189));
										v83 = v71[v75];
										v81[v83[2]][v81[v83[5 - 2]]] = v81[v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1660 - (694 + 964)]] = v83[5 - 2];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[2 + 1]];
										v75 = v75 + (338 - (57 + 280));
										v83 = v71[v75];
										v81[v83[1956 - (414 + 1540)]] = v83[3];
										v75 = v75 + (901 - (561 + 339));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3 + 0];
										v75 = v75 + (1551 - (1342 + 208));
										v83 = v71[v75];
										v3001 = v83[2];
										v81[v3001] = v81[v3001](v13(v81, v3001 + (1 - 0), v83[10 - 7]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[12 - 8]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1848 - (1139 + 707)]] = v83[2 + 1];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[542 - (335 + 205)]] = v81[v83[2 + 1]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[3];
										v75 = v75 + (1063 - (622 + 440));
										v83 = v71[v75];
										v3001 = v83[3 - 1];
										v81[v3001] = v81[v3001](v13(v81, v3001 + (753 - (672 + 80)), v83[1129 - (601 + 525)]));
										v75 = v75 + (1819 - (1515 + 303));
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[3 - 0]]] = v81[v83[4]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[965 - (144 + 818)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[29 - (5 + 22)]] = v81[v83[3]];
										v75 = v75 + (862 - (446 + 415));
										v83 = v71[v75];
										v81[v83[2]] = v83[216 - (204 + 9)];
										v75 = v75 + (1259 - (479 + 779));
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[118 - (61 + 54)];
										v75 = v75 + (1806 - (1235 + 570));
										v83 = v71[v75];
										v3001 = v83[970 - (217 + 751)];
										v81[v3001] = v81[v3001](v13(v81, v3001 + 1 + 0, v83[1 + 2]));
										v75 = v75 + (111 - (94 + 16));
										v83 = v71[v75];
										v81[v83[6 - 4]][v81[v83[3 + 0]]] = v81[v83[3 + 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1547 - (1188 + 357)]] = v83[3];
										v75 = v75 + (810 - (580 + 229));
										v83 = v71[v75];
										v81[v83[512 - (82 + 428)]] = v81[v83[3]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[498 - (259 + 237)]] = v83[11 - 8];
										v75 = v75 + (1357 - (215 + 1141));
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[3];
										v75 = v75 + (671 - (405 + 265));
										v83 = v71[v75];
										v3001 = v83[1985 - (1136 + 847)];
										v81[v3001] = v81[v3001](v13(v81, v3001 + (1735 - (230 + 1504)), v83[9 - 6]));
										v75 = v75 + (1883 - (913 + 969));
										v83 = v71[v75];
										v81[v83[3 - 1]][v81[v83[2 + 1]]] = v81[v83[4]];
										v75 = v75 + (1394 - (1277 + 116));
										v83 = v71[v75];
										v81[v83[1189 - (1178 + 9)]] = v83[2 + 1];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1842 - (1018 + 822)]] = v81[v83[7 - 4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[2 + 1];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[383 - (111 + 270)]] = v83[1199 - (1082 + 114)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3001 = v83[5 - 3];
										v81[v3001] = v81[v3001](v13(v81, v3001 + 1, v83[3]));
										v75 = v75 + (496 - (257 + 238));
										v83 = v71[v75];
										v81[v83[1856 - (831 + 1023)]][v81[v83[124 - (6 + 115)]]] = v81[v83[6 - 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[11 - 8];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3001 = v83[1202 - (608 + 592)];
										v81[v3001] = v81[v3001](v13(v81, v3001 + 1, v83[3]));
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2 + 0]][v81[v83[1944 - (24 + 1917)]]] = v81[v83[9 - 5]];
										v75 = v75 + (1526 - (521 + 1004));
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[296 - (87 + 207)]] = v81[v83[1 + 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[1598 - (625 + 970)];
									else
										v81[v83[2 + 0]][v81[v83[352 - (122 + 227)]]] = v81[v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1117 - (706 + 409)]] = v83[2 + 1];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[6 - 3]][v81[v83[450 - (433 + 13)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[983 - (824 + 157)]] = v83[363 - (120 + 240)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[1036 - (291 + 741)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[1 + 3]];
										v75 = v75 + (1493 - (810 + 682));
										v83 = v71[v75];
										v81[v83[2]] = v83[496 - (16 + 477)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v81[v83[1369 - (658 + 708)]][v81[v83[2 + 2]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[649 - (483 + 164)]] = v83[7 - 4];
									end
								elseif (v84 <= (331 - 152)) then
									if (v84 == (726 - (151 + 397))) then
										local v3110;
										v81[v83[5 - 3]] = v81[v83[1226 - (1005 + 218)]];
										v75 = v75 + (656 - (294 + 361));
										v83 = v71[v75];
										v81[v83[1062 - (150 + 910)]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3110 = v83[2];
										v81[v3110] = v81[v3110](v13(v81, v3110 + 1, v83[3]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[8 - 6]][v81[v83[3 + 0]]] = v81[v83[4]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3 + 0];
										v75 = v75 + (1801 - (756 + 1044));
										v83 = v71[v75];
										v81[v83[832 - (738 + 92)]] = v81[v83[8 - 5]];
										v75 = v75 + (1413 - (569 + 843));
										v83 = v71[v75];
										v81[v83[1430 - (262 + 1166)]] = v83[654 - (410 + 241)];
										v75 = v75 + (1185 - (388 + 796));
										v83 = v71[v75];
										v81[v83[1010 - (534 + 474)]] = v83[2 + 1];
										v75 = v75 + (1100 - (642 + 457));
										v83 = v71[v75];
										v3110 = v83[3 - 1];
										v81[v3110] = v81[v3110](v13(v81, v3110 + 1, v83[1479 - (384 + 1092)]));
										v75 = v75 + (1730 - (1190 + 539));
										v83 = v71[v75];
										v81[v83[755 - (91 + 662)]][v81[v83[3]]] = v81[v83[3 + 1]];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v83[1050 - (116 + 931)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[11 - 8];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[179 - (18 + 159)]] = v83[8 - 5];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v3110 = v83[4 - 2];
										v81[v3110] = v81[v3110](v13(v81, v3110 + 1, v83[3 - 0]));
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]][v81[v83[322 - (111 + 208)]]] = v81[v83[4 + 0]];
										v75 = v75 + (593 - (364 + 228));
										v83 = v71[v75];
										v81[v83[2]] = v83[6 - 3];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[3 + 0]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[3 + 0];
										v75 = v75 + (378 - (121 + 256));
										v83 = v71[v75];
										v81[v83[2]] = v83[12 - 9];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v3110 = v83[2];
										v81[v3110] = v81[v3110](v13(v81, v3110 + 1 + 0, v83[2 + 1]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]][v81[v83[1761 - (549 + 1209)]]] = v81[v83[5 - 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + (1382 - (643 + 738));
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3110 = v83[3 - 1];
										v81[v3110] = v81[v3110](v13(v81, v3110 + 1, v83[5 - 2]));
										v75 = v75 + (1108 - (1038 + 69));
										v83 = v71[v75];
										v81[v83[338 - (157 + 179)]][v81[v83[1133 - (204 + 926)]]] = v81[v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1959 - (184 + 1773)]] = v83[722 - (111 + 608)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[7 - 5]] = v81[v83[2 + 1]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[8 - 6]] = v83[6 - 3];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v3110 = v83[2 + 0];
										v81[v3110] = v81[v3110](v13(v81, v3110 + (1669 - (1328 + 340)), v83[7 - 4]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]][v81[v83[2 + 1]]] = v81[v83[1018 - (782 + 232)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1305 - (397 + 906)]] = v83[603 - (360 + 240)];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[25 - (13 + 9)]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[1577 - (272 + 1302)];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[7 - 4];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3110 = v83[3 - 1];
										v81[v3110] = v81[v3110](v13(v81, v3110 + (22 - (8 + 13)), v83[3]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[6 - 4]][v81[v83[3 + 0]]] = v81[v83[4]];
										v75 = v75 + (89 - (28 + 60));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1 + 2];
										v75 = v75 + (954 - (133 + 820));
										v83 = v71[v75];
										v81[v83[1 + 1]] = v81[v83[100 - (9 + 88)]];
										v75 = v75 + (251 - (98 + 152));
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[13 - 10];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v3110 = v83[2];
										v81[v3110] = v81[v3110](v13(v81, v3110 + 1 + 0, v83[3 - 0]));
										v75 = v75 + (289 - (44 + 244));
										v83 = v71[v75];
										v81[v83[1391 - (207 + 1182)]][v81[v83[3 + 0]]] = v81[v83[920 - (904 + 12)]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[11 - 8];
										v75 = v75 + (254 - (241 + 12));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[5 - 2]];
										v75 = v75 + (1255 - (1187 + 67));
										v83 = v71[v75];
										v81[v83[2]] = v83[275 - (56 + 216)];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1481 - (1194 + 285)]] = v83[1703 - (401 + 1299)];
										v75 = v75 + (1556 - (1522 + 33));
										v83 = v71[v75];
										v3110 = v83[4 - 2];
										v81[v3110] = v81[v3110](v13(v81, v3110 + (1 - 0), v83[3]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1824 - (1108 + 714)]][v81[v83[3]]] = v81[v83[4]];
										v75 = v75 + (675 - (357 + 317));
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[469 - (73 + 394)]] = v81[v83[9 - 6]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[254 - (247 + 4)];
										v75 = v75 + (629 - (435 + 193));
										v83 = v71[v75];
										v81[v83[475 - (428 + 45)]] = v83[1223 - (158 + 1062)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3110 = v83[1379 - (858 + 519)];
										v81[v3110] = v81[v3110](v13(v81, v3110 + (1 - 0), v83[1460 - (711 + 746)]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[680 - (229 + 448)]]] = v81[v83[745 - (357 + 384)]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1582 - (984 + 596)]] = v83[5 - 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]];
										v75 = v75 + (922 - (465 + 456));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[6 - 3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3110 = v83[7 - 5];
										v81[v3110] = v81[v3110](v13(v81, v3110 + (1 - 0), v83[3 + 0]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]][v81[v83[219 - (172 + 44)]]] = v81[v83[4]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[382 - (170 + 209)];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[2 + 1]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[958 - (244 + 712)]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[7 - 4];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v3110 = v83[1 + 1];
										v81[v3110] = v81[v3110](v13(v81, v3110 + 1 + 0, v83[11 - 8]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1248 - (769 + 477)]][v81[v83[3 - 0]]] = v81[v83[4 + 0]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]] = v81[v83[5 - 2]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[6 - 4]] = v83[3 + 0];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[3 - 1]] = v83[3];
										v75 = v75 + (639 - (526 + 112));
										v83 = v71[v75];
										v3110 = v83[3 - 1];
										v81[v3110] = v81[v3110](v13(v81, v3110 + 1, v83[4 - 1]));
										v75 = v75 + (659 - (318 + 340));
										v83 = v71[v75];
										v81[v83[625 - (274 + 349)]][v81[v83[6 - 3]]] = v81[v83[5 - 1]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3 - 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1454 - (1429 + 23)]] = v81[v83[11 - 8]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[5 - 2];
									else
										local v3195;
										local v3196;
										local v3197;
										v81[v83[1 + 1]] = {};
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[1508 - (1140 + 366)]] = v83[4 - 1];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[1 + 2]][v81[v83[1 + 3]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[388 - (271 + 114)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[13 - 10]][v81[v83[863 - (240 + 619)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3197 = v83[2];
										v3196 = v81[v3197];
										v3195 = v83[3 + 0];
										for v4366 = 1 + 0, v3195 do
											v3196[v4366] = v81[v3197 + v4366];
										end
									end
								elseif (v84 > (317 - 137)) then
									v81[v83[2]][v81[v83[860 - (509 + 348)]]] = v81[v83[10 - 6]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[1381 - (1014 + 364)];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[8 - 5]][v81[v83[7 - 3]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[2 + 1];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[8 - 5]]] = v81[v83[4]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[1727 - (1565 + 159)]]] = v81[v83[4 + 0]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[10 - 7]][v81[v83[4]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1865 - (1445 + 418)]] = {};
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1416 - (26 + 1387)];
								else
									local v3227;
									v3227 = v83[2];
									v81[v3227] = v81[v3227](v13(v81, v3227 + 1, v83[3 + 0]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[806 - (355 + 448)]]] = v81[v83[265 - (246 + 15)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[1 + 2];
									v75 = v75 + (1120 - (391 + 728));
									v83 = v71[v75];
									v81[v83[1097 - (594 + 501)]] = v83[3 + 0];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3227 = v83[1139 - (730 + 407)];
									v81[v3227] = v81[v3227](v13(v81, v3227 + 1 + 0, v83[3]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[3]]] = v81[v83[4]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[6 - 3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1903 - (438 + 1463)]] = v81[v83[1 + 2]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1619 - (900 + 717)]] = v83[1139 - (820 + 316)];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1800 - (719 + 1079)]] = v83[6 - 3];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v3227 = v83[1 + 1];
									v81[v3227] = v81[v3227](v13(v81, v3227 + 1 + 0, v83[3]));
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]][v81[v83[206 - (148 + 55)]]] = v81[v83[1457 - (914 + 539)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[562 - (253 + 307)]] = v83[1069 - (926 + 140)];
									v75 = v75 + (1059 - (331 + 727));
									v83 = v71[v75];
									v81[v83[1384 - (1014 + 368)]] = v81[v83[1580 - (1035 + 542)]];
									v75 = v75 + (79 - (44 + 34));
									v83 = v71[v75];
									v81[v83[3 - 1]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[3];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v3227 = v83[3 - 1];
									v81[v3227] = v81[v3227](v13(v81, v3227 + 1 + 0, v83[671 - (355 + 313)]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]][v81[v83[6 - 3]]] = v81[v83[7 - 3]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1868 - (762 + 1103)];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[2 + 1]];
									v75 = v75 + (1568 - (1491 + 76));
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[1 + 2];
									v75 = v75 + (763 - (94 + 668));
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (1410 - (36 + 1373));
									v83 = v71[v75];
									v3227 = v83[2];
									v81[v3227] = v81[v3227](v13(v81, v3227 + (1102 - (58 + 1043)), v83[13 - 10]));
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[8 - 5]]] = v81[v83[15 - 11]];
									v75 = v75 + (229 - (35 + 193));
									v83 = v71[v75];
									v81[v83[9 - 7]] = v83[655 - (242 + 410)];
									v75 = v75 + (1496 - (1285 + 210));
									v83 = v71[v75];
									v81[v83[1741 - (1179 + 560)]] = v81[v83[1 + 2]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v83[5 - 2];
									v75 = v75 + (1217 - (262 + 954));
									v83 = v71[v75];
									v81[v83[7 - 5]] = v83[7 - 4];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3227 = v83[6 - 4];
									v81[v3227] = v81[v3227](v13(v81, v3227 + 1 + 0, v83[3]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[1845 - (1696 + 146)]]] = v81[v83[1910 - (1835 + 71)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (635 - (58 + 576));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[6 - 3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[82 - (27 + 53)]] = v83[1732 - (22 + 1707)];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3227 = v83[892 - (627 + 263)];
									v81[v3227] = v81[v3227](v13(v81, v3227 + (3 - 2), v83[3 - 0]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[4]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1188 - (255 + 931)]] = v83[8 - 5];
									v75 = v75 + (1389 - (507 + 881));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[5 - 2]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (1604 - (475 + 1128));
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[4 - 1];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v3227 = v83[2 + 0];
									v81[v3227] = v81[v3227](v13(v81, v3227 + (358 - (110 + 247)), v83[1249 - (1109 + 137)]));
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[3 + 0]]] = v81[v83[12 - 8]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1 + 2];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[2 + 1]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[2 + 1];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3 + 0];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3227 = v83[7 - 5];
									v81[v3227] = v81[v3227](v13(v81, v3227 + (206 - (192 + 13)), v83[760 - (585 + 172)]));
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[799 - (76 + 720)]]] = v81[v83[10 - 6]];
									v75 = v75 + (133 - (45 + 87));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[5 - 2];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[10 - 7]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[3];
									v75 = v75 + (1284 - (61 + 1222));
									v83 = v71[v75];
									v81[v83[1505 - (628 + 875)]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3227 = v83[2 + 0];
									v81[v3227] = v81[v3227](v13(v81, v3227 + (1 - 0), v83[8 - 5]));
									v75 = v75 + (1923 - (590 + 1332));
									v83 = v71[v75];
									v81[v83[3 - 1]][v81[v83[9 - 6]]] = v81[v83[9 - 5]];
									v75 = v75 + (1627 - (173 + 1453));
									v83 = v71[v75];
									v81[v83[850 - (237 + 611)]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[2 + 1]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v83[7 - 4];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[377 - (129 + 246)]] = v83[7 - 4];
									v75 = v75 + (1093 - (83 + 1009));
									v83 = v71[v75];
									v3227 = v83[875 - (506 + 367)];
									v81[v3227] = v81[v3227](v13(v81, v3227 + (4 - 3), v83[1 + 2]));
									v75 = v75 + (359 - (72 + 286));
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[137 - (107 + 27)]]] = v81[v83[1 + 3]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[14 - 11];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[3 - 1]] = v81[v83[11 - 8]];
									v75 = v75 + (396 - (304 + 91));
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[11 - 8];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[1563 - (648 + 912)];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v3227 = v83[5 - 3];
									v81[v3227] = v81[v3227](v13(v81, v3227 + (446 - (206 + 239)), v83[3]));
									v75 = v75 + (1421 - (956 + 464));
									v83 = v71[v75];
									v81[v83[270 - (159 + 109)]][v81[v83[3 + 0]]] = v81[v83[683 - (239 + 440)]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[1731 - (1664 + 64)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[2 + 1]];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[1 + 2];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (1515 - (1421 + 93));
									v83 = v71[v75];
									v3227 = v83[7 - 5];
									v81[v3227] = v81[v3227](v13(v81, v3227 + (1149 - (1049 + 99)), v83[3]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[1252 - (871 + 377)]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1779 - (1238 + 539)]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[574 - (206 + 366)]] = v81[v83[3]];
									v75 = v75 + (527 - (489 + 37));
									v83 = v71[v75];
									v81[v83[4 - 2]] = v83[1 + 2];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v83[2 + 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v3227 = v83[3 - 1];
									v81[v3227] = v81[v3227](v13(v81, v3227 + 1, v83[11 - 8]));
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]][v81[v83[5 - 2]]] = v81[v83[1 + 3]];
								end
							elseif (v84 <= (1471 - (254 + 1033))) then
								if (v84 <= (156 + 26)) then
									v81[v83[2]][v81[v83[1765 - (1099 + 663)]]] = v81[v83[811 - (504 + 303)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[3 + 0];
									v75 = v75 + (4 - 3);
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[8 - 5]][v81[v83[4]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[241 - (155 + 84)]] = v83[3];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[6 - 4]][v81[v83[3]]] = v81[v83[3 + 1]];
									v75 = v75 + (1426 - (557 + 868));
									v83 = v71[v75];
									v81[v83[609 - (33 + 574)]][v81[v83[1568 - (839 + 726)]]] = v81[v83[7 - 3]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[333 - (124 + 207)]] = v83[5 - 2];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[10 - 7]][v81[v83[4]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = {};
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[1 + 2];
								elseif ((525 >= 423) and (v84 == (106 + 77))) then
									local v3315;
									local v3316;
									local v3317;
									v81[v83[2 + 0]] = v83[3 + 0];
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[4 + 0]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = {};
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[5 - 3]] = v83[7 - 4];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3]][v81[v83[5 - 1]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3317 = v83[2 + 0];
									v3316 = v81[v3317];
									v3315 = v83[3];
									for v4369 = 1 + 0, v3315 do
										v3316[v4369] = v81[v3317 + v4369];
									end
								else
									local v3329 = v83[4 - 2];
									local v3330, v3331 = v74(v81[v3329](v13(v81, v3329 + (1 - 0), v76)));
									v76 = (v3331 + v3329) - (1011 - (15 + 995));
									local v3332 = 0 - 0;
									for v4372 = v3329, v76 do
										v3332 = v3332 + 1 + 0;
										v81[v4372] = v3330[v3332];
									end
								end
							elseif (v84 <= 186) then
								if (v84 == (10 + 175)) then
									local v3333;
									local v3334;
									local v3335;
									v81[v83[2]] = {};
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + (38 - (34 + 3));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[9 - 6]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = {};
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[623 - (477 + 144)]] = v83[973 - (797 + 173)];
									v75 = v75 + (1262 - (161 + 1100));
									v83 = v71[v75];
									v81[v83[1338 - (1150 + 186)]] = v81[v83[3 + 0]][v81[v83[3 + 1]]];
									v75 = v75 + (30 - (12 + 17));
									v83 = v71[v75];
									v3335 = v83[2 - 0];
									v3334 = v81[v3335];
									v3333 = v83[2 + 1];
									for v4375 = 1, v3333 do
										v3334[v4375] = v81[v3335 + v4375];
									end
								else
									local v3348 = 281 - (68 + 213);
									local v3349;
									local v3350;
									local v3351;
									while true do
										if (v3348 == (0 - 0)) then
											v3349 = nil;
											v3350 = nil;
											v3351 = nil;
											v81[v83[1 + 1]] = {};
											v3348 = 1 + 0;
										end
										if ((v3348 == (8 - 3)) or (2682 < 1809)) then
											v83 = v71[v75];
											v3351 = v83[2 + 0];
											v3350 = v81[v3351];
											v3349 = v83[1385 - (349 + 1033)];
											v3348 = 360 - (68 + 286);
										end
										if (3 == v3348) then
											v81[v83[1 + 1]] = {};
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[3];
											v3348 = 4;
										end
										if (v3348 == (4 + 2)) then
											for v7073 = 3 - 2, v3349 do
												v3350[v7073] = v81[v3351 + v7073];
											end
											break;
										end
										if (v3348 == (10 - 6)) then
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[3]][v81[v83[3 + 1]]];
											v75 = v75 + (1198 - (1064 + 133));
											v3348 = 18 - 13;
										end
										if (v3348 == 2) then
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[1 + 2]][v81[v83[4 + 0]]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3348 = 3;
										end
										if (v3348 == (2 - 1)) then
											v75 = v75 + (1634 - (670 + 963));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + (1100 - (1034 + 65));
											v3348 = 51 - (5 + 44);
										end
									end
								end
							elseif (v84 > 187) then
								local v3352;
								local v3353;
								local v3354;
								v81[v83[1 + 1]] = v83[48 - (25 + 20)];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1977 - (1535 + 440)]] = v81[v83[3 - 0]][v81[v83[623 - (477 + 142)]]];
								v75 = v75 + (1345 - (1324 + 20));
								v83 = v71[v75];
								v81[v83[2]] = {};
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[7 - 5]] = v83[3 + 0];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[1621 - (818 + 800)]][v81[v83[233 - (163 + 66)]]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v3354 = v83[89 - (40 + 47)];
								v3353 = v81[v3354];
								v3352 = v83[638 - (146 + 489)];
								for v4378 = 1 + 0, v3352 do
									v3353[v4378] = v81[v3354 + v4378];
								end
							else
								v81[v83[1389 - (499 + 888)]] = v83[3] + v81[v83[2 + 2]];
							end
						elseif ((4143 > 1460) and (v84 <= (302 - 101))) then
							if (v84 <= (400 - 206)) then
								if ((v84 <= (678 - 487)) or (2772 < 256)) then
									if (v84 <= 189) then
										v81[v83[3 - 1]] = v81[v83[747 - (522 + 222)]] + v83[3 + 1];
									elseif (v84 == (1675 - (72 + 1413))) then
										local v3369;
										local v3370;
										local v3371;
										v81[v83[1205 - (216 + 987)]] = v83[3];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[9 - 7]] = v81[v83[1414 - (1300 + 111)]][v81[v83[1085 - (1055 + 26)]]];
										v75 = v75 + (644 - (475 + 168));
										v83 = v71[v75];
										v81[v83[1369 - (302 + 1065)]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[3 + 0];
										v75 = v75 + (1319 - (917 + 401));
										v83 = v71[v75];
										v81[v83[1272 - (631 + 639)]] = v81[v83[3]][v81[v83[1704 - (654 + 1046)]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3371 = v83[1601 - (1007 + 592)];
										v3370 = v81[v3371];
										v3369 = v83[13 - 10];
										for v4381 = 1, v3369 do
											v3370[v4381] = v81[v3371 + v4381];
										end
									else
										local v3385;
										local v3386;
										local v3387;
										v81[v83[3 - 1]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[8 - 6]] = v83[8 - 5];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[324 - (26 + 296)]] = v81[v83[3 + 0]][v81[v83[14 - 10]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[819 - (418 + 399)]] = {};
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[1 + 1]] = v83[710 - (314 + 393)];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[173 - (82 + 88)]][v81[v83[4]]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3387 = v83[149 - (95 + 52)];
										v3386 = v81[v3387];
										v3385 = v83[1 + 2];
										for v4384 = 1 + 0, v3385 do
											v3386[v4384] = v81[v3387 + v4384];
										end
									end
								elseif ((v84 <= 192) or (231 == 3795)) then
									local v694 = 0 - 0;
									while true do
										if (v694 == 8) then
											v81[v83[2]] = {};
											v75 = v75 + 1;
											v83 = v71[v75];
											v694 = 842 - (8 + 825);
										end
										if (v694 == (5 + 2)) then
											v81[v83[1642 - (471 + 1169)]] = v81[v83[3 + 0]][v81[v83[2 + 2]]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v694 = 23 - 15;
										end
										if ((4247 >= 417) and (v694 == 9)) then
											v81[v83[2]] = v83[3 + 0];
											break;
										end
										if (4 == v694) then
											v81[v83[1 + 1]][v81[v83[1 + 2]]] = v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v694 = 448 - (365 + 78);
										end
										if (v694 == (224 - (200 + 23))) then
											v81[v83[2 + 0]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v694 = 381 - (373 + 6);
										end
										if ((v694 == (0 - 0)) or (283 >= 937)) then
											v81[v83[2]][v81[v83[3]]] = v81[v83[7 - 3]];
											v75 = v75 + (923 - (519 + 403));
											v83 = v71[v75];
											v694 = 1522 - (1435 + 86);
										end
										if ((3116 <= 4290) and (v694 == 2)) then
											v81[v83[2]] = v81[v83[180 - (97 + 80)]][v81[v83[6 - 2]]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v694 = 705 - (366 + 336);
										end
										if (v694 == (608 - (4 + 601))) then
											v81[v83[2]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v694 = 672 - (128 + 540);
										end
										if ((v694 == 5) or (1679 >= 3504)) then
											v81[v83[2]][v81[v83[3]]] = v81[v83[573 - (341 + 228)]];
											v75 = v75 + (1789 - (231 + 1557));
											v83 = v71[v75];
											v694 = 6;
										end
										if (v694 == 6) then
											v81[v83[2]] = v83[3 - 0];
											v75 = v75 + 1;
											v83 = v71[v75];
											v694 = 31 - 24;
										end
									end
								elseif (v84 == (119 + 74)) then
									v81[v83[2]][v81[v83[1354 - (1329 + 22)]]] = v81[v83[707 - (27 + 676)]];
									v75 = v75 + (3 - 2);
									v83 = v71[v75];
									v81[v83[7 - 5]] = v83[3];
									v75 = v75 + (1692 - (219 + 1472));
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[1 + 2]][v81[v83[3 + 1]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[390 - (162 + 226)]] = v83[4 - 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]][v81[v83[893 - (224 + 666)]]] = v81[v83[1684 - (345 + 1335)]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]][v81[v83[7 - 4]]] = v81[v83[14 - 10]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[367 - (18 + 347)]] = v83[3];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[974 - (556 + 416)]] = v81[v83[1702 - (797 + 902)]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = {};
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[8 - 6]] = v83[3];
								else
									local v3419;
									local v3420;
									local v3421;
									v81[v83[6 - 4]] = {};
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2]] = v83[1075 - (632 + 440)];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 - 0]] = v81[v83[3]][v81[v83[1213 - (705 + 504)]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = {};
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[1919 - (1300 + 617)]] = v83[13 - 10];
									v75 = v75 + (1923 - (36 + 1886));
									v83 = v71[v75];
									v81[v83[7 - 5]] = v81[v83[619 - (305 + 311)]][v81[v83[3 + 1]]];
									v75 = v75 + (1456 - (1093 + 362));
									v83 = v71[v75];
									v3421 = v83[2];
									v3420 = v81[v3421];
									v3419 = v83[1101 - (734 + 364)];
									for v4415 = 1009 - (374 + 634), v3419 do
										v3420[v4415] = v81[v3421 + v4415];
									end
								end
							elseif ((2030 <= 3278) and (v84 <= 197)) then
								if (v84 <= (81 + 114)) then
									local v695 = 1117 - (331 + 786);
									local v696;
									while true do
										if (v695 == 7) then
											v83 = v71[v75];
											v81[v83[1098 - (759 + 337)]] = v83[8 - 5];
											v75 = v75 + (565 - (255 + 309));
											v83 = v71[v75];
											v696 = v83[495 - (484 + 9)];
											v81[v696] = v81[v696](v13(v81, v696 + 1 + 0, v83[4 - 1]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]][v81[v83[1453 - (341 + 1109)]]] = v81[v83[4]];
											v695 = 3 + 5;
										end
										if (v695 == (3 + 14)) then
											v81[v83[2]] = v81[v83[662 - (483 + 176)]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1282 - (47 + 1233)]] = v83[3 + 0];
											v75 = v75 + (615 - (421 + 193));
											v83 = v71[v75];
											v695 = 70 - 52;
										end
										if (v695 == (38 - 11)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[3];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[7 - 4];
											break;
										end
										if (v695 == 1) then
											v83 = v71[v75];
											v696 = v83[2];
											v81[v696] = v81[v696](v13(v81, v696 + (1845 - (463 + 1381)), v83[3 + 0]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[4 + 0]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[1164 - (696 + 465)];
											v695 = 2;
										end
										if (v695 == (565 - (14 + 546))) then
											v81[v83[1 + 1]] = v83[1443 - (413 + 1027)];
											v75 = v75 + (1817 - (1382 + 434));
											v83 = v71[v75];
											v696 = v83[5 - 3];
											v81[v696] = v81[v696](v13(v81, v696 + (1525 - (86 + 1438)), v83[3]));
											v75 = v75 + (722 - (692 + 29));
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[9 - 6]]] = v81[v83[4]];
											v75 = v75 + 1 + 0;
											v695 = 3 + 3;
										end
										if ((v695 == (2 + 6)) or (331 > 4148)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[6 - 4]] = v83[8 - 5];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[60 - (11 + 47)]] = v81[v83[5 - 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[452 - (287 + 162)];
											v695 = 5 + 4;
										end
										if (v695 == (1649 - (10 + 1619))) then
											v83 = v71[v75];
											v696 = v83[2 + 0];
											v81[v696] = v81[v696](v13(v81, v696 + 1 + 0, v83[3 + 0]));
											v75 = v75 + (1271 - (403 + 867));
											v83 = v71[v75];
											v81[v83[2]][v81[v83[355 - (310 + 42)]]] = v81[v83[4 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1447 - (1170 + 275)]] = v83[3 + 0];
											v695 = 71 - 50;
										end
										if (v695 == (699 - (424 + 259))) then
											v81[v696] = v81[v696](v13(v81, v696 + (3 - 2), v83[3]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1066 - (289 + 775)]][v81[v83[7 - 4]]] = v81[v83[4]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[11 - 8];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v695 = 17;
										end
										if (v695 == 4) then
											v81[v83[7 - 5]] = v83[13 - 10];
											v75 = v75 + (1891 - (946 + 944));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[12 - 9]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[1446 - (949 + 494)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v695 = 5;
										end
										if ((v695 == (1233 - (505 + 725))) or (1943 >= 2818)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v696 = v83[5 - 3];
											v81[v696] = v81[v696](v13(v81, v696 + 1 + 0, v83[5 - 2]));
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[2]][v81[v83[1954 - (1928 + 23)]]] = v81[v83[1 + 3]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v695 = 4 - 0;
										end
										if ((41 - 17) == v695) then
											v81[v83[5 - 3]] = v83[3 + 0];
											v75 = v75 + (237 - (40 + 196));
											v83 = v71[v75];
											v696 = v83[1019 - (845 + 172)];
											v81[v696] = v81[v696](v13(v81, v696 + 1, v83[1284 - (423 + 858)]));
											v75 = v75 + (1703 - (1520 + 182));
											v83 = v71[v75];
											v81[v83[1468 - (196 + 1270)]][v81[v83[1809 - (763 + 1043)]]] = v81[v83[4]];
											v75 = v75 + (4 - 3);
											v695 = 25;
										end
										if (v695 == (1294 - (1144 + 131))) then
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[532 - (458 + 71)]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1776 - (775 + 998)];
											v75 = v75 + 1;
											v695 = 164 - (78 + 66);
										end
										if (v695 == (19 + 2)) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1046 - (437 + 607)]] = v81[v83[10 - 7]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[33 - (30 + 1)]] = v83[3];
											v75 = v75 + (812 - (786 + 25));
											v83 = v71[v75];
											v81[v83[7 - 5]] = v83[3];
											v695 = 22 + 0;
										end
										if (v695 == (9 + 6)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[1 + 2];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[66 - (9 + 55)]] = v83[768 - (256 + 509)];
											v75 = v75 + (1961 - (1497 + 463));
											v83 = v71[v75];
											v696 = v83[958 - (567 + 389)];
											v695 = 16;
										end
										if (v695 == (78 - (14 + 46))) then
											v696 = v83[3 - 1];
											v81[v696] = v81[v696](v13(v81, v696 + 1, v83[4 - 1]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[818 - (301 + 515)]][v81[v83[3]]] = v81[v83[541 - (45 + 492)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v695 = 9 + 10;
										end
										if ((v695 == (18 - 8)) or (4736 < 933)) then
											v81[v83[2]][v81[v83[3]]] = v81[v83[4]];
											v75 = v75 + (644 - (228 + 415));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[1 + 2];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[256 - (147 + 107)]] = v81[v83[3 + 0]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v695 = 1043 - (925 + 107);
										end
										if (v695 == (472 - (375 + 97))) then
											v696 = nil;
											v81[v83[6 - 4]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[8 - 5];
											v75 = v75 + (1575 - (298 + 1276));
											v83 = v71[v75];
											v81[v83[1782 - (1225 + 555)]] = v83[1 + 2];
											v75 = v75 + (1 - 0);
											v695 = 290 - (75 + 214);
										end
										if (v695 == 9) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[6 - 3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v696 = v83[453 - (366 + 85)];
											v81[v696] = v81[v696](v13(v81, v696 + (854 - (380 + 473)), v83[2 + 1]));
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v695 = 10;
										end
										if ((v695 == 11) or (2212 > 3383)) then
											v81[v83[1571 - (934 + 635)]] = v83[683 - (266 + 414)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + (546 - (62 + 483));
											v83 = v71[v75];
											v696 = v83[1636 - (904 + 730)];
											v81[v696] = v81[v696](v13(v81, v696 + (1 - 0), v83[1 + 2]));
											v75 = v75 + (1227 - (371 + 855));
											v695 = 26 - 14;
										end
										if (v695 == (1225 - (749 + 463))) then
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - 1];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[4 - 1];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v696 = v83[2 - 0];
											v81[v696] = v81[v696](v13(v81, v696 + (3 - 2), v83[2 + 1]));
											v695 = 49 - 35;
										end
										if (v695 == 2) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[7 - 4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[10 - 7];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[1 + 2];
											v695 = 5 - 2;
										end
										if ((v695 == (67 - (5 + 39))) or (3153 == 1399)) then
											v81[v83[1278 - (20 + 1256)]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3]];
											v75 = v75 + (657 - (616 + 40));
											v83 = v71[v75];
											v81[v83[2]] = v83[8 - 5];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v695 = 34 - 10;
										end
										if ((v695 == 12) or (969 >= 1823)) then
											v83 = v71[v75];
											v81[v83[5 - 3]][v81[v83[657 - (82 + 572)]]] = v81[v83[4 + 0]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[712 - (349 + 361)]] = v83[705 - (552 + 150)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[804 - (521 + 281)]] = v81[v83[3]];
											v75 = v75 + (119 - (15 + 103));
											v695 = 1422 - (974 + 435);
										end
										if ((335 <= 3087) and (v695 == (34 - 12))) then
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v696 = v83[2 + 0];
											v81[v696] = v81[v696](v13(v81, v696 + 1 + 0, v83[3 + 0]));
											v75 = v75 + (1103 - (925 + 177));
											v83 = v71[v75];
											v81[v83[5 - 3]][v81[v83[22 - (12 + 7)]]] = v81[v83[4 + 0]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v695 = 46 - 23;
										end
										if (v695 == (13 + 12)) then
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[11 - 8];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v81[v83[3]];
											v75 = v75 + (367 - (198 + 168));
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[6 - 3];
											v75 = v75 + (3 - 2);
											v695 = 36 - 10;
										end
										if (26 == v695) then
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[5 - 2];
											v75 = v75 + (61 - (4 + 56));
											v83 = v71[v75];
											v696 = v83[4 - 2];
											v81[v696] = v81[v696](v13(v81, v696 + (3 - 2), v83[3 + 0]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 - 0]][v81[v83[1901 - (1270 + 628)]]] = v81[v83[1326 - (570 + 752)]];
											v695 = 1488 - (958 + 503);
										end
										if (v695 == (10 - 4)) then
											v83 = v71[v75];
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[2 + 1]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[6 - 3];
											v75 = v75 + (930 - (799 + 130));
											v695 = 5 + 2;
										end
										if ((3962 == 3962) and (v695 == (6 + 8))) then
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[1 + 1]][v81[v83[7 - 4]]] = v81[v83[1440 - (772 + 664)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[3];
											v75 = v75 + (1074 - (46 + 1027));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[1356 - (467 + 886)]];
											v695 = 20 - 5;
										end
									end
								elseif ((1473 >= 821) and (v84 == (372 - 176))) then
									local v3435 = 683 - (582 + 101);
									local v3436;
									while true do
										if (v3435 == (765 - (574 + 171))) then
											v83 = v71[v75];
											v81[v83[2 + 0]][v83[370 - (66 + 301)]] = v81[v83[485 - (423 + 58)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1082 - (141 + 939)]] = v81[v83[684 - (532 + 149)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[920 - (592 + 326)]] = v83[10 - 7];
											v75 = v75 + (4 - 3);
											v3435 = 7 + 14;
										end
										if ((v3435 == (831 - (467 + 358))) or (3515 >= 4532)) then
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[9 - 6];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[1829 - (233 + 1593)];
											v3435 = 14 - 7;
										end
										if (v3435 == (767 - (28 + 734))) then
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[1134 - (337 + 794)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3436 = v83[1 + 1];
											v81[v3436] = v81[v3436](v13(v81, v3436 + 1, v83[2 + 1]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]][v83[10 - 7]] = v81[v83[706 - (342 + 360)]];
											v3435 = 5 + 1;
										end
										if (v3435 == (1014 - (440 + 559))) then
											v83 = v71[v75];
											v81[v83[580 - (150 + 428)]] = v81[v83[1 + 2]];
											v75 = v75 + (158 - (15 + 142));
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + (1677 - (757 + 919));
											v3435 = 8 + 8;
										end
										if (v3435 == (105 - 82)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v3436 = v83[2 + 0];
											v81[v3436] = v81[v3436](v13(v81, v3436 + (2 - 1), v83[4 - 1]));
											v75 = v75 + (52 - (8 + 43));
											v83 = v71[v75];
											v81[v83[5 - 3]][v83[1 + 2]] = v81[v83[300 - (236 + 60)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3435 = 17 + 7;
										end
										if (v3435 == (6 + 13)) then
											v81[v83[2]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[10 - 7];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3436 = v83[5 - 3];
											v81[v3436] = v81[v3436](v13(v81, v3436 + 1 + 0, v83[271 - (35 + 233)]));
											v75 = v75 + 1;
											v3435 = 1917 - (547 + 1350);
										end
										if (((52 - 24) == v3435) or (2750 > 4696)) then
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v81[v83[2]] = v83[605 - (593 + 9)];
											break;
										end
										if ((2861 < 3339) and (v3435 == (1396 - (298 + 1097)))) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[14 - 11];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[836 - (479 + 355)]] = v83[399 - (175 + 221)];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v3436 = v83[1 + 1];
											v3435 = 4 - 2;
										end
										if ((120 <= 3286) and (v3435 == 27)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[1 + 1]][v83[1 + 2]] = v81[v83[12 - 8]];
											v75 = v75 + (1326 - (471 + 854));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[810 - (55 + 752)]];
											v75 = v75 + (386 - (97 + 288));
											v83 = v71[v75];
											v81[v83[1437 - (317 + 1118)]] = v83[1892 - (198 + 1691)];
											v3435 = 28;
										end
										if (v3435 == (2 + 1)) then
											v81[v83[2]] = v83[603 - (263 + 337)];
											v75 = v75 + (1011 - (577 + 433));
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[989 - (185 + 801)];
											v75 = v75 + (515 - (270 + 244));
											v83 = v71[v75];
											v3436 = v83[3 - 1];
											v81[v3436] = v81[v3436](v13(v81, v3436 + 1, v83[3 + 0]));
											v75 = v75 + 1 + 0;
											v3435 = 7 - 3;
										end
										if ((0 + 0) == v3435) then
											v3436 = nil;
											v3436 = v83[4 - 2];
											v81[v3436] = v81[v3436](v13(v81, v3436 + (1 - 0), v83[1266 - (653 + 610)]));
											v75 = v75 + (1781 - (1358 + 422));
											v83 = v71[v75];
											v81[v83[1153 - (123 + 1028)]][v83[4 - 1]] = v81[v83[4]];
											v75 = v75 + (618 - (469 + 148));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[2 + 1]];
											v3435 = 2 - 1;
										end
										if (v3435 == (7 + 0)) then
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v3436 = v83[2];
											v81[v3436] = v81[v3436](v13(v81, v3436 + 1, v83[13 - 10]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]][v83[1433 - (187 + 1243)]] = v81[v83[1908 - (1011 + 893)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3435 = 8;
										end
										if ((8 + 17) == v3435) then
											v3436 = v83[2];
											v81[v3436] = v81[v3436](v13(v81, v3436 + (1482 - (1349 + 132)), v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]][v83[1419 - (921 + 495)]] = v81[v83[4]];
											v75 = v75 + (757 - (112 + 644));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v81[v83[2 + 1]];
											v75 = v75 + (279 - (140 + 138));
											v3435 = 26 + 0;
										end
										if (v3435 == (282 - (74 + 190))) then
											v81[v3436] = v81[v3436](v13(v81, v3436 + 1, v83[3]));
											v75 = v75 + (1353 - (233 + 1119));
											v83 = v71[v75];
											v81[v83[2]][v83[3 + 0]] = v81[v83[4]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2 - 0]] = v81[v83[2 + 1]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v3435 = 32 - 13;
										end
										if ((v3435 == (531 - (248 + 257))) or (1295 >= 4401)) then
											v83 = v71[v75];
											v81[v83[2 - 0]] = v83[1494 - (1472 + 19)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[1 + 2];
											v75 = v75 + (273 - (120 + 152));
											v83 = v71[v75];
											v3436 = v83[2 + 0];
											v81[v3436] = v81[v3436](v13(v81, v3436 + 1, v83[7 - 4]));
											v3435 = 16 + 11;
										end
										if ((1796 <= 4893) and (v3435 == (1238 - (401 + 815)))) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[5 - 3]] = v81[v83[3]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[1 + 1]] = v83[7 - 4];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v3435 = 783 - (51 + 709);
										end
										if ((1256 <= 3198) and (v3435 == (121 - (33 + 76)))) then
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[5 - 2];
											v75 = v75 + (551 - (154 + 396));
											v83 = v71[v75];
											v3436 = v83[2];
											v81[v3436] = v81[v3436](v13(v81, v3436 + 1, v83[7 - 4]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3435 = 13;
										end
										if (v3435 == (1 + 15)) then
											v83 = v71[v75];
											v3436 = v83[1514 - (24 + 1488)];
											v81[v3436] = v81[v3436](v13(v81, v3436 + (3 - 2), v83[430 - (246 + 181)]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]][v83[3]] = v81[v83[4]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[1862 - (413 + 1446)]];
											v3435 = 26 - 9;
										end
										if (v3435 == 17) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[1978 - (29 + 1947)]] = v83[3 + 0];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[2 + 1];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3436 = v83[2];
											v3435 = 46 - 28;
										end
										if (v3435 == (2 + 6)) then
											v81[v83[4 - 2]] = v81[v83[8 - 5]];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v81[v83[2]] = v83[405 - (74 + 328)];
											v75 = v75 + (654 - (144 + 509));
											v83 = v71[v75];
											v81[v83[2]] = v83[3 + 0];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3435 = 9;
										end
										if (v3435 == (7 + 6)) then
											v81[v83[1 + 1]][v83[3]] = v81[v83[4]];
											v75 = v75 + (1364 - (319 + 1044));
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[11 - 8]];
											v75 = v75 + (631 - (14 + 616));
											v83 = v71[v75];
											v81[v83[580 - (303 + 275)]] = v83[1853 - (1659 + 191)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3435 = 3 + 11;
										end
										if (v3435 == (578 - (205 + 363))) then
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[577 - (147 + 427)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2]] = v83[4 - 1];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v3436 = v83[1 + 1];
											v81[v3436] = v81[v3436](v13(v81, v3436 + (1 - 0), v83[3]));
											v3435 = 19 - 8;
										end
										if ((4255 >= 1819) and (v3435 == (1239 - (1108 + 120)))) then
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v81[v83[653 - (303 + 348)]][v83[314 - (242 + 69)]] = v81[v83[1 + 3]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[215 - (172 + 41)]] = v81[v83[2 + 1]];
											v75 = v75 + (139 - (40 + 98));
											v83 = v71[v75];
											v81[v83[5 - 3]] = v83[800 - (161 + 636)];
											v3435 = 58 - 46;
										end
										if ((v3435 == 4) or (1003 >= 4367)) then
											v83 = v71[v75];
											v81[v83[2 - 0]][v83[3]] = v81[v83[4 + 0]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[2 + 1]];
											v75 = v75 + (630 - (123 + 506));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[1905 - (296 + 1606)];
											v75 = v75 + 1 + 0;
											v3435 = 5;
										end
										if ((v3435 == (19 - 10)) or (474 > 3806)) then
											v3436 = v83[2 + 0];
											v81[v3436] = v81[v3436](v13(v81, v3436 + 1, v83[3 + 0]));
											v75 = v75 + (1620 - (863 + 756));
											v83 = v71[v75];
											v81[v83[1426 - (39 + 1385)]][v83[762 - (52 + 707)]] = v81[v83[2 + 2]];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[447 - (358 + 87)]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v3435 = 34 - 24;
										end
										if (v3435 == (1355 - (27 + 1307))) then
											v83 = v71[v75];
											v81[v83[3 - 1]] = v83[3 + 0];
											v75 = v75 + (2 - 1);
											v83 = v71[v75];
											v3436 = v83[2 + 0];
											v81[v3436] = v81[v3436](v13(v81, v3436 + 1 + 0, v83[8 - 5]));
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[265 - (152 + 111)]][v83[3 + 0]] = v81[v83[6 - 2]];
											v3435 = 21 + 1;
										end
										if ((v3435 == (87 - 63)) or (543 >= 4521)) then
											v81[v83[5 - 3]] = v81[v83[2 + 1]];
											v75 = v75 + (282 - (32 + 249));
											v83 = v71[v75];
											v81[v83[1056 - (793 + 261)]] = v83[8 - 5];
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[2 + 0]] = v83[3];
											v75 = v75 + 1;
											v83 = v71[v75];
											v3435 = 51 - 26;
										end
										if ((1812 == 1812) and (v3435 == 14)) then
											v81[v83[229 - (109 + 118)]] = v83[1 + 2];
											v75 = v75 + (596 - (115 + 480));
											v83 = v71[v75];
											v3436 = v83[1 + 1];
											v81[v3436] = v81[v3436](v13(v81, v3436 + 1 + 0, v83[3 + 0]));
											v75 = v75 + (1414 - (547 + 866));
											v83 = v71[v75];
											v81[v83[264 - (259 + 3)]][v83[3]] = v81[v83[2 + 2]];
											v75 = v75 + (2 - 1);
											v3435 = 15;
										end
										if ((2582 == 2582) and (v3435 == (1421 - (891 + 528)))) then
											v81[v3436] = v81[v3436](v13(v81, v3436 + (1 - 0), v83[3]));
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[8 - 6]][v83[11 - 8]] = v81[v83[4]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[7 - 5]] = v81[v83[3]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3435 = 1 + 2;
										end
									end
								else
									local v3437;
									local v3438;
									local v3439;
									v81[v83[4 - 2]] = {};
									v75 = v75 + (1952 - (1144 + 807));
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[4 - 2]] = v81[v83[3]][v81[v83[4 + 0]]];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[1114 - (930 + 182)]] = {};
									v75 = v75 + (1835 - (1429 + 405));
									v83 = v71[v75];
									v81[v83[779 - (641 + 136)]] = v83[8 - 5];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[6 - 4]] = v81[v83[1 + 2]][v81[v83[717 - (87 + 626)]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v3439 = v83[3 - 1];
									v3438 = v81[v3439];
									v3437 = v83[1288 - (1261 + 24)];
									for v4603 = 1 + 0, v3437 do
										v3438[v4603] = v81[v3439 + v4603];
									end
								end
							elseif ((v84 <= (713 - 514)) or (3889 <= 992)) then
								if (v84 > (104 + 94)) then
									local v3453 = 0 + 0;
									local v3454;
									local v3455;
									local v3456;
									while true do
										if (v3453 == (1 + 1)) then
											v83 = v71[v75];
											v81[v83[2]] = v81[v83[11 - 8]][v81[v83[17 - 13]]];
											v75 = v75 + (858 - (822 + 35));
											v83 = v71[v75];
											v3453 = 1788 - (360 + 1425);
										end
										if ((15 - 9) == v3453) then
											for v7076 = 2 - 1, v3454 do
												v3455[v7076] = v81[v3456 + v7076];
											end
											break;
										end
										if (v3453 == 5) then
											v83 = v71[v75];
											v3456 = v83[2 + 0];
											v3455 = v81[v3456];
											v3454 = v83[3];
											v3453 = 302 - (283 + 13);
										end
										if (v3453 == (1 - 0)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v75 = v75 + 1;
											v3453 = 2;
										end
										if (0 == v3453) then
											v3454 = nil;
											v3455 = nil;
											v3456 = nil;
											v81[v83[2]] = {};
											v3453 = 1 - 0;
										end
										if ((v3453 == (1034 - (810 + 220))) or (1785 < 1002)) then
											v75 = v75 + 1;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[3 + 0]][v81[v83[215 - (195 + 16)]]];
											v75 = v75 + (2 - 1);
											v3453 = 22 - 17;
										end
										if (v3453 == 3) then
											v81[v83[1 + 1]] = {};
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v81[v83[2]] = v83[1 + 2];
											v3453 = 4;
										end
									end
								else
									local v3457 = 0;
									local v3458;
									local v3459;
									local v3460;
									while true do
										if (v3457 == (0 + 0)) then
											v3458 = nil;
											v3459 = nil;
											v3460 = nil;
											v3457 = 586 - (92 + 493);
										end
										if (v3457 == (2 + 2)) then
											v81[v83[2]] = v83[2 + 1];
											v75 = v75 + (1159 - (75 + 1083));
											v83 = v71[v75];
											v3457 = 18 - 13;
										end
										if (v3457 == (1 - 0)) then
											v81[v83[9 - 7]] = {};
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3457 = 2 + 0;
										end
										if (v3457 == (26 - 20)) then
											if ((v3458 > (0 + 0)) or (2729 <= 2324)) then
												if (v3459 > v81[v3460 + 1]) then
													v75 = v83[3];
												else
													v81[v3460 + (1378 - (159 + 1216))] = v3459;
												end
											elseif ((1609 == 1609) and (v3459 < v81[v3460 + (3 - 2)])) then
												v75 = v83[4 - 1];
											else
												v81[v3460 + 3 + 0] = v3459;
											end
											break;
										end
										if ((5 - 3) == v3457) then
											v81[v83[1617 - (418 + 1197)]] = v83[967 - (632 + 332)];
											v75 = v75 + (1599 - (964 + 634));
											v83 = v71[v75];
											v3457 = 6 - 3;
										end
										if (v3457 == (2 + 3)) then
											v3460 = v83[2 + 0];
											v3459 = v81[v3460];
											v3458 = v81[v3460 + 2 + 0];
											v3457 = 7 - 1;
										end
										if ((1876 < 3848) and ((5 - 2) == v3457)) then
											v81[v83[4 - 2]] = #v81[v83[1654 - (1559 + 92)]];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3457 = 3 + 1;
										end
									end
								end
							elseif (v84 == (194 + 6)) then
								local v3461 = 37 - (9 + 28);
								while true do
									if (v3461 == (2 + 1)) then
										v81[v83[5 - 3]][v81[v83[1955 - (922 + 1030)]]] = v81[v83[387 - (345 + 38)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[13 - 9]];
										v3461 = 4;
									end
									if (v3461 == 0) then
										v81[v83[562 - (546 + 14)]][v81[v83[3]]] = v81[v83[4]];
										v75 = v75 + (1068 - (7 + 1060));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[11 - 8];
										v3461 = 401 - (256 + 144);
									end
									if (v3461 == (124 - (7 + 115))) then
										v83 = v71[v75];
										v81[v83[536 - (21 + 513)]] = v83[3 + 0];
										v75 = v75 + (1278 - (59 + 1218));
										v83 = v71[v75];
										v3461 = 5 - 2;
									end
									if ((7 - 3) == v3461) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[189 - (155 + 31)];
										v75 = v75 + 1;
										v3461 = 7 - 2;
									end
									if (v3461 == (1 + 0)) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1993 - (1417 + 574)]] = v81[v83[3]][v81[v83[156 - (112 + 40)]]];
										v75 = v75 + (1 - 0);
										v3461 = 2 + 0;
									end
									if (v3461 == 5) then
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[687 - (326 + 358)]][v81[v83[836 - (4 + 828)]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3461 = 16 - 10;
									end
									if (v3461 == (1723 - (85 + 1632))) then
										v81[v83[2 + 0]] = {};
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1141 - (1096 + 43)]] = v83[421 - (176 + 242)];
										break;
									end
								end
							else
								local v3462 = 0;
								local v3463;
								while true do
									if (v3462 == (927 - (313 + 599))) then
										v75 = v75 + (640 - (402 + 237));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1059 - (551 + 505)];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[436 - (268 + 165)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3463 = v83[4 - 2];
										v3462 = 7 + 9;
									end
									if ((v3462 == (4 - 2)) or (3994 > 4973)) then
										v75 = v75 + (1773 - (238 + 1534));
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[3]];
										v75 = v75 + (919 - (302 + 616));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1831 - (1054 + 774)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3];
										v3462 = 1328 - (240 + 1085);
									end
									if ((4549 > 2977) and (v3462 == (1249 - (1220 + 7)))) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3463 = v83[1971 - (1819 + 150)];
										v81[v3463] = v81[v3463](v13(v81, v3463 + 1 + 0, v83[3]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]][v81[v83[3]]] = v81[v83[2 + 2]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3462 = 21 + 2;
									end
									if (v3462 == (5 - 1)) then
										v81[v83[2]] = v83[1367 - (229 + 1135)];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3462 = 3 + 2;
									end
									if ((798 - (289 + 493)) == v3462) then
										v81[v3463] = v81[v3463](v13(v81, v3463 + 1 + 0, v83[10 - 7]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[4 + 0]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[1290 - (1170 + 118)]] = v83[1812 - (817 + 992)];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v3462 = 78 - 61;
									end
									if (v3462 == 11) then
										v81[v83[1174 - (852 + 320)]] = v83[2 + 1];
										v75 = v75 + (802 - (731 + 70));
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[601 - (17 + 581)];
										v75 = v75 + (1324 - (470 + 853));
										v83 = v71[v75];
										v3463 = v83[66 - (30 + 34)];
										v81[v3463] = v81[v3463](v13(v81, v3463 + (1 - 0), v83[223 - (180 + 40)]));
										v75 = v75 + (2 - 1);
										v3462 = 190 - (11 + 167);
									end
									if (v3462 == (1651 - (127 + 1512))) then
										v83 = v71[v75];
										v81[v83[3 - 1]][v81[v83[10 - 7]]] = v81[v83[2 + 2]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[2 + 1];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[890 - (304 + 584)]] = v81[v83[6 - 3]];
										v75 = v75 + 1;
										v3462 = 30 - 17;
									end
									if (v3462 == (15 - 5)) then
										v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[18 - 14]];
										v75 = v75 + (1662 - (997 + 664));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[1 + 2];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[3 + 0]];
										v75 = v75 + (985 - (231 + 753));
										v83 = v71[v75];
										v3462 = 17 - 6;
									end
									if (v3462 == (1598 - (615 + 963))) then
										v83 = v71[v75];
										v3463 = v83[1 + 1];
										v81[v3463] = v81[v3463](v13(v81, v3463 + 1 + 0, v83[4 - 1]));
										v75 = v75 + (1805 - (863 + 941));
										v83 = v71[v75];
										v81[v83[840 - (461 + 377)]][v81[v83[3 + 0]]] = v81[v83[2 + 2]];
										v75 = v75 + (1273 - (455 + 817));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[835 - (123 + 709)];
										v3462 = 7 + 14;
									end
									if ((4577 > 2876) and (v3462 == (1719 - (618 + 1076)))) then
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[8 - 6]] = v81[v83[3]];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[946 - (657 + 287)]] = v83[11 - 8];
										v75 = v75 + (1852 - (1256 + 595));
										v3462 = 20 + 6;
									end
									if ((851 <= 2362) and (v3462 == (81 - (59 + 15)))) then
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3463 = v83[2 + 0];
										v81[v3463] = v81[v3463](v13(v81, v3463 + 1 + 0, v83[3]));
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[756 - (406 + 346)]];
										v3462 = 19 - 11;
									end
									if (v3462 == (34 - 25)) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[193 - (127 + 64)]] = v83[3];
										v75 = v75 + (946 - (70 + 875));
										v83 = v71[v75];
										v3463 = v83[3 - 1];
										v81[v3463] = v81[v3463](v13(v81, v3463 + 1, v83[7 - 4]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3462 = 10;
									end
									if (0 == v3462) then
										v3463 = nil;
										v81[v83[2 + 0]] = v81[v83[1592 - (1039 + 550)]];
										v75 = v75 + (203 - (35 + 167));
										v83 = v71[v75];
										v81[v83[1215 - (103 + 1110)]] = v83[1117 - (540 + 574)];
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[1396 - (1283 + 111)]] = v83[355 - (204 + 148)];
										v75 = v75 + (1 - 0);
										v3462 = 1 + 0;
									end
									if (v3462 == (8 + 10)) then
										v3463 = v83[552 - (58 + 492)];
										v81[v3463] = v81[v3463](v13(v81, v3463 + (4 - 3), v83[5 - 2]));
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[1 + 3]];
										v75 = v75 + (784 - (531 + 252));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[8 - 5];
										v75 = v75 + (1787 - (928 + 858));
										v3462 = 33 - 14;
									end
									if ((v3462 == 6) or (3985 <= 1377)) then
										v83 = v71[v75];
										v81[v83[774 - (108 + 664)]] = v83[4 - 1];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[3]];
										v75 = v75 + (836 - (732 + 103));
										v83 = v71[v75];
										v81[v83[630 - (351 + 277)]] = v83[683 - (538 + 142)];
										v75 = v75 + (4 - 3);
										v3462 = 7;
									end
									if ((v3462 == 27) or (1921 > 2154)) then
										v75 = v75 + (1828 - (189 + 1638));
										v83 = v71[v75];
										v81[v83[4 - 2]] = v83[1226 - (348 + 875)];
										v75 = v75 + (1217 - (1202 + 14));
										v83 = v71[v75];
										v81[v83[637 - (619 + 16)]] = v81[v83[682 - (445 + 234)]];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[503 - (295 + 206)]] = v83[3 + 0];
										break;
									end
									if ((3447 > 533) and (v3462 == (53 - 30))) then
										v81[v83[2 + 0]] = v83[3 + 0];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[150 - (84 + 63)]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[1374 - (913 + 459)]] = v83[785 - (700 + 82)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3462 = 22 + 2;
									end
									if (v3462 == 19) then
										v83 = v71[v75];
										v81[v83[445 - (362 + 81)]] = v81[v83[182 - (133 + 46)]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v81[v83[2]] = v83[1528 - (1219 + 306)];
										v75 = v75 + (1958 - (1012 + 945));
										v83 = v71[v75];
										v81[v83[759 - (481 + 276)]] = v83[3];
										v75 = v75 + (2 - 1);
										v3462 = 20;
									end
									if ((1957 == 1957) and ((36 - 23) == v3462)) then
										v83 = v71[v75];
										v81[v83[125 - (49 + 74)]] = v83[1 + 2];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[7 - 5]] = v83[7 - 4];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3463 = v83[7 - 5];
										v81[v3463] = v81[v3463](v13(v81, v3463 + (4 - 3), v83[8 - 5]));
										v3462 = 40 - 26;
									end
									if (v3462 == 1) then
										v83 = v71[v75];
										v3463 = v83[1 + 1];
										v81[v3463] = v81[v3463](v13(v81, v3463 + (2 - 1), v83[3 + 0]));
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[5 - 3]][v81[v83[3 + 0]]] = v81[v83[4]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[1 + 2];
										v3462 = 4 - 2;
									end
									if (v3462 == (11 - 3)) then
										v75 = v75 + (1729 - (17 + 1711));
										v83 = v71[v75];
										v81[v83[5 - 3]] = v83[3];
										v75 = v75 + (114 - (14 + 99));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v81[v83[5 - 2]];
										v75 = v75 + (311 - (287 + 23));
										v83 = v71[v75];
										v81[v83[2]] = v83[6 - 3];
										v3462 = 19 - 10;
									end
									if (14 == v3462) then
										v75 = v75 + (435 - (54 + 380));
										v83 = v71[v75];
										v81[v83[2]][v81[v83[7 - 4]]] = v81[v83[1640 - (486 + 1150)]];
										v75 = v75 + (817 - (356 + 460));
										v83 = v71[v75];
										v81[v83[2 + 0]] = v83[3 - 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[3 - 1]] = v81[v83[2 + 1]];
										v3462 = 1468 - (1281 + 172);
									end
									if ((v3462 == (611 - (158 + 427))) or (1998 < 1926)) then
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3463 = v83[7 - 5];
										v81[v3463] = v81[v3463](v13(v81, v3463 + 1, v83[3]));
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[878 - (103 + 773)]][v81[v83[3 + 0]]] = v81[v83[4]];
										v3462 = 1521 - (739 + 755);
									end
									if ((1249 <= 3024) and (v3462 == (360 - (39 + 304)))) then
										v81[v83[2]] = v81[v83[508 - (129 + 376)]];
										v75 = v75 + (1541 - (282 + 1258));
										v83 = v71[v75];
										v81[v83[1289 - (204 + 1083)]] = v83[709 - (471 + 235)];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[2]] = v83[1090 - (38 + 1049)];
										v75 = v75 + (1626 - (1437 + 188));
										v83 = v71[v75];
										v3462 = 5 + 13;
									end
									if (v3462 == (2 + 1)) then
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3463 = v83[1 + 1];
										v81[v3463] = v81[v3463](v13(v81, v3463 + 1, v83[5 - 2]));
										v75 = v75 + (44 - (11 + 32));
										v83 = v71[v75];
										v81[v83[257 - (81 + 174)]][v81[v83[7 - 4]]] = v81[v83[4]];
										v75 = v75 + (4 - 3);
										v83 = v71[v75];
										v3462 = 4;
									end
									if (v3462 == (788 - (513 + 251))) then
										v81[v83[2]] = v83[3];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v3463 = v83[1 + 1];
										v81[v3463] = v81[v3463](v13(v81, v3463 + 1 + 0, v83[1127 - (1075 + 49)]));
										v75 = v75 + (767 - (373 + 393));
										v83 = v71[v75];
										v81[v83[6 - 4]][v81[v83[891 - (875 + 13)]]] = v81[v83[2 + 2]];
										v75 = v75 + 1;
										v3462 = 13 + 12;
									end
									if ((3379 > 1633) and (v3462 == 5)) then
										v81[v83[1 + 1]] = v83[12 - 9];
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v3463 = v83[2];
										v81[v3463] = v81[v3463](v13(v81, v3463 + 1, v83[1 + 2]));
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v81[v83[2 + 0]][v81[v83[13 - 10]]] = v81[v83[337 - (273 + 60)]];
										v75 = v75 + (3 - 2);
										v3462 = 6;
									end
									if (v3462 == (50 - 29)) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v81[v83[11 - 8]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2 - 0]] = v83[558 - (361 + 194)];
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v81[v83[2]] = v83[12 - 9];
										v3462 = 22;
									end
								end
							end
						elseif ((v84 <= (122 + 86)) or (4017 <= 3166)) then
							if (v84 <= 204) then
								if ((1583 <= 2620) and (v84 <= (817 - 615))) then
									v81[v83[2]][v81[v83[2 + 1]]] = v81[v83[14 - 10]];
								elseif (v84 > 203) then
									v81[v83[2]][v81[v83[850 - (257 + 590)]]] = v81[v83[14 - 10]];
									v75 = v75 + (1956 - (856 + 1099));
									v83 = v71[v75];
									v81[v83[1928 - (1556 + 370)]] = v83[9 - 6];
									v75 = v75 + (1 - 0);
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[175 - (24 + 148)]][v81[v83[2 + 2]]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v83[4 - 1];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[5 - 3]][v81[v83[9 - 6]]] = v81[v83[4 - 0]];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[6 - 4]][v81[v83[8 - 5]]] = v81[v83[1 + 3]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v83[13 - 10];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[1 + 1]] = v81[v83[7 - 4]][v81[v83[11 - 7]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[7 - 5]] = {};
									v75 = v75 + (2 - 1);
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[3];
								else
									local v3483 = 0 + 0;
									local v3484;
									local v3485;
									local v3486;
									while true do
										if ((v3483 == (6 - 2)) or (3063 > 4794)) then
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v81[v83[3 - 1]] = v81[v83[3]][v81[v83[4]]];
											v75 = v75 + 1;
											v3483 = 5;
										end
										if ((2736 > 1647) and (v3483 == 0)) then
											v3484 = nil;
											v3485 = nil;
											v3486 = nil;
											v81[v83[2 + 0]] = {};
											v3483 = 1 + 0;
										end
										if (v3483 == (1722 - (976 + 743))) then
											v81[v83[3 - 1]] = {};
											v75 = v75 + (1515 - (1273 + 241));
											v83 = v71[v75];
											v81[v83[4 - 2]] = v83[8 - 5];
											v3483 = 269 - (135 + 130);
										end
										if (v3483 == (3 - 1)) then
											v83 = v71[v75];
											v81[v83[2 + 0]] = v81[v83[3 + 0]][v81[v83[11 - 7]]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v3483 = 3;
										end
										if (6 == v3483) then
											for v7079 = 1 + 0, v3484 do
												v3485[v7079] = v81[v3486 + v7079];
											end
											break;
										end
										if ((1010 < 4057) and (v3483 == (1746 - (1289 + 452)))) then
											v83 = v71[v75];
											v3486 = v83[1 + 1];
											v3485 = v81[v3486];
											v3484 = v83[332 - (90 + 239)];
											v3483 = 935 - (117 + 812);
										end
										if ((1000 < 2304) and (v3483 == (1000 - (146 + 853)))) then
											v75 = v75 + (1966 - (986 + 979));
											v83 = v71[v75];
											v81[v83[660 - (555 + 103)]] = v83[4 - 1];
											v75 = v75 + (738 - (329 + 408));
											v3483 = 1 + 1;
										end
									end
								end
							elseif ((v84 <= 206) or (1042 > 4243)) then
								if ((v84 > (1915 - (838 + 872))) or (3108 <= 2052)) then
									local v3487 = 0 + 0;
									while true do
										if (v3487 == (528 - (400 + 123))) then
											v81[v83[2]][v81[v83[1 + 2]]] = v81[v83[1960 - (547 + 1409)]];
											v75 = v75 + (81 - (73 + 7));
											v83 = v71[v75];
											v3487 = 1 + 5;
										end
										if (v3487 == 2) then
											v81[v83[2 + 0]] = v81[v83[9 - 6]][v81[v83[4]]];
											v75 = v75 + (1 - 0);
											v83 = v71[v75];
											v3487 = 3 + 0;
										end
										if ((v3487 == 4) or (1296 == 4060)) then
											v81[v83[1 + 1]][v81[v83[3]]] = v81[v83[3 + 1]];
											v75 = v75 + (3 - 2);
											v83 = v71[v75];
											v3487 = 5;
										end
										if (v3487 == (1990 - (98 + 1891))) then
											v81[v83[2]] = v83[42 - (16 + 23)];
											v75 = v75 + (1733 - (1184 + 548));
											v83 = v71[v75];
											v3487 = 1532 - (270 + 1260);
										end
										if (v3487 == 6) then
											v81[v83[2 + 0]] = v83[738 - (60 + 675)];
											v75 = v75 + 1;
											v83 = v71[v75];
											v3487 = 1 + 6;
										end
										if (v3487 == (1205 - (984 + 218))) then
											v81[v83[384 - (45 + 337)]] = v83[331 - (74 + 254)];
											v75 = v75 + 1 + 0;
											v83 = v71[v75];
											v3487 = 4;
										end
										if (v3487 == (6 + 3)) then
											v81[v83[1351 - (1190 + 159)]] = v83[3 + 0];
											break;
										end
										if (v3487 == (0 + 0)) then
											v81[v83[2 + 0]][v81[v83[7 - 4]]] = v81[v83[2 + 2]];
											v75 = v75 + (1419 - (192 + 1226));
											v83 = v71[v75];
											v3487 = 737 - (511 + 225);
										end
										if (v3487 == (7 + 1)) then
											v81[v83[1397 - (1200 + 195)]] = {};
											v75 = v75 + (1579 - (329 + 1249));
											v83 = v71[v75];
											v3487 = 786 - (631 + 146);
										end
										if ((v3487 == (26 - 19)) or (2234 < 1197)) then
											v81[v83[1 + 1]] = v81[v83[1036 - (510 + 523)]][v81[v83[1 + 3]]];
											v75 = v75 + (4 - 3);
											v83 = v71[v75];
											v3487 = 4 + 4;
										end
									end
								else
									local v3488;
									local v3489;
									local v3490;
									v81[v83[5 - 3]] = {};
									v75 = v75 + (1472 - (996 + 475));
									v83 = v71[v75];
									v81[v83[2]] = v83[3];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2]] = v81[v83[3 - 0]][v81[v83[4]]];
									v75 = v75 + 1 + 0;
									v83 = v71[v75];
									v81[v83[2 + 0]] = {};
									v75 = v75 + (1943 - (1132 + 810));
									v83 = v71[v75];
									v81[v83[2 - 0]] = v83[11 - 8];
									v75 = v75 + 1;
									v83 = v71[v75];
									v81[v83[2 + 0]] = v81[v83[1964 - (941 + 1020)]][v81[v83[531 - (313 + 214)]]];
									v75 = v75 + (545 - (363 + 181));
									v83 = v71[v75];
									v3490 = v83[2 + 0];
									v3489 = v81[v3490];
									v3488 = v83[1 + 2];
									for v4606 = 1450 - (91 + 1358), v3488 do
										v3489[v4606] = v81[v3490 + v4606];
									end
								end
							elseif ((154 < 2530) and (v84 > (6 + 201))) then
								v81[v83[3 - 1]][v83[5 - 2]] = v81[v83[4]];
							else
								v81[v83[2 + 0]][v81[v83[8 - 5]]] = v81[v83[4]];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[1 + 2];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3 + 0]][v81[v83[4]]];
								v75 = v75 + (4 - 3);
								v83 = v71[v75];
								v81[v83[2]] = v83[2 + 1];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[870 - (311 + 557)]][v81[v83[166 - (117 + 46)]]] = v81[v83[2 + 2]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[506 - (268 + 236)]][v81[v83[2 + 1]]] = v81[v83[4]];
								v75 = v75 + (181 - (92 + 88));
								v83 = v71[v75];
								v81[v83[2 - 0]] = v83[1087 - (745 + 339)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[3]][v81[v83[4]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[3 - 1]] = {};
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[741 - (582 + 156)];
							end
						elseif ((3688 >= 963) and (v84 <= 211)) then
							if (v84 <= (1979 - (268 + 1502))) then
								v81[v83[1448 - (219 + 1227)]][v81[v83[1 + 2]]] = v81[v83[4]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[9 - 6];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1978 - (1855 + 121)]] = v81[v83[3]][v81[v83[19 - 15]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[7 - 4];
								v75 = v75 + (787 - (452 + 334));
								v83 = v71[v75];
								v81[v83[2]][v81[v83[3 - 0]]] = v81[v83[1397 - (698 + 695)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]][v81[v83[3]]] = v81[v83[4]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[3];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[6 - 3]][v81[v83[4 - 0]]];
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2 + 0]] = {};
								v75 = v75 + (1730 - (529 + 1200));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[281 - (199 + 79)];
							elseif (v84 > 210) then
								local v3521 = 0 + 0;
								local v3522;
								local v3523;
								local v3524;
								while true do
									if (2 == v3521) then
										v83 = v71[v75];
										v81[v83[6 - 4]] = v81[v83[3]][v81[v83[4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3521 = 587 - (120 + 464);
									end
									if (v3521 == (1 - 0)) then
										v75 = v75 + 1;
										v83 = v71[v75];
										v81[v83[2]] = v83[3 + 0];
										v75 = v75 + (755 - (33 + 721));
										v3521 = 2;
									end
									if ((v3521 == (1369 - (1061 + 302))) or (1864 == 600)) then
										for v7082 = 1730 - (719 + 1010), v3522 do
											v3523[v7082] = v81[v3524 + v7082];
										end
										break;
									end
									if (v3521 == 0) then
										v3522 = nil;
										v3523 = nil;
										v3524 = nil;
										v81[v83[2]] = {};
										v3521 = 3 - 2;
									end
									if (v3521 == (944 - (446 + 493))) then
										v83 = v71[v75];
										v3524 = v83[1 + 1];
										v3523 = v81[v3524];
										v3522 = v83[1147 - (602 + 542)];
										v3521 = 4 + 2;
									end
									if (v3521 == 4) then
										v75 = v75 + (2 - 1);
										v83 = v71[v75];
										v81[v83[363 - (276 + 85)]] = v81[v83[1383 - (816 + 564)]][v81[v83[8 - 4]]];
										v75 = v75 + 1;
										v3521 = 919 - (854 + 60);
									end
									if (v3521 == (698 - (227 + 468))) then
										v81[v83[1 + 1]] = {};
										v75 = v75 + (530 - (54 + 475));
										v83 = v71[v75];
										v81[v83[2]] = v83[3];
										v3521 = 6 - 2;
									end
								end
							else
								v81[v83[34 - (21 + 11)]][v81[v83[3 + 0]]] = v81[v83[4]];
								v75 = v75 + (1596 - (1351 + 244));
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[7 - 5]] = v81[v83[427 - (407 + 17)]][v81[v83[1 + 3]]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[951 - (174 + 775)]][v81[v83[3]]] = v81[v83[1764 - (601 + 1159)]];
								v75 = v75 + (1149 - (388 + 760));
								v83 = v71[v75];
								v81[v83[1 + 1]][v81[v83[1953 - (900 + 1050)]]] = v81[v83[4 + 0]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[3 + 0];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[3]][v81[v83[13 - 9]]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[284 - (80 + 202)]] = {};
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[8 - 5];
							end
						elseif (v84 <= (185 + 28)) then
							if (v84 > (259 - 47)) then
								local v3542 = 0 - 0;
								local v3543;
								local v3544;
								local v3545;
								while true do
									if ((1320 == 1320) and (v3542 == (3 + 1))) then
										v81[v83[666 - (308 + 356)]] = {};
										v75 = v75 + 1 + 0;
										v83 = v71[v75];
										v3542 = 15 - 10;
									end
									if (v3542 == 5) then
										v81[v83[2 + 0]] = v83[4 - 1];
										v75 = v75 + (1055 - (1021 + 33));
										v83 = v71[v75];
										v3542 = 6;
									end
									if (v3542 == 0) then
										v3543 = nil;
										v3544 = nil;
										v3545 = nil;
										v3542 = 1052 - (46 + 1005);
									end
									if ((4951 >= 1563) and (v3542 == (7 + 1))) then
										for v7085 = 1 - 0, v3543 do
											v3544[v7085] = v81[v3545 + v7085];
										end
										break;
									end
									if (v3542 == (6 + 1)) then
										v3545 = v83[2 - 0];
										v3544 = v81[v3545];
										v3543 = v83[3];
										v3542 = 1 + 7;
									end
									if ((1291 < 4426) and (v3542 == (5 - 2))) then
										v81[v83[5 - 3]] = v81[v83[5 - 2]][v81[v83[8 - 4]]];
										v75 = v75 + 1;
										v83 = v71[v75];
										v3542 = 2 + 2;
									end
									if (v3542 == (2 - 0)) then
										v81[v83[1 + 1]] = v83[1059 - (131 + 925)];
										v75 = v75 + (1289 - (347 + 941));
										v83 = v71[v75];
										v3542 = 1624 - (893 + 728);
									end
									if (v3542 == (4 + 2)) then
										v81[v83[1 + 1]] = v81[v83[3]][v81[v83[4 - 0]]];
										v75 = v75 + (1 - 0);
										v83 = v71[v75];
										v3542 = 7;
									end
									if ((1 + 0) == v3542) then
										v81[v83[2]] = {};
										v75 = v75 + (3 - 2);
										v83 = v71[v75];
										v3542 = 2 + 0;
									end
								end
							else
								local v3546;
								v81[v83[910 - (599 + 309)]] = v81[v83[1915 - (1598 + 314)]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[1617 - (274 + 1340)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v3546 = v83[1 + 1];
								v81[v3546] = v81[v3546](v13(v81, v3546 + (1415 - (557 + 857)), v83[8 - 5]));
								v75 = v75 + (3 - 2);
								v83 = v71[v75];
								v81[v83[2]][v81[v83[1115 - (581 + 531)]]] = v81[v83[12 - 8]];
								v75 = v75 + (1336 - (1314 + 21));
								v83 = v71[v75];
								v81[v83[3 - 1]] = v83[1 + 2];
								v75 = v75 + (1190 - (487 + 702));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[4 - 1]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]] = v83[1 + 2];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[541 - (86 + 452)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v3546 = v83[2 + 0];
								v81[v3546] = v81[v3546](v13(v81, v3546 + 1, v83[7 - 4]));
								v75 = v75 + (1073 - (123 + 949));
								v83 = v71[v75];
								v81[v83[915 - (836 + 77)]][v81[v83[653 - (354 + 296)]]] = v81[v83[96 - (5 + 87)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[3 + 0];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[2 + 1]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[5 - 2];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[684 - (267 + 415)]] = v83[3];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v3546 = v83[2 + 0];
								v81[v3546] = v81[v3546](v13(v81, v3546 + 1, v83[1 + 2]));
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]][v81[v83[3]]] = v81[v83[3 + 1]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[1895 - (1799 + 93)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[1 + 2]];
								v75 = v75 + (20 - (6 + 13));
								v83 = v71[v75];
								v81[v83[1061 - (383 + 676)]] = v83[343 - (119 + 221)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[3];
								v75 = v75 + (482 - (345 + 136));
								v83 = v71[v75];
								v3546 = v83[2 - 0];
								v81[v3546] = v81[v3546](v13(v81, v3546 + (2 - 1), v83[5 - 2]));
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[478 - (345 + 131)]][v81[v83[3]]] = v81[v83[4]];
								v75 = v75 + (1302 - (916 + 385));
								v83 = v71[v75];
								v81[v83[294 - (6 + 286)]] = v83[7 - 4];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v81[v83[3]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + (292 - (151 + 140));
								v83 = v71[v75];
								v81[v83[2 - 0]] = v83[957 - (32 + 922)];
								v75 = v75 + 1;
								v83 = v71[v75];
								v3546 = v83[844 - (322 + 520)];
								v81[v3546] = v81[v3546](v13(v81, v3546 + 1 + 0, v83[2 + 1]));
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[225 - (187 + 34)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[5 - 2];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[298 - (194 + 102)]] = v81[v83[555 - (49 + 503)]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1351 - (12 + 1337)]] = v83[6 - 3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1067 - (38 + 1027)]] = v83[7 - 4];
								v75 = v75 + (122 - (11 + 110));
								v83 = v71[v75];
								v3546 = v83[817 - (199 + 616)];
								v81[v3546] = v81[v3546](v13(v81, v3546 + 1 + 0, v83[3]));
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[481 - (396 + 83)]][v81[v83[6 - 3]]] = v81[v83[1 + 3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1787 - (774 + 1011)]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[5 - 3]] = v81[v83[3]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[5 - 2];
								v75 = v75 + (390 - (94 + 295));
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[1 + 2];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v3546 = v83[2];
								v81[v3546] = v81[v3546](v13(v81, v3546 + 1, v83[6 - 3]));
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]][v81[v83[4 - 1]]] = v81[v83[10 - 6]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[5 - 2];
								v75 = v75 + (11 - (6 + 4));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[8 - 5]];
								v75 = v75 + (854 - (629 + 224));
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[3];
								v75 = v75 + (1523 - (466 + 1056));
								v83 = v71[v75];
								v81[v83[767 - (485 + 280)]] = v83[3];
								v75 = v75 + (92 - (51 + 40));
								v83 = v71[v75];
								v3546 = v83[795 - (610 + 183)];
								v81[v3546] = v81[v3546](v13(v81, v3546 + 1, v83[3]));
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2 + 0]][v81[v83[1 + 2]]] = v81[v83[4]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]] = v83[775 - (572 + 200)];
								v75 = v75 + (1976 - (1598 + 377));
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[3]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[1281 - (881 + 397)];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[1215 - (892 + 321)]] = v83[630 - (441 + 186)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v3546 = v83[2];
								v81[v3546] = v81[v3546](v13(v81, v3546 + (1422 - (606 + 815)), v83[14 - 11]));
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[1176 - (1055 + 117)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[690 - (266 + 422)]] = v83[11 - 8];
								v75 = v75 + (1892 - (1098 + 793));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[1 + 2]];
								v75 = v75 + (1560 - (12 + 1547));
								v83 = v71[v75];
								v81[v83[1360 - (149 + 1209)]] = v83[1 + 2];
								v75 = v75 + (1015 - (6 + 1008));
								v83 = v71[v75];
								v81[v83[2]] = v83[1349 - (603 + 743)];
								v75 = v75 + (241 - (152 + 88));
								v83 = v71[v75];
								v3546 = v83[319 - (207 + 110)];
								v81[v3546] = v81[v3546](v13(v81, v3546 + 1, v83[3]));
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[4 - 2]][v81[v83[1836 - (1401 + 432)]]] = v81[v83[6 - 2]];
								v75 = v75 + (1038 - (838 + 199));
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[3];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[3 - 1]] = v81[v83[433 - (320 + 110)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2]] = v83[7 - 4];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v83[140 - (123 + 14)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v3546 = v83[5 - 3];
								v81[v3546] = v81[v3546](v13(v81, v3546 + (103 - (62 + 40)), v83[7 - 4]));
								v75 = v75 + (1098 - (823 + 274));
								v83 = v71[v75];
								v81[v83[966 - (134 + 830)]][v81[v83[7 - 4]]] = v81[v83[13 - 9]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[1583 - (1430 + 151)]] = v83[1361 - (104 + 1254)];
								v75 = v75 + (425 - (161 + 263));
								v83 = v71[v75];
								v81[v83[2]] = v81[v83[5 - 2]];
								v75 = v75 + (1397 - (317 + 1079));
								v83 = v71[v75];
								v81[v83[3 - 1]] = v83[8 - 5];
								v75 = v75 + (316 - (76 + 239));
								v83 = v71[v75];
								v81[v83[375 - (349 + 24)]] = v83[4 - 1];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v3546 = v83[2];
								v81[v3546] = v81[v3546](v13(v81, v3546 + 1 + 0, v83[1 + 2]));
								v75 = v75 + (1635 - (1428 + 206));
								v83 = v71[v75];
								v81[v83[1507 - (1207 + 298)]][v81[v83[351 - (224 + 124)]]] = v81[v83[36 - (7 + 25)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[4 - 2]] = v83[1055 - (886 + 166)];
								v75 = v75 + (1 - 0);
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[321 - (142 + 176)]];
								v75 = v75 + 1;
								v83 = v71[v75];
								v81[v83[2 + 0]] = v83[941 - (584 + 354)];
								v75 = v75 + (489 - (384 + 104));
								v83 = v71[v75];
								v81[v83[5 - 3]] = v83[38 - (13 + 22)];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v3546 = v83[2];
								v81[v3546] = v81[v3546](v13(v81, v3546 + 1 + 0, v83[5 - 2]));
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]][v81[v83[7 - 4]]] = v81[v83[4]];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[2]] = v83[3];
								v75 = v75 + 1 + 0;
								v83 = v71[v75];
								v81[v83[1 + 1]] = v81[v83[2 + 1]];
								v75 = v75 + (2 - 1);
								v83 = v71[v75];
								v81[v83[2]] = v83[255 - (106 + 146)];
							end
						elseif ((4462 > 1837) and (v84 > (424 - 210))) then
							local v3637;
							local v3638;
							local v3639;
							v81[v83[3 - 1]] = v83[3 + 0];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[1020 - (75 + 943)]] = v81[v83[1066 - (972 + 91)]][v81[v83[13 - 9]]];
							v75 = v75 + (2 - 1);
							v83 = v71[v75];
							v81[v83[1348 - (918 + 428)]] = {};
							v75 = v75 + (1598 - (1099 + 498));
							v83 = v71[v75];
							v81[v83[1687 - (997 + 688)]] = v83[1425 - (1406 + 16)];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[921 - (715 + 204)]] = v81[v83[3 + 0]][v81[v83[3 + 1]]];
							v75 = v75 + (664 - (275 + 388));
							v83 = v71[v75];
							v3639 = v83[2];
							v3638 = v81[v3639];
							v3637 = v83[3 - 0];
							for v4609 = 1 + 0, v3637 do
								v3638[v4609] = v81[v3639 + v4609];
							end
						else
							v81[v83[1 + 1]][v81[v83[3 + 0]]] = v81[v83[4]];
							v75 = v75 + (3 - 2);
							v83 = v71[v75];
							v81[v83[1 + 1]] = v83[3];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[6 - 4]] = v81[v83[2 + 1]][v81[v83[3 + 1]]];
							v75 = v75 + 1 + 0;
							v83 = v71[v75];
							v81[v83[567 - (5 + 560)]] = v83[3];
							v75 = v75 + (407 - (77 + 329));
							v83 = v71[v75];
							v81[v83[2]][v81[v83[3 + 0]]] = v81[v83[2 + 2]];
							v75 = v75 + (1952 - (397 + 1554));
							v83 = v71[v75];
							v81[v83[1259 - (219 + 1038)]][v81[v83[3 + 0]]] = v81[v83[4]];
							v75 = v75 + 1;
							v83 = v71[v75];
							v81[v83[1 + 1]] = v83[3];
							v75 = v75 + (1 - 0);
							v83 = v71[v75];
							v81[v83[4 - 2]] = v81[v83[5 - 2]][v81[v83[2 + 2]]];
							v75 = v75 + (753 - (404 + 348));
							v83 = v71[v75];
							v81[v83[2]] = {};
							v75 = v75 + (149 - (99 + 49));
							v83 = v71[v75];
							v81[v83[2 + 0]] = v83[1972 - (1223 + 746)];
						end
						v75 = v75 + 1;
						break;
					end
					if ((v113 == (0 - 0)) or (217 >= 1513)) then
						v83 = v71[v75];
						v84 = v83[1];
						v113 = 1;
					end
				end
			end
		end;
	end
	return v29(v28(), {}, v17)(...);
end
return vv9(), ...);
